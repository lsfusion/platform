<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
		  http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

    <welcome-file-list>
        <welcome-file>main</welcome-file>
    </welcome-file-list>

    <context-param>
        <description>Application registry server</description>
        <param-name>host</param-name>
        <param-value>localhost</param-value>
    </context-param>
    <context-param>
        <description>Application registry port</description>
        <param-name>port</param-name>
        <param-value>7652</param-value>
    </context-param>
    <context-param>
        <description>Application export name</description>
        <param-name>exportName</param-name>
        <param-value>default</param-value>
    </context-param>
    <!--secret key to authenticate users without password-->
    <context-param>
        <description>Application authentication secret</description>
        <param-name>authSecret</param-name>
        <param-value>secretKey</param-value>
    </context-param>

    <!-- UI (gwt) dispatch servlet-->
    <!-- it's tricky here, we already have a dispatch servlet (MainDispatchServlet), but we want it to be instantiated with spring (to autowire it), that's why we've implemented HttpRequestHandler interface and redirect HttpRequestHandler.handleRequest to Servlet.service (and in that xml we use "proxy" HttpRequestHandlerServlet) -->
    <servlet>
        <servlet-name>mainDispatch</servlet-name>
        <servlet-class>org.springframework.web.context.support.HttpRequestHandlerServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>mainDispatch</servlet-name>
        <!-- gwt dispatch endpoint is <moduleName>/dispatch -->
        <!-- dispatch is the default value for remoteServiceRelativePath parameter of RemoteServiceProxy constructor in its super call in StandardDispatchService_Proxy constructor-->
        <url-pattern>/main/dispatch</url-pattern>
    </servlet-mapping>

    <!-- for backward compatibility -->
    <servlet>
        <servlet-name>jnlpHandler</servlet-name>
        <servlet-class>org.springframework.web.context.support.HttpRequestHandlerServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>jnlpHandler</servlet-name>
        <url-pattern>/client.jnlp</url-pattern>
    </servlet-mapping>

    <!-- API (external requests) servlet -->
    <servlet>
        <servlet-name>externalHandler</servlet-name>
        <servlet-class>org.springframework.web.context.support.HttpRequestHandlerServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>externalHandler</servlet-name>
        <url-pattern>/exec/*</url-pattern> 
        <url-pattern>/eval/*</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>externalFormHandler</servlet-name>
        <servlet-class>org.springframework.web.context.support.HttpRequestHandlerServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>externalFormHandler</servlet-name>
        <url-pattern>/form</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>fileUploadHandler</servlet-name>
        <servlet-class>org.springframework.web.context.support.HttpRequestHandlerServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>fileUploadHandler</servlet-name>
        <url-pattern>/uploadFile</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>fileDownloadHandler</servlet-name>
        <servlet-class>org.springframework.web.context.support.HttpRequestHandlerServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>fileDownloadHandler</servlet-name>
        <!-- should correspond DOWNLOAD_HANDLER in FileUtils-->
        <url-pattern>/file/*</url-pattern>
    </servlet-mapping>

    <!--spring MVC-->
    <servlet>
        <servlet-name>LSFWeb</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/lsf-mvc-config.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>LSFWeb</servlet-name>
        <url-pattern>/login</url-pattern>
        <url-pattern>/manifest</url-pattern>
        <url-pattern>/main</url-pattern>
        <url-pattern>/registration</url-pattern>
        <url-pattern>/forgot-password</url-pattern>
        <url-pattern>/change-password</url-pattern>
        <url-pattern>/push-notification</url-pattern>
    </servlet-mapping>


    <!-- LOG4J configuration -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>/WEB-INF/classes/log4j.xml</param-value>
    </context-param>
    <context-param>
        <param-name>log4jExposeWebAppRoot</param-name>
        <param-value>false</param-value>
    </context-param>

    <!-- Spring configuration -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            /WEB-INF/application-context.xml
            /WEB-INF/security-config.xml
        </param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

<!--  moved this character encoding filter from applicationContext-security.xml to use the utf-8 encoding for all requests, not just authorised requests -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/exec/*</url-pattern>
        <url-pattern>/eval/*</url-pattern>
        <url-pattern>/form</url-pattern>
        <url-pattern>/uploadFile</url-pattern>
        <url-pattern>/file/*</url-pattern>
        <url-pattern>/login</url-pattern>
        <url-pattern>/login_check</url-pattern>
        <url-pattern>/main</url-pattern>
        <url-pattern>/registration</url-pattern>
        <url-pattern>/forgot-password</url-pattern>
        <url-pattern>/change-password</url-pattern>
        <url-pattern>/push-notification</url-pattern>
    </filter-mapping>

    <!-- exposes request params and locale to the thread, used in LSFRemoteAuthenticationProvider and ServerMessages.getString (where there is no explicit request) -->
    <filter>
        <filter-name>springRequestContextFilter</filter-name>
        <filter-class>org.springframework.web.filter.RequestContextFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springRequestContextFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- initializing spring security -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--Filter to convert OAuth2 authentication token to LSFAuthenticationToken-->
    <filter>
        <filter-name>oauth2ToLSFTokenFilter</filter-name>
        <filter-class>lsfusion.http.authentication.OAuth2ToLSFTokenFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>oauth2ToLSFTokenFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- sets lsf user locale for request -->
    <filter>
        <filter-name>LSFLocaleFilter</filter-name>
        <filter-class>lsfusion.http.authentication.LSFLocaleFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>LSFLocaleFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- CORS -->
    <filter>
        <filter-name>CORS</filter-name>
        <filter-class>com.thetransactioncompany.cors.CORSFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>CORS</filter-name>
        <!-- should match applicationContext-security first rule -->
        <url-pattern>/exec/*</url-pattern>
        <url-pattern>/eval/*</url-pattern>
        <url-pattern>/form</url-pattern>
    </filter-mapping>

    <!-- need to cache static resources - gwt/public and webapp (see urlrewrite.xml) -->
    <filter>
        <filter-name>UrlRewriteFilter</filter-name>
        <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>UrlRewriteFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <jsp-config>
        <taglib>
            <taglib-uri>writeResources</taglib-uri>
            <taglib-location>/WEB-INF/tags/writeResources.tld</taglib-location>
        </taglib>
    </jsp-config>
</web-app>
