<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:b="http://www.springframework.org/schema/beans"
         xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                                 http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- API security-->
    <!-- API doesn't need to redirect to login.jsp and the real authentication process is on app server-->
    <!-- unlike ant matcher, regex respects ? so we need this odd regex-->
    <!-- we're trying to avoid creating sessions (it's important for REST requests, otherwise session will be created every time with authenticated request) -->
    <http request-matcher="regex" pattern="^/(((exec|eval)($|\?.*|/.*))|(form($|\?.*)))" create-session="never">
        <http-basic/>
        <csrf disabled="true"/>

        <custom-filter before="FORM_LOGIN_FILTER" ref="tokenFilter"/>
    </http>

    <!-- main subdomains (i.e resources), however now it's not needed since saveDownload is used (and thus 2 mechanisms listed below) -->
    <http pattern="/main/*/**" auto-config="false" disable-url-rewriting="true" entry-point-ref="restAuthenticationEntryPoint">
        <intercept-url pattern="/**" access="isAuthenticated()"/>
        <csrf disabled="true"/>
    </http>

    <!-- for login.css, logo, favicon, etc. (and download logo and icon if for them context export is enabled) -->
    <http pattern="/static/noauth/**" security="none"/>

    <http pattern="/static/**" auto-config="false" disable-url-rewriting="true" entry-point-ref="restAuthenticationEntryPoint">
        <intercept-url pattern="/**" access="isAuthenticated()"/>
        <csrf disabled="true"/>
    </http>

    <!-- we need to download logo and icon -->
    <http pattern="/downloadFile/static/noauth/**" security="none"/>

    <http pattern="/downloadFile/**" auto-config="false" disable-url-rewriting="true" entry-point-ref="restAuthenticationEntryPoint">
        <intercept-url pattern="/**" access="isAuthenticated()"/>
        <csrf disabled="true"/>
    </http>

    <http pattern="/forgot-password" security="none"/>
    <http pattern="/change-password" security="none"/>
    <http pattern="/registration" security="none"/>

    <http pattern="/push-notification" security="none"/>

    <http pattern="/app-not-available" security="none"/>

    <!--for backward compatibility-->
    <http pattern="/client.jnlp" security="none"/>
    <!--for jar -->
    <http pattern="/lsfusion-client*" security="none"/>

    <!--service-worker must be accessible without security-->
    <!--  when security for service-worker is enabled, when logging in again after logging out,
            unexpected behavior occurs:
                user enters login and password, and then goes to /service-worker.js instead of /main -->
    <http pattern="/service-worker.js" security="none"/>
    <http pattern="/manifest" security="none"/>
    <!-- UI security -->
    <http entry-point-ref="entryPoint">
        <intercept-url pattern="/**" access="isAuthenticated()"/>

        <oauth2-login login-page="/login"
                      authentication-success-handler-ref="successLoginHandler"
                      authentication-failure-handler-ref="failureLoginHandler"
                      authorized-client-service-ref="auth2AuthorizedClientService"
                      client-registration-repository-ref="lsfClientRegistrationRepository"/>
        <form-login login-page="/login" login-processing-url="/login_check" authentication-success-handler-ref="successLoginHandler" authentication-failure-handler-ref="failureLoginHandler"/>
        <!-- invalidate-session="false" no invalidating session to give user opportunity to relogin, when another tab is opened, but it's not that secure because user can login with another access, and the tab with different access will be available -->
        <!-- UPD: left invalidate-session="false" to be able to pass attributes between sessions (SPRING_SECURITY_LAST_EXCEPTION). 
         We invalidate session manually in LSFSimpleUrlLogoutSuccessHandler instead.-->
        <logout logout-url="/logout" success-handler-ref="successLogoutHandler" invalidate-session="false"/>

        <csrf disabled="true"/>

        <custom-filter after="ANONYMOUS_FILTER" ref="anonymousFilter"/>

        <custom-filter position="PRE_AUTH_FILTER" ref="urlAuthenticationFilter"/>
    </http>

    <!-- Security beans -->

    <!--for for programmatic creation and inject custom clientRegistrationRepository because he has a dynamic number of registrations-->
    <b:bean id="lsfClientRegistrationRepository" class="lsfusion.http.authentication.LSFClientRegistrationRepository">
        <b:constructor-arg ref="logicsProvider"/>
        <b:constructor-arg ref="servletContext"/>
    </b:bean>
    <b:bean id="auth2AuthorizedClientService" class="org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService">
        <b:constructor-arg ref="lsfClientRegistrationRepository"/>
    </b:bean>

    <!-- read app token from authentication:bearer -->
    <b:bean id="tokenFilter" class="lsfusion.http.authentication.LSFAuthTokenFilter">
        <b:constructor-arg ref="authenticationManager"/>
    </b:bean>
    <!-- authenticate user when anonymousUI is enabled, and no auth provided -->
    <b:bean id="anonymousFilter" class="lsfusion.http.authentication.LSFAuthAnonymousFilter">
        <b:constructor-arg ref="authenticationManager"/>
        <b:constructor-arg ref="logicsProvider"/>
    </b:bean>

    <b:bean id="entryPoint" class="lsfusion.http.authentication.LSFLoginUrlAuthenticationEntryPoint">
        <b:constructor-arg value="/login"/>
        <b:property name="useForward" value="true"/>
    </b:bean>

    <b:bean id="successLoginHandler" class="lsfusion.http.authentication.LSFAuthenticationSuccessHandler">
        <b:constructor-arg ref="logicsProvider"/>
        <b:constructor-arg ref="servletContext"/>
        <b:constructor-arg ref="lsfClientRegistrationRepository"/>
    </b:bean>
    <b:bean id="failureLoginHandler" class="lsfusion.http.authentication.LSFAuthenticationFailureHandler"/>

    <b:bean id="successLogoutHandler" class="lsfusion.http.authentication.LSFSimpleUrlLogoutSuccessHandler"/>

    <b:bean id="restAuthenticationEntryPoint" class="lsfusion.http.authentication.RestAuthenticationEntryPoint"/>

    <!--Convert OAuth2 authentication token to LSFAuthenticationToken-->
    <b:bean id="oauth2ToLSFTokenFilter" class="lsfusion.http.authentication.OAuth2ToLSFTokenFilter">
        <b:property name="logicsProvider" ref="logicsProvider"/>
        <b:property name="thisServletContext" ref="servletContext"/>
        <b:property name="clientRegistrations" ref="lsfClientRegistrationRepository"/>
    </b:bean>

    <!--Authenticate by url get-params-->
    <b:bean id="urlAuthenticationFilter" class="lsfusion.http.authentication.LSFUrlAuthenticationFilter">
        <b:constructor-arg ref="authenticationProvider"/>
    </b:bean>

    <!-- Authentication configuration -->
    
    <authentication-manager alias="authenticationManager"> <!-- we need alias to refer it from auth token filter -->
        <authentication-provider ref="authenticationProvider"/>
    </authentication-manager>

    <b:bean id="authenticationProvider" class="lsfusion.http.authentication.LSFRemoteAuthenticationProvider">
        <b:constructor-arg ref="logicsProvider"/>
    </b:bean>

</b:beans>