{
  "version": 3,
  "file": "pivot.js",
  "sourceRoot": "\\",
  "sources": [
    "pivot.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "callWithJQuery = (pivotModule) ->\r\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\r\n        pivotModule require(\"jquery\")\r\n    else if typeof define is \"function\" and define.amd # AMD\r\n        define [\"jquery\"], pivotModule\r\n    # Plain browser env\r\n    else\r\n        pivotModule jQuery\r\n\r\ncallWithJQuery ($) ->\r\n\r\n    ###\r\n    Utilities\r\n    ###\r\n\r\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\r\n        nStr += ''\r\n        x = nStr.split('.')\r\n        x1 = x[0]\r\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\r\n        rgx = /(\\d+)(\\d{3})/\r\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\r\n        return x1 + x2\r\n\r\n    numberFormat = (opts) ->\r\n        defaults =\r\n            digitsAfterDecimal: 2, scaler: 1,\r\n            thousandsSep: \",\", decimalSep: \".\"\r\n            prefix: \"\", suffix: \"\"\r\n        opts = $.extend({}, defaults, opts)\r\n        (x) ->\r\n            return \"\" if isNaN(x) or not isFinite(x)\r\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\r\n            return \"\"+opts.prefix+result+opts.suffix\r\n\r\n    #aggregator templates default to US number formatting but this is overrideable\r\n    usFmt = numberFormat()\r\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\r\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\r\n\r\n    aggregatorTemplates =\r\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\r\n            count: 0\r\n            push:  -> @count++\r\n            value: -> @count\r\n            format: formatter\r\n\r\n        uniques: (fn, formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            uniq: []\r\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\r\n            value: -> fn(@uniq)\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            sum: 0\r\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\r\n            value: -> @sum\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        extremes: (mode, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            val: null\r\n            sorter: getSort(data?.sorters, attr)\r\n            push: (record) ->\r\n                x = record[attr]\r\n                if mode in [\"min\", \"max\"]\r\n                    x = parseFloat(x)\r\n                    if not isNaN x then @val = Math[mode](x, @val ? x)\r\n                if mode == \"first\" then @val = x if @sorter(x, @val ? x) <= 0\r\n                if mode == \"last\"  then @val = x if @sorter(x, @val ? x) >= 0\r\n            value: -> @val\r\n            format: (x) -> if isNaN(x) then x else formatter(x)\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        quantile: (q, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            vals: []\r\n            push: (record) ->\r\n                x = parseFloat(record[attr])\r\n                @vals.push(x) if not isNaN(x)\r\n            value: ->\r\n                return null if @vals.length == 0\r\n                @vals.sort((a,b) -> a-b)\r\n                i = (@vals.length-1)*q\r\n                return (@vals[Math.floor(i)] + @vals[Math.ceil(i)])/2.0\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        runningStat: (mode=\"mean\", ddof=1, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            n: 0.0, m: 0.0, s: 0.0\r\n            push: (record) ->\r\n                x = parseFloat(record[attr])\r\n                return if isNaN(x)\r\n                @n += 1.0\r\n                if @n == 1.0\r\n                    @m = x\r\n                else\r\n                    m_new = @m + (x - @m)/@n\r\n                    @s = @s + (x - @m)*(x - m_new)\r\n                    @m = m_new\r\n            value: ->\r\n                if mode == \"mean\"\r\n                    return if @n == 0 then 0/0 else @m\r\n                return 0 if @n <= ddof\r\n                switch mode\r\n                    when \"var\"   then @s/(@n-ddof)\r\n                    when \"stdev\" then Math.sqrt(@s/(@n-ddof))\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\r\n            sumNum: 0\r\n            sumDenom: 0\r\n            push: (record) ->\r\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\r\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\r\n            value: -> @sumNum/@sumDenom\r\n            format: formatter\r\n            numInputs: if num? and denom? then 0 else 2\r\n\r\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\r\n            sumNum: 0\r\n            sumDenom: 0\r\n            push: (record) ->\r\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\r\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\r\n            value: ->\r\n                sign = if upper then 1 else -1\r\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\r\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\r\n                    (1 + 1.642374415149816/@sumDenom)\r\n            format: formatter\r\n            numInputs: if num? and denom? then 0 else 2\r\n\r\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\r\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\r\n            inner: wrapped(x...)(data, rowKey, colKey)\r\n            push: (record) -> @inner.push record\r\n            format: formatter\r\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\r\n            numInputs: wrapped(x...)().numInputs\r\n\r\n    aggregatorTemplates.countUnique = (f) -> aggregatorTemplates.uniques(((x) -> x.length), f)\r\n    aggregatorTemplates.listUnique =  (s) -> aggregatorTemplates.uniques(((x) -> x.sort(naturalSort).join(s)), ((x)->x))\r\n    aggregatorTemplates.max =         (f) -> aggregatorTemplates.extremes('max', f)\r\n    aggregatorTemplates.min =         (f) -> aggregatorTemplates.extremes('min', f)\r\n    aggregatorTemplates.first =       (f) -> aggregatorTemplates.extremes('first', f)\r\n    aggregatorTemplates.last =        (f) -> aggregatorTemplates.extremes('last', f)\r\n    aggregatorTemplates.median =      (f) -> aggregatorTemplates.quantile(0.5, f)\r\n    aggregatorTemplates.average =     (f) -> aggregatorTemplates.runningStat(\"mean\", 1, f)\r\n    aggregatorTemplates.var =         (ddof, f) -> aggregatorTemplates.runningStat(\"var\", ddof, f)\r\n    aggregatorTemplates.stdev =       (ddof, f) -> aggregatorTemplates.runningStat(\"stdev\", ddof, f)\r\n\r\n    #default aggregators & renderers use US naming and number formatting\r\n    aggregators = do (tpl = aggregatorTemplates) ->\r\n        \"Count\":                tpl.count(usFmtInt)\r\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\r\n        \"List Unique Values\":   tpl.listUnique(\", \")\r\n        \"Sum\":                  tpl.sum(usFmt)\r\n        \"Integer Sum\":          tpl.sum(usFmtInt)\r\n        \"Average\":              tpl.average(usFmt)\r\n        \"Median\":               tpl.median(usFmt)\r\n        \"Sample Variance\":      tpl.var(1, usFmt)\r\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt)\r\n        \"Minimum\":              tpl.min(usFmt)\r\n        \"Maximum\":              tpl.max(usFmt)\r\n        \"First\":                tpl.first(usFmt)\r\n        \"Last\":                 tpl.last(usFmt)\r\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\r\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\r\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\r\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\r\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\r\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\r\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\r\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\r\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\r\n\r\n    renderers =\r\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\r\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\r\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\r\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\r\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\r\n\r\n    locales =\r\n        en:\r\n            aggregators: aggregators\r\n            renderers: renderers\r\n            localeStrings:\r\n                renderError: \"An error occurred rendering the PivotTable results.\"\r\n                computeError: \"An error occurred computing the PivotTable results.\"\r\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\r\n                selectAll: \"Select All\"\r\n                selectNone: \"Select None\"\r\n                tooMany: \"(too many to list)\"\r\n                filterResults: \"Filter values\"\r\n                apply: \"Apply\"\r\n                cancel: \"Cancel\"\r\n                totals: \"Totals\" #for table renderer\r\n                vs: \"vs\" #for gchart renderer\r\n                by: \"by\" #for gchart renderer\r\n\r\n    #dateFormat deriver l10n requires month and day names to be passed in directly\r\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\r\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\r\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\r\n\r\n    derivers =\r\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\r\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\r\n            utc = if utcOutput then \"UTC\" else \"\"\r\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\r\n                date = new Date(Date.parse(record[col]))\r\n                if isNaN(date) then return \"\"\r\n                formatString.replace /%(.)/g, (m, p) ->\r\n                    switch p\r\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\r\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\r\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\r\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\r\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\r\n                        when \"x\" then date[\"get#{utc}Day\"]()\r\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\r\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\r\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\r\n                        else \"%\" + p\r\n\r\n    rx = /(\\d+)|(\\D+)/g\r\n    rd = /\\d/\r\n    rz = /^0/\r\n    naturalSort = (as, bs) =>\r\n        #nulls first\r\n        return -1 if bs? and not as?\r\n        return  1 if as? and not bs?\r\n\r\n        #then raw NaNs\r\n        return -1 if typeof as == \"number\" and isNaN(as)\r\n        return  1 if typeof bs == \"number\" and isNaN(bs)\r\n\r\n        #numbers and numbery strings group together\r\n        nas = +as\r\n        nbs = +bs\r\n        return -1 if nas < nbs\r\n        return  1 if nas > nbs\r\n\r\n        #within that, true numbers before numbery strings\r\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\r\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\r\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\r\n\r\n        # 'Infinity' is a textual number, so less than 'A'\r\n        return -1 if isNaN(nbs) and not isNaN(nas)\r\n        return  1 if isNaN(nas) and not isNaN(nbs)\r\n\r\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\r\n        a = String(as)\r\n        b = String(bs)\r\n        return 0 if a == b\r\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\r\n\r\n        #special treatment for strings containing digits\r\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\r\n        b = b.match(rx)\r\n        while a.length and b.length\r\n            a1 = a.shift()\r\n            b1 = b.shift()\r\n            if a1 != b1\r\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\r\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\r\n                else\r\n                    return (if a1 > b1 then 1 else -1)\r\n        return a.length - b.length\r\n\r\n    sortAs = (order) ->\r\n        mapping = {}\r\n        l_mapping = {} # sort lowercased keys similarly\r\n        for i, x of order\r\n            mapping[x] = i\r\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\r\n        (a, b) ->\r\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\r\n            else if mapping[a]? then -1\r\n            else if mapping[b]? then 1\r\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\r\n            else if l_mapping[a]? then -1\r\n            else if l_mapping[b]? then 1\r\n            else naturalSort(a,b)\r\n\r\n    getSort = (sorters, attr) ->\r\n        if sorters?\r\n            if $.isFunction(sorters)\r\n                sort = sorters(attr)\r\n                return sort if $.isFunction(sort)\r\n            else if sorters[attr]?\r\n                return sorters[attr]\r\n        return naturalSort\r\n\r\n    ###\r\n    Data Model class\r\n    ###\r\n\r\n    class PivotData\r\n        constructor: (input, opts = {}) ->\r\n            @input = input\r\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\r\n            @aggregatorName = opts.aggregatorName ? \"Count\"\r\n            @colAttrs = opts.cols ? []\r\n            @rowAttrs = opts.rows ? []\r\n            @valAttrs = opts.vals ? []\r\n            @sorters = opts.sorters ? {}\r\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\r\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\r\n            @derivedAttributes = opts.derivedAttributes ? {}\r\n            @filter = opts.filter ? (-> true)\r\n            @tree = {}\r\n            @rowKeys = []\r\n            @colKeys = []\r\n            @rowTotals = {}\r\n            @colTotals = {}\r\n            @allTotal = @aggregator(this, [], [])\r\n            @sorted = false\r\n            @callbacks = opts.callbacks\r\n            @sortItems = opts.sortCols ? []\r\n            \r\n            # iterate through input, accumulating data for cells\r\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\r\n                @processRecord(record) if @filter(record)\r\n\r\n        #can handle arrays or jQuery selections of tables\r\n        @forEachRecord = (input, derivedAttributes, f) ->\r\n            if $.isEmptyObject derivedAttributes\r\n                addRecord = f\r\n            else\r\n                addRecord = (record) ->\r\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\r\n                    f(record)\r\n\r\n            #if it's a function, have it call us back\r\n            if $.isFunction(input)\r\n                input(addRecord)\r\n            else if $.isArray(input)\r\n                if $.isArray(input[0]) #array of arrays\r\n                    for own i, compactRecord of input when i > 0\r\n                        record = {}\r\n                        record[k] = compactRecord[j] for own j, k of input[0]\r\n                        addRecord(record)\r\n                else #array of objects\r\n                    addRecord(record) for record in input\r\n            else if input instanceof $\r\n                tblCols = []\r\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\r\n                $(\"tbody > tr\", input).each (i) ->\r\n                    record = {}\r\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\r\n                    addRecord(record)\r\n            else\r\n                throw new Error(\"unknown input format\")\r\n\r\n        forEachMatchingRecord: (criteria, callback) ->\r\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\r\n                return if not @filter(record)\r\n                for k, v of criteria\r\n                    return if v != (record[k] ? \"null\")\r\n                callback(record)\r\n\r\n        arrSort: (attrs) =>\r\n            sortersArr = (getSort(@sorters, a) for a in attrs)\r\n            (a,b) ->\r\n                for own i, sorter of sortersArr\r\n                    comparison = sorter(a[i], b[i])\r\n                    return comparison if comparison != 0\r\n                return 0\r\n\r\n        sortKeys: () =>\r\n            if not @sorted\r\n                @sorted = true\r\n                v = (r,c) => @getAggregator(r,c).value()\r\n                switch @rowOrder\r\n                    when \"value_a_to_z\"  then @rowKeys.sort (a,b) =>  naturalSort v(a,[]), v(b,[])\r\n                    when \"value_z_to_a\" then @rowKeys.sort (a,b) => -naturalSort v(a,[]), v(b,[])\r\n                    else             @rowKeys.sort @arrSort(@rowAttrs)\r\n                switch @colOrder\r\n                    when \"value_a_to_z\"  then @colKeys.sort (a,b) =>  naturalSort v([],a), v([],b)\r\n                    when \"value_z_to_a\" then @colKeys.sort (a,b) => -naturalSort v([],a), v([],b)\r\n                    else             @colKeys.sort @arrSort(@colAttrs)\r\n\r\n        getColKeys: () =>\r\n            @sortKeys()\r\n            return @colKeys\r\n\r\n        getRowKeys: () =>\r\n            @sortKeys()\r\n            return @rowKeys\r\n\r\n        processRecord: (record) -> #this code is called in a tight loop\r\n            colKey = []\r\n            rowKey = []\r\n            colKey.push record[x] ? \"null\" for x in @colAttrs\r\n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\r\n            flatRowKey = rowKey.join(String.fromCharCode(0))\r\n            flatColKey = colKey.join(String.fromCharCode(0))\r\n\r\n            @allTotal.push record\r\n\r\n            if rowKey.length != 0\r\n                if not @rowTotals[flatRowKey]\r\n                    @rowKeys.push rowKey\r\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\r\n                @rowTotals[flatRowKey].push record\r\n\r\n            if colKey.length != 0\r\n                if not @colTotals[flatColKey]\r\n                    @colKeys.push colKey\r\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\r\n                @colTotals[flatColKey].push record\r\n\r\n            if colKey.length != 0 and rowKey.length != 0\r\n                if not @tree[flatRowKey]\r\n                    @tree[flatRowKey] = {}\r\n                if not @tree[flatRowKey][flatColKey]\r\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\r\n                @tree[flatRowKey][flatColKey].push record\r\n\r\n        getAggregator: (rowKey, colKey) =>\r\n            flatRowKey = rowKey.join(String.fromCharCode(0))\r\n            flatColKey = colKey.join(String.fromCharCode(0))\r\n            if rowKey.length == 0 and colKey.length == 0\r\n                agg = @allTotal\r\n            else if rowKey.length == 0\r\n                agg = @colTotals[flatColKey]\r\n            else if colKey.length == 0\r\n                agg = @rowTotals[flatRowKey]\r\n            else\r\n                agg = @tree[flatRowKey][flatColKey]\r\n            return agg ? {value: (-> null), format: -> \"\"}\r\n\r\n    #expose these to the outside world\r\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\r\n        naturalSort, numberFormat, sortAs, PivotData}\r\n\r\n    ###\r\n    Default Renderer for hierarchical table layout\r\n    ###\r\n\r\n    pivotTableRenderer = (pivotData, opts) ->\r\n\r\n        defaults =\r\n            table:\r\n                clickCallback: null\r\n                rowTotals: true\r\n                colTotals: true\r\n            localeStrings: totals: \"Totals\"\r\n\r\n        opts = $.extend(true, {}, defaults, opts)\r\n\r\n        colAttrs = pivotData.colAttrs\r\n        rowAttrs = pivotData.rowAttrs\r\n        rowKeys = pivotData.getRowKeys()\r\n        colKeys = pivotData.getColKeys()\r\n\r\n        if opts.table.clickCallback\r\n            getClickHandler = (value, rowValues, colValues) ->\r\n                filters = {}\r\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\r\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\r\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\r\n\r\n        #now actually build the output\r\n        result = document.createElement(\"table\")\r\n        result.className = \"pvtTable table\"\r\n\r\n        #helper function for setting row/col-span in pivotTableRenderer\r\n        spanSize = (arr, i, j) ->\r\n            if i != 0\r\n                noDraw = true\r\n                for x in [0..j]\r\n                    if arr[i-1][x] != arr[i][x]\r\n                        noDraw = false\r\n                if noDraw\r\n                  return -1 #do not draw cell\r\n            len = 0\r\n            while i+len < arr.length\r\n                stop = false\r\n                for x in [0..j]\r\n                    stop = true if arr[i][x] != arr[i+len][x]\r\n                break if stop\r\n                len++\r\n            return len\r\n\r\n        #the first few rows are for col headers\r\n        thead = document.createElement(\"thead\")\r\n        for own j, c of colAttrs\r\n            tr = document.createElement(\"tr\")\r\n            if parseInt(j) == 0 and rowAttrs.length != 0\r\n                th = document.createElement(\"th\")\r\n                th.setAttribute(\"colspan\", rowAttrs.length)\r\n                th.setAttribute(\"rowspan\", colAttrs.length)\r\n                tr.appendChild th\r\n            th = document.createElement(\"th\")\r\n            th.className = \"pvtAxisLabel\"\r\n            th.textContent = c\r\n            tr.appendChild th\r\n            for own i, colKey of colKeys\r\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\r\n                if x != -1\r\n                    th = document.createElement(\"th\")\r\n                    th.className = \"pvtColLabel\"\r\n                    th.textContent = colKey[j]\r\n                    th.setAttribute(\"colspan\", x)\r\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\r\n                        th.setAttribute(\"rowspan\", 2)\r\n                    tr.appendChild th\r\n            if parseInt(j) == 0 && opts.table.rowTotals\r\n                th = document.createElement(\"th\")\r\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\r\n                th.innerHTML = opts.localeStrings.totals\r\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\r\n                tr.appendChild th\r\n            thead.appendChild tr\r\n\r\n        #then a row for row header headers\r\n        if rowAttrs.length !=0\r\n            tr = document.createElement(\"tr\")\r\n            for own i, r of rowAttrs\r\n                th = document.createElement(\"th\")\r\n                th.className = \"pvtAxisLabel\"\r\n                th.textContent = r\r\n                tr.appendChild th\r\n            th = document.createElement(\"th\")\r\n            if colAttrs.length ==0\r\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\r\n                th.innerHTML = opts.localeStrings.totals\r\n            tr.appendChild th\r\n            thead.appendChild tr\r\n        result.appendChild thead\r\n\r\n        #now the actual data rows, with their row headers and totals\r\n        tbody = document.createElement(\"tbody\")\r\n        for own i, rowKey of rowKeys\r\n            tr = document.createElement(\"tr\")\r\n            for own j, txt of rowKey\r\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\r\n                if x != -1\r\n                    th = document.createElement(\"th\")\r\n                    th.className = \"pvtRowLabel\"\r\n                    th.textContent = txt\r\n                    th.setAttribute(\"rowspan\", x)\r\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\r\n                        th.setAttribute(\"colspan\",2)\r\n                    tr.appendChild th\r\n            for own j, colKey of colKeys #this is the tight loop\r\n                aggregator = pivotData.getAggregator(rowKey, colKey)\r\n                val = aggregator.value()\r\n                td = document.createElement(\"td\")\r\n                td.className = \"pvtVal row#{i} col#{j}\"\r\n                td.textContent = aggregator.format(val)\r\n                td.setAttribute(\"data-value\", val)\r\n                if getClickHandler?\r\n                    td.onclick = getClickHandler(val, rowKey, colKey)\r\n                tr.appendChild td\r\n\r\n            if opts.table.rowTotals || colAttrs.length == 0\r\n                totalAggregator = pivotData.getAggregator(rowKey, [])\r\n                val = totalAggregator.value()\r\n                td = document.createElement(\"td\")\r\n                td.className = \"pvtTotal rowTotal\"\r\n                td.textContent = totalAggregator.format(val)\r\n                td.setAttribute(\"data-value\", val)\r\n                if getClickHandler?\r\n                    td.onclick = getClickHandler(val, rowKey, [])\r\n                td.setAttribute(\"data-for\", \"row\"+i)\r\n                tr.appendChild td\r\n            tbody.appendChild tr\r\n\r\n        #finally, the row for col totals, and a grand total\r\n        if opts.table.colTotals || rowAttrs.length == 0\r\n            tr = document.createElement(\"tr\")\r\n            if opts.table.colTotals || rowAttrs.length == 0\r\n                th = document.createElement(\"th\")\r\n                th.className = \"pvtTotalLabel pvtColTotalLabel\"\r\n                th.innerHTML = opts.localeStrings.totals\r\n                th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\r\n                tr.appendChild th\r\n            for own j, colKey of colKeys\r\n                totalAggregator = pivotData.getAggregator([], colKey)\r\n                val = totalAggregator.value()\r\n                td = document.createElement(\"td\")\r\n                td.className = \"pvtTotal colTotal\"\r\n                td.textContent = totalAggregator.format(val)\r\n                td.setAttribute(\"data-value\", val)\r\n                if getClickHandler?\r\n                    td.onclick = getClickHandler(val, [], colKey)\r\n                td.setAttribute(\"data-for\", \"col\"+j)\r\n                tr.appendChild td\r\n            if opts.table.rowTotals || colAttrs.length == 0\r\n                totalAggregator = pivotData.getAggregator([], [])\r\n                val = totalAggregator.value()\r\n                td = document.createElement(\"td\")\r\n                td.className = \"pvtGrandTotal\"\r\n                td.textContent = totalAggregator.format(val)\r\n                td.setAttribute(\"data-value\", val)\r\n                if getClickHandler?\r\n                    td.onclick = getClickHandler(val, [], [])\r\n                tr.appendChild td\r\n            tbody.appendChild tr\r\n        result.appendChild tbody\r\n\r\n        #squirrel this away for later\r\n        result.setAttribute(\"data-numrows\", rowKeys.length)\r\n        result.setAttribute(\"data-numcols\", colKeys.length)\r\n\r\n        return result\r\n\r\n    ###\r\n    Pivot Table core: create PivotData object and call Renderer on it\r\n    ###\r\n\r\n    $.fn.pivot = (input, inputOpts, locale=\"en\", clusterize) ->\r\n        locale = \"en\" if not locales[locale]?\r\n        defaults =\r\n            cols : [], rows: [], vals: []\r\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\r\n            dataClass: PivotData\r\n            filter: -> true\r\n            aggregator: aggregatorTemplates.count()()\r\n            aggregatorName: \"Count\"\r\n            sorters: {}\r\n            derivedAttributes: {}\r\n            renderer: pivotTableRenderer\r\n\r\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\r\n        localeDefaults =\r\n            rendererOptions: {\r\n                localeStrings\r\n                locale\r\n            }\r\n            localeStrings: localeStrings\r\n\r\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\r\n\r\n        result = null\r\n        try\r\n            pivotData = new opts.dataClass(input, opts)\r\n            try\r\n                result = opts.renderer(pivotData, opts.rendererOptions, clusterize)\r\n            catch e\r\n                console.error(e.stack) if console?\r\n                result = $(\"<span>\").html opts.localeStrings.renderError\r\n        catch e\r\n            console.error(e.stack) if console?\r\n            result = $(\"<span>\").html opts.localeStrings.computeError\r\n\r\n        x = this[0]\r\n        x.removeChild(x.lastChild) while x.hasChildNodes()\r\n        return @append result\r\n\r\n\r\n    ###\r\n    Pivot Table UI: calls Pivot Table core above with options set by user\r\n    ###\r\n\r\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\", clusterize) ->\r\n        locale = \"en\" if not locales[locale]?\r\n        defaults =\r\n            derivedAttributes: {}\r\n            aggregators: locales[locale].aggregators\r\n            renderers: locales[locale].renderers\r\n            hiddenAttributes: []\r\n            hiddenFromAggregators: []\r\n            hiddenFromDragDrop: []\r\n            menuLimit: 500\r\n            cols: [], rows: [], vals: []\r\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\r\n            dataClass: PivotData\r\n            exclusions: {}\r\n            inclusions: {}\r\n            unusedAttrsVertical: 85\r\n            autoSortUnusedAttrs: false\r\n            onRefresh: null\r\n            afterRefresh: null\r\n            showUI: true\r\n            filter: -> true\r\n            sorters: {}\r\n            valueHeight: null\r\n            attach : null\r\n            getDisplayColor: null\r\n\r\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings, columnAttr: inputOpts.columnAttributeName)\r\n        localeDefaults =\r\n            rendererOptions: {\r\n                localeStrings\r\n                locale\r\n            }\r\n            localeStrings: localeStrings\r\n            \r\n        plotlyDefaults = \r\n            rendererOptions:\r\n                plotlyConfig:\r\n                    toImageButtonOptions: inputOpts.toImageButtonOptions\r\n\r\n        existingOpts = @data \"pivotUIOptions\"\r\n        if not existingOpts? or overwrite\r\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, plotlyDefaults, inputOpts))\r\n        else\r\n            opts = existingOpts\r\n\r\n        try\r\n            # do a first pass on the data to cache a materialized copy of any\r\n            # function-valued inputs and to compute dimension cardinalities\r\n            attrValues = {}\r\n            materializedInput = []\r\n            recordsProcessed = 0\r\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\r\n                return unless opts.filter(record)\r\n                materializedInput.push(record)\r\n                for own attr of record\r\n                    if not attrValues[attr]?\r\n                        attrValues[attr] = {}\r\n                        if recordsProcessed > 0\r\n                            attrValues[attr][\"null\"] = recordsProcessed\r\n                for attr of attrValues\r\n                    value = record[attr] ? \"null\"\r\n                    attrValues[attr][value] ?= 0\r\n                    attrValues[attr][value]++\r\n                recordsProcessed++\r\n\r\n            #start building the output\r\n            pvtUiContainer = $(\"<div>\", \"class\": \"pvtUiContainer\")\r\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5).appendTo(pvtUiContainer)\r\n\r\n            #renderer control\r\n            rendererControl = $(\"<td>\").addClass(\"pvtUiCell\")\r\n            rendererControlDiv = $(\"<div>\").appendTo(rendererControl)\r\n            \r\n            renderer = $(\"<select>\")\r\n                .addClass('pvtRenderer form-select form-select-sm')\r\n                .appendTo(rendererControlDiv)\r\n                .bind \"change\", -> refresh() #capture reference\r\n            for own x of opts.renderers\r\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\r\n\r\n\r\n            #axis list, including the double-click menu\r\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused pvtUiCell')\r\n            # wrapper to be able to use 'position: absolute' in pvtUnusedCellDiv. Added to fix scrolling issue in Firefox, to limit container size\r\n            unusedDivWrapper = $(\"<div>\").addClass('pvtUnusedCellDivWrapper').appendTo(unused)\r\n            unusedDiv = $(\"<div>\").addClass('pvtUiCellVDiv pvtUnusedCellDiv').appendTo(unusedDivWrapper)\r\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\r\n            shownInAggregators = (c for c in shownAttributes when c not in opts.hiddenFromAggregators)\r\n            shownInDragDrop = (c for c in shownAttributes when c not in opts.hiddenFromDragDrop)\r\n\r\n\r\n            unusedAttrsVerticalAutoOverride = false\r\n            if opts.unusedAttrsVertical == \"auto\"\r\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\r\n            else\r\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\r\n\r\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\r\n                attrLength = 0\r\n                attrLength += a.length for a in shownInDragDrop\r\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\r\n\r\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\r\n                unused.addClass('pvtVertList')\r\n            else\r\n                unused.addClass('pvtHorizList')\r\n\r\n            for own i, attr of shownInDragDrop\r\n                do (attr) ->\r\n                    values = (v for v of attrValues[attr])\r\n                    hasExcludedItem = false\r\n                    valueList = $(\"<div>\").draggable().addClass('pvtFilterBox').hide()\r\n\r\n                    valueList.append $(\"<h4>\").append(\r\n                        $(\"<pvtAttr>\").text(attr),\r\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\r\n                        )\r\n                    if values.length > opts.menuLimit\r\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\r\n                    else\r\n                        if values.length > 5\r\n                            controls = $(\"<p>\").appendTo(valueList)\r\n                            sorter = getSort(opts.sorters, attr)\r\n                            placeholder = opts.localeStrings.filterResults\r\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\r\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\r\n                                .bind \"keyup\", ->\r\n                                    filter = $(this).val().toLowerCase().trim()\r\n                                    accept_gen = (prefix, accepted) -> (v) ->\r\n                                        real_filter = filter.substring(prefix.length).trim()\r\n                                        return true if real_filter.length == 0\r\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\r\n                                    accept =\r\n                                        if      filter.indexOf(\">=\") == 0 then accept_gen(\">=\", [1,0])\r\n                                        else if filter.indexOf(\"<=\") == 0 then accept_gen(\"<=\", [-1,0])\r\n                                        else if filter.indexOf(\">\") == 0  then accept_gen(\">\",  [1])\r\n                                        else if filter.indexOf(\"<\") == 0  then accept_gen(\"<\",  [-1])\r\n                                        else if filter.indexOf(\"~\") == 0  then (v) ->\r\n                                                return true if filter.substring(1).trim().length == 0\r\n                                                v.toLowerCase().match(filter.substring(1))\r\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\r\n\r\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\r\n                                        if accept($(this).text())\r\n                                            $(this).parent().parent().show()\r\n                                        else\r\n                                            $(this).parent().parent().hide()\r\n                            controls.append $(\"<br>\")\r\n                            $(\"<button>\", {type:\"button\"})\r\n                                .addClass('btn btn-sm btn-primary')\r\n                                .appendTo(controls)\r\n                                .html(opts.localeStrings.selectAll)\r\n                                .bind \"click\", ->\r\n                                    valueList.find(\"input:visible:not(:checked)\")\r\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\r\n                                    return false\r\n                            $(\"<button>\", {type:\"button\"})\r\n                                .addClass('btn btn-sm btn-primary')\r\n                                .appendTo(controls)\r\n                                .html(opts.localeStrings.selectNone)\r\n                                .bind \"click\", ->\r\n                                    valueList.find(\"input:visible:checked\")\r\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\r\n                                    return false\r\n\r\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\r\n\r\n                        for value in values.sort(getSort(opts.sorters, attr))\r\n                             valueCount = attrValues[attr][value]\r\n                             filterItem = $(\"<label>\")\r\n                             filterItemExcluded = false\r\n                             if opts.inclusions[attr]\r\n                                filterItemExcluded = (value not in opts.inclusions[attr])\r\n                             else if opts.exclusions[attr]\r\n                                filterItemExcluded = (value in opts.exclusions[attr])\r\n                             hasExcludedItem ||= filterItemExcluded\r\n                             $(\"<input>\")\r\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter form-check-input')\r\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\r\n                                .appendTo(filterItem)\r\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\r\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\r\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\r\n                             checkContainer.append $(\"<p>\").append(filterItem)\r\n\r\n                    closeFilterBox = ->\r\n                        if valueList.find(\"[type='checkbox']\").length >\r\n                               valueList.find(\"[type='checkbox']:checked\").length\r\n                            attrElem.addClass \"pvtFilteredAttribute\"\r\n                        else\r\n                            attrElem.removeClass \"pvtFilteredAttribute\"\r\n\r\n                        valueList.find('.pvtSearch').val('')\r\n                        valueList.find('.pvtCheckContainer p').show()\r\n                        valueList.hide()\r\n\r\n                    finalButtons = $(\"<p>\").appendTo(valueList)\r\n\r\n                    if values.length <= opts.menuLimit\r\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\r\n                            .addClass('btn btn-sm btn-primary')\r\n                            .appendTo(finalButtons)\r\n                            .bind \"click\", ->\r\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\r\n                                    refresh()\r\n                                closeFilterBox()\r\n\r\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\r\n                        .addClass('btn btn-sm btn-primary')\r\n                        .appendTo(finalButtons)\r\n                        .bind \"click\", ->\r\n                            valueList.find(\".changed:checked\")\r\n                                .removeClass(\"changed\").prop(\"checked\", false)\r\n                            valueList.find(\".changed:not(:checked)\")\r\n                                .removeClass(\"changed\").prop(\"checked\", true)\r\n                            closeFilterBox()\r\n\r\n                    listItem = $(\"<li>\").addClass(\"axis_#{i} pvtAttr-container\")\r\n                    listItem.css(lineHeight: opts.valueHeight + \"px\")\r\n\r\n                    arrow = $(\"<div>\").addClass('selectArrow').appendTo(listItem)\r\n                    arrow.bind \"click\", (e) ->\r\n                        {left, top} = $(e.currentTarget.parentElement).position()\r\n                        listHeight = Math.min(valueList.outerHeight(), uiTable.height())\r\n                        top = Math.min(uiTable.height() - listHeight, top + 10)\r\n                        left = Math.min(uiTable.width() - valueList.outerWidth(), left + 10)\r\n                        valueList.css(left: left, top: top, maxHeight: \"#{listHeight - 1}px\").show()\r\n\r\n                    attrElem = $(\"<select>\").addClass('pvtAttr form-select form-select-sm').data(\"attrName\", attr).appendTo(listItem)\r\n                    $(\"<option>\").text(attr).appendTo(attrElem);\r\n\r\n                    attrElem.bind \"dblclick\", (e) ->\r\n                        if unusedDiv.has(attrElem).length > 0\r\n                            pvtContainer = $(uiTable).find('.pvtAxisContainer.pvtHorizList')\r\n                            listItem.appendTo(pvtContainer[pvtContainer.length - 1])\r\n                        else\r\n                            listItem.prependTo(unusedDiv)\r\n\r\n                        refresh()\r\n                        return\r\n\r\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\r\n                    unusedDiv.append(listItem)\r\n                    pvtUiContainer.append(valueList)\r\n\r\n            tr1 = $(\"<tr>\").addClass('uiTableRow').appendTo(uiTable)\r\n\r\n            #aggregator menu and value area\r\n\r\n            aggregator = $(\"<select>\").addClass('pvtAggregator form-select form-select-sm')\r\n                .bind \"change\", -> refresh() #capture reference\r\n            for own x of opts.aggregators\r\n                aggregator.append $(\"<option>\").val(x).html(x)\r\n\r\n            ordering =\r\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\r\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\r\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\r\n\r\n            colOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtColOrder\")\r\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\r\n                .bind \"click\", ->\r\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\r\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\r\n                    refresh()\r\n\r\n            aggrSelector = $(\"<td>\").addClass('pvtVals pvtUiCell').appendTo(tr1)\r\n            $(\"<div>\").appendTo(aggrSelector)\r\n              .append(aggregator)\r\n              .append(colOrderArrow)\r\n              .append($(\"<br>\"))\r\n\r\n            #column axes\r\n            pvtColumns = $(\"<td>\").addClass('pvtHorizList pvtCols pvtUiCell')\r\n            pvtColumnsDiv = $(\"<div>\").addClass('pvtUiCellHDiv').appendTo(pvtColumns)\r\n            tr1.append pvtColumns\r\n\r\n            pvtColumnsTable = $(\"<table>\").addClass('pvtColumnsTable')\r\n            pvtColumnsDiv.append pvtColumnsTable\r\n\r\n            pvtColumnsRow = $(\"<tr>\")\r\n            pvtColumnsTable.append pvtColumnsRow\r\n\r\n            tr2 = $(\"<tr>\").appendTo(uiTable).attr(\"style\", \"height:100%\")\r\n\r\n            #row axes\r\n            pvtRows = $(\"<td>\").addClass('pvtRows pvtUiCell').attr(\"valign\", \"top\")\r\n            pvtRowsDiv = $(\"<div>\").addClass('pvtUiCellVDiv').appendTo(pvtRows)\r\n            tr2.append pvtRows\r\n\r\n            pvtRowsTable = $(\"<table>\").addClass('pvtRowsTable')\r\n            pvtRowsDiv.append pvtRowsTable\r\n\r\n            #the actual pivot table container\r\n            pivotTable = $(\"<td>\")\r\n                .attr(\"valign\", \"top\")\r\n                .addClass('pvtRendererArea')\r\n                .appendTo(tr2)\r\n\r\n            pivotRendererHeader = $(\"<div>\")\r\n                .addClass('pvtRendererHeader')\r\n                .appendTo(pivotTable)\r\n\r\n            pivotRendererBody  = $(\"<div>\")\r\n                .addClass('pvtRendererBody')\r\n                .appendTo(pivotTable)\r\n\r\n            pivotRendererFooter = $(\"<div>\")\r\n            .addClass('pvtRendererFooter')\r\n            .appendTo(pivotTable)\r\n\r\n            pivotScrollDiv = $(\"<div>\")\r\n                .addClass('pvtRendererScrollDiv')\r\n                .appendTo(pivotRendererBody)\r\n            \r\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\r\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\r\n                uiTable.find('.uiTableRow:nth-child(1)').prepend rendererControl\r\n                uiTable.find('tr:nth-child(2)').prepend unused\r\n            else\r\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\r\n\r\n            #render the UI in its default state\r\n            @html pvtUiContainer\r\n\r\n            #set up the UI initial state as requested by moving elements around\r\n\r\n            createPaxis = (columns) ->\r\n                if columns\r\n                    paxis = $(\"<td>\").addClass(\"paxis pvtAxisContainer\").addClass('pvtVertList')\r\n                else\r\n                    paxis = $(\"<tr>\").append $(\"<td>\").addClass(\"paxis pvtAxisContainer\").addClass('pvtHorizList')\r\n                return paxis\r\n\r\n            fillPaxis = (columns) =>\r\n                paxisCount = 0\r\n                currentPaxis = undefined\r\n\r\n                initData = if columns then opts.cols else opts.rows\r\n                splitData = if columns then opts.splitCols else opts.splitRows\r\n                itemsContainer = if columns then pvtColumnsRow else pvtRowsTable\r\n\r\n                for i in [0...initData.length]\r\n\r\n                    if !splitData || i > splitData[paxisCount]\r\n                        paxisCount++\r\n                        currentPaxis = undefined\r\n\r\n                    if currentPaxis == undefined\r\n                        createPaxis(columns).appendTo(itemsContainer) #empty\r\n                        currentPaxis = createPaxis(columns)\r\n                        currentPaxis.appendTo(itemsContainer)\r\n\r\n                    #for rows currentPaxis is <tr>\r\n                    (if columns then currentPaxis else currentPaxis.find(\"td\")).append @find(\".axis_#{$.inArray((initData[i]), shownInDragDrop)}\")\r\n\r\n            fillPaxis(true)\r\n            fillPaxis(false)\r\n\r\n            if opts.aggregatorName?\r\n                @find(\".pvtAggregator\").val opts.aggregatorName\r\n            if opts.rendererName?\r\n                @find(\".pvtRenderer\").val opts.rendererName\r\n\r\n            if not opts.showUI \r\n                @find(\".pvtUiCell\").hide()\r\n                @find(\".pvtUi\").addClass(\"pvtUi-noSettings\")\r\n\r\n            initialRender = true\r\n\r\n            refreshPaxis = (columns) =>\r\n                itemsContainer = if columns then pvtColumnsRow else pvtRowsTable\r\n                newSplitPaxis = []\r\n                axisCount = -1\r\n                paxisCount = 0\r\n                prevEmpty = false\r\n                children = itemsContainer.find(\"td\")\r\n                for i in [0...children.length]\r\n                    child = children[i]\r\n                    if child.classList.contains(\"paxis\")\r\n                        child.classList.remove(\"stretch\")\r\n                        childContainer = if columns then child else child.parentElement #td for columns, tr for rows\r\n                        if child.children.length == 0\r\n                            childContainer.remove() if prevEmpty\r\n                            prevEmpty = true\r\n                        else\r\n                            createPaxis(columns).insertBefore(childContainer) if !prevEmpty\r\n\r\n                            prevEmpty = false\r\n                            axisCount += child.children.length\r\n                            newSplitPaxis[paxisCount++] = axisCount\r\n                    else\r\n                        paxis = createPaxis(columns)\r\n                        paxis.find(\"td\").append child\r\n                        itemsContainer.append paxis\r\n                        newSplitPaxis[paxisCount++] = ++axisCount\r\n\r\n                itemsContainer.append createPaxis(columns) if !prevEmpty\r\n\r\n                itemsContainer.find(\".paxis\").last().addClass(\"stretch\")\r\n\r\n                if columns\r\n                    opts.splitCols = newSplitPaxis\r\n                else\r\n                    opts.splitRows = newSplitPaxis\r\n            \r\n            #set up for refreshing\r\n            refreshDelayed = =>\r\n                refreshPaxis(true)\r\n                refreshPaxis(false)\r\n                \r\n                @find(\".pvtAxisContainer\").sortable\r\n                    update: (e, ui) -> refresh() if not ui.sender?\r\n                    connectWith: @find(\".pvtAxisContainer\")\r\n                    items: 'li'\r\n                    placeholder: 'pvtPlaceholder'\r\n                    tolerance: \"pointer\"\r\n                    forcePlaceholderSize: true\r\n                    cancel: \".pvtTriangle\" # in Firefox click event is triggered and pvtFilterBox is shown after drop\r\n\r\n                    # 1. In order to fix scrolling issue due to unused-table-cell unlimited size in Firefox \r\n                    # we wrapped its content into div with 'position: relative'. \r\n                    # This broke basic sortable item behaviour while dragging - z-index stopped working\r\n                    # and dragged item was overlapped by other elements.\r\n                    # To fix this 'appendTo' was used - to append dragged item to upper component and make it visible while dragging. \r\n                    appendTo: @find(\".pvtUiContainer\")\r\n                    # 2. 'appendTo' doesn't work with the default 'helper: \"original\"'. 'clone' should be used instead.\r\n                    helper: \"clone\"\r\n                    # 3. 'helper: \"clone\"' sets 'display: none' to the source item before drag and restores the original \r\n                    # display property value to the item after drop. The problem is that we use different display values ('flex' or 'inline-flex')\r\n                    # depending on the container; and 'clone' sets display as inline style which overrides our CSS settings. \r\n                    # ('!important' cannot be used too, because it overrides 'display: none' on drag start) \r\n                    # So we clear the inline display style on drop to make our CSS properties be used instead.\r\n                    stop: (event, ui) ->\r\n                        ui.item[0].style.display = null;\r\n\r\n                subopts =\r\n                    derivedAttributes: opts.derivedAttributes\r\n                    localeStrings: opts.localeStrings\r\n                    rendererOptions: opts.rendererOptions\r\n                    sorters: opts.sorters\r\n                    cols: [], rows: []\r\n                    dataClass: opts.dataClass\r\n                    callbacks: opts.callbacks\r\n                    \r\n                subopts.rendererOptions.rowSubtotalDisplay = \r\n                    splitPositions: opts.splitRows\r\n                subopts.rendererOptions.colSubtotalDisplay = \r\n                    splitPositions: opts.splitCols\r\n                subopts.rendererOptions.getDisplayColor = opts.getDisplayColor\r\n\r\n                subopts.rendererOptions.hideColAxisHeadersColumn = opts.splitCols.length == 1\r\n\r\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\r\n                vals = []\r\n                @find(\".pvtRows li select.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\r\n                @find(\".pvtCols li select.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\r\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\r\n                    if numInputsToProcess == 0\r\n                        $(this).remove()\r\n                    else\r\n                        numInputsToProcess--\r\n                        vals.push $(this).val() if $(this).val() != \"\"\r\n\r\n                if numInputsToProcess != 0\r\n                    pvtVals = @find(\".pvtVals\")\r\n                    for x in [0...numInputsToProcess]\r\n                        newDropdown = $(\"<select>\")\r\n                            .addClass('pvtAttrDropdown')\r\n                            .append($(\"<option>\"))\r\n                            .bind \"change\", -> refresh()\r\n                        for attr in shownInAggregators\r\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\r\n                        pvtVals.append(newDropdown)\r\n\r\n                if initialRender\r\n                    vals = opts.vals\r\n                    i = 0\r\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\r\n                        $(this).val vals[i]\r\n                        i++\r\n                    initialRender = false\r\n\r\n                columnAttr = subopts.rendererOptions.localeStrings.columnAttr\r\n                colIndex = subopts.cols.indexOf(columnAttr)\r\n                rowIndex = subopts.rows.indexOf(columnAttr)\r\n\r\n                subopts.rendererOptions.hideRowsTotalsCol = colIndex >= 0 and opts.splitCols[0] >= colIndex\r\n                subopts.rendererOptions.hideColsTotalsRow = rowIndex >= 0 and opts.splitRows[0] >= rowIndex\r\n\r\n                subopts.aggregatorName = aggregator.val()\r\n                subopts.vals = vals\r\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\r\n                subopts.renderer = opts.renderers[renderer.val()]\r\n                subopts.rowOrder = \"key_a_to_z\"\r\n                subopts.colOrder = colOrderArrow.data(\"order\")\r\n                #construct filter here\r\n                exclusions = {}\r\n                @find('input.pvtFilter').not(':checked').each ->\r\n                    filter = $(this).data(\"filter\")\r\n                    if exclusions[filter[0]]?\r\n                        exclusions[filter[0]].push( filter[1] )\r\n                    else\r\n                        exclusions[filter[0]] = [ filter[1] ]\r\n                #include inclusions when exclusions present\r\n                inclusions = {}\r\n                @find('input.pvtFilter:checked').each ->\r\n                    filter = $(this).data(\"filter\")\r\n                    if exclusions[filter[0]]?\r\n                        if inclusions[filter[0]]?\r\n                            inclusions[filter[0]].push( filter[1] )\r\n                        else\r\n                            inclusions[filter[0]] = [ filter[1] ]\r\n\r\n                subopts.filter = (record) ->\r\n                    return false if not opts.filter(record)\r\n                    for k,excludedItems of exclusions\r\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\r\n                    return true\r\n\r\n                pivotUIOptions = $.extend {}, opts,\r\n                    cols: subopts.cols\r\n                    rows: subopts.rows\r\n                    colOrder: subopts.colOrder\r\n                    rowOrder: subopts.rowOrder\r\n                    vals: vals\r\n                    exclusions: exclusions\r\n                    inclusions: inclusions\r\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\r\n                    aggregatorName: aggregator.val()\r\n                    rendererName: renderer.val()\r\n                    \r\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\r\n                \r\n                opts.sortCols = pivotUIOptions.sortCols\r\n                subopts.sortCols = opts.sortCols\r\n\r\n                #plotly needs explicit sizes, and we have to do it during refresh, since draw element may not added to the dom yet\r\n                drawSize = opts.attach()\r\n                subopts.rendererOptions.plotly = $.extend {}, subopts.rendererOptions.plotly, drawSize\r\n\r\n                pivotScrollDiv.pivot(materializedInput,subopts,locale, clusterize)\r\n\r\n                opts.afterRefresh() if opts.afterRefresh?\r\n                \r\n                @data \"pivotUIOptions\", pivotUIOptions\r\n\r\n                # if requested make sure unused columns are in alphabetical order\r\n                if opts.autoSortUnusedAttrs \r\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\r\n                    $(unusedAttrsContainer).children(\"li\")\r\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\r\n                        .appendTo unusedAttrsContainer\r\n\r\n            # we'll assume that GPivot will itself manage pivotTable state relevance\r\n#                pivotTable.css(\"opacity\", \"\") # may affect z-index\r\n\r\n            refresh = =>\r\n                # we'll assume that GPivot will itself manage pivotTable state relevance\r\n#                pivotTable.css(\"opacity\", 0.5)\r\n                setTimeout refreshDelayed, 10\r\n\r\n            #the very first refresh will actually display the table\r\n            refresh()\r\n\r\n            @find(\".pvtAxisContainer\").sortable\r\n                update: (e, ui) -> refresh() if not ui.sender?\r\n                connectWith: @find(\".pvtAxisContainer\")\r\n                items: 'li'\r\n                placeholder: 'pvtPlaceholder'\r\n                tolerance: \"pointer\"\r\n                forcePlaceholderSize: true\r\n                cancel: \".pvtTriangle\" # in Firefox click event is triggered and pvtFilterBox is shown after drop\r\n\r\n                # For the next 4 lines see comments for the similar lines in refreshDelayed \r\n                appendTo: @find(\".pvtUiContainer\")\r\n                helper: \"clone\"\r\n                stop: (event, ui) ->\r\n                    ui.item[0].style.display = null;\r\n        catch e\r\n            console.error(e.stack) if console?\r\n            @html opts.localeStrings.uiRenderError\r\n        return this\r\n\r\n    ###\r\n    Heatmap post-processing\r\n    ###\r\n\r\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\r\n        numRows = @data \"numrows\"\r\n        numCols = @data \"numcols\"\r\n\r\n        # given a series of values\r\n        # must return a function to map a given value to a CSS color\r\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\r\n        colorScaleGenerator ?= (values) ->\r\n            min = Math.min(values...)\r\n            max = Math.max(values...)\r\n            return (x) ->\r\n                nonRed = if max == min then 0 else 255 - Math.round 255*(x-min)/(max-min)\r\n                return Array.from([255, nonRed, nonRed])\r\n\r\n        heatmapper = (scope) =>\r\n            forEachCell = (f) =>\r\n                @find(scope).each ->\r\n                    x = $(this).data(\"value\")\r\n                    if !x\r\n                        x = 0\r\n                    f(x, $(this)) if x? and isFinite(x)\r\n\r\n            values = []\r\n            forEachCell (x) -> values.push x\r\n            colorScale = colorScaleGenerator(values)\r\n            forEachCell (x, elem) -> \r\n                heatColor = colorScale(x) \r\n                elem.css \"background-color\", opts.getDisplayColor(heatColor)\r\n                elem[0].setAttribute(\"data-heat-color\", \"#{heatColor[0]},#{heatColor[1]},#{heatColor[2]}\")\r\n\r\n        switch scope\r\n            when \"heatmap\"    then heatmapper \".pvtVal\"\r\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\r\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\r\n\r\n        heatmapper \".pvtTotal.rowTotal\"\r\n        heatmapper \".pvtTotal.colTotal\"\r\n\r\n        return this\r\n\r\n    ###\r\n    Barchart post-processing\r\n    ###\r\n\r\n    $.fn.barchart = (opts) ->\r\n        numRows = @data \"numrows\"\r\n        numCols = @data \"numcols\"\r\n\r\n        barcharter = (scope) =>\r\n            forEachCell = (f) =>\r\n                @find(scope).each ->\r\n                    x = $(this).data(\"value\")\r\n                    f(x, $(this)) if x? and isFinite(x)\r\n\r\n            values = []\r\n            forEachCell (x) -> values.push x\r\n            max = Math.max(values...)\r\n            if max < 0\r\n                max = 0\r\n            range = max;\r\n            min = Math.min(values...)\r\n            if min < 0\r\n                range = max - min\r\n            scaler = (x) -> 100*x/(1.4*range)\r\n            forEachCell (x, elem) ->\r\n                text = elem.text()\r\n                wrapper = $(\"<div>\").css\r\n                    \"position\": \"relative\"\r\n                    \"height\": \"55px\"\r\n                bgColor = \"gray\"\r\n                bBase = 0\r\n                if min < 0\r\n                    bBase = scaler(-min)\r\n                if x < 0\r\n                    bBase += scaler(x)\r\n                    bgColor = \"darkred\"\r\n                    x = -x\r\n                wrapper.append $(\"<div>\").css\r\n                    \"position\": \"absolute\"\r\n                    \"bottom\": bBase + \"%\"\r\n                    \"left\": 0\r\n                    \"right\": 0\r\n                    \"height\": scaler(x) + \"%\"\r\n                    \"background-color\": bgColor\r\n                wrapper.append $(\"<div>\").text(text).css\r\n                    \"position\":\"relative\"\r\n                    \"padding-left\":\"5px\"\r\n                    \"padding-right\":\"5px\"\r\n\r\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\r\n\r\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\r\n        barcharter \".pvtTotal.colTotal\"\r\n\r\n        return this\r\n"
  ]
}