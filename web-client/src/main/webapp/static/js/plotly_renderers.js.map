{
  "version": 3,
  "file": "plotly_renderers.js",
  "sourceRoot": "",
  "sources": [
    "plotly_renderers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "callWithJQuery = (pivotModule) ->\r\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\r\n        pivotModule require(\"jquery\"), require(\"plotly.js\")\r\n    else if typeof define is \"function\" and define.amd # AMD\r\n        define [\"jquery\", \"plotly.js\"], pivotModule\r\n    # Plain browser env\r\n    else\r\n        pivotModule jQuery, Plotly\r\n\r\ncallWithJQuery ($, Plotly) ->\r\n    computedStyle = null\r\n    CSSProps =\r\n        paper_bgcolor: null\r\n        plot_bgcolor: null\r\n        font_color: null\r\n        axis_grid_color: null\r\n        axis_line_color: null\r\n        axis_zeroline_color: null\r\n        \r\n    chartMargin = 26\r\n    chartMarginWithText = 50\r\n\r\n    getCSSPropertyValue = (propertyName) ->\r\n        if computedStyle == null\r\n            computedStyle = getComputedStyle(document.documentElement)\r\n        return computedStyle.getPropertyValue(propertyName)\r\n    \r\n    getPaperBGColor = () ->\r\n        # return transparent doesn't work, because for modebar-group background rgba(0, 0, 0, 0.5) is set which looks odd\r\n        # however later should be fixed somehow\r\n        if CSSProps.paper_bgcolor == null\r\n            CSSProps.paper_bgcolor = getCSSPropertyValue('--background-color')\r\n        return CSSProps.paper_bgcolor\r\n\r\n    getPlotBGColor = () ->\r\n        if CSSProps.plot_bgcolor == null\r\n            CSSProps.plot_bgcolor = getCSSPropertyValue('--component-background-color')\r\n        return CSSProps.plot_bgcolor\r\n\r\n    getFontColor = () ->\r\n        # return null doesn't work, it still uses some fill / fill-opacity\r\n        if CSSProps.font_color == null\r\n            CSSProps.font_color = getCSSPropertyValue('--text-color')\r\n        return CSSProps.font_color\r\n\r\n    getAxisGridColor = () ->\r\n        if CSSProps.axis_grid_color == null\r\n            CSSProps.axis_grid_color = getCSSPropertyValue('--grid-separator-border-color')\r\n        return CSSProps.axis_grid_color\r\n\r\n    getAxisLineColor = () ->\r\n        if CSSProps.axis_line_color == null\r\n            CSSProps.axis_line_color = getCSSPropertyValue('--component-border-color')\r\n        return CSSProps.axis_line_color\r\n\r\n    getAxisZeroLineColor = () ->\r\n        if CSSProps.axis_zeroline_color == null\r\n            CSSProps.axis_zeroline_color = getCSSPropertyValue('--component-border-color')\r\n        return CSSProps.axis_zeroline_color\r\n\r\n    getJoinedAttrsNames = (attrs, opts) ->\r\n        attrsString = ''\r\n        for attr in attrs\r\n            if attr != opts.localeStrings.columnAttr\r\n                attrsString += ' - ' if attrsString != ''\r\n                attrsString += attr\r\n        return attrsString\r\n\r\n    makePlotlyChart = (reverse, traceOptions = {}, layoutOptions = {}, transpose = false) ->\r\n        (pivotData, opts) ->\r\n            defaults =\r\n                localeStrings: {vs: \"vs\", by: \"by\"}\r\n                plotly: {}\r\n                plotlyConfig: {\r\n                    responsive: true,\r\n                    locale: opts.locale\r\n                }\r\n\r\n            opts = $.extend(true, {}, defaults, opts)\r\n\r\n            rowKeys = pivotData.getRowKeys()\r\n            colKeys = pivotData.getColKeys()\r\n            if reverse\r\n                tKeys = rowKeys\r\n                rowKeys = colKeys\r\n                colKeys = tKeys\r\n            traceKeys = if transpose then colKeys else rowKeys\r\n            traceKeys.push([]) if traceKeys.length == 0\r\n            datumKeys = if transpose then rowKeys else colKeys\r\n            datumKeys.push([]) if datumKeys.length == 0\r\n\r\n            fullAggName = pivotData.aggregatorName\r\n            if pivotData.valAttrs.length\r\n                fullAggName += \"(#{pivotData.valAttrs.join(\", \")})\"\r\n\r\n            data = traceKeys.map (traceKey) ->\r\n                values = []\r\n                labels = []\r\n                for datumKey in datumKeys\r\n                    val = parseFloat(pivotData.getAggregator(\r\n                        if transpose ^ reverse then datumKey else traceKey,\r\n                        if transpose ^ reverse then traceKey else datumKey\r\n                    ).value())\r\n                    values.push(if isFinite(val) then val else null)\r\n                    labels.push(datumKey.join(' - ') || ' ')\r\n\r\n                trace = {name: traceKey.join(' - ') || fullAggName}\r\n                if traceOptions.type == \"pie\"\r\n                    trace.values = values\r\n                    trace.labels = if labels.length > 1 then labels else [fullAggName]\r\n                else\r\n                    trace.x = if transpose then values else labels\r\n                    trace.y = if transpose then labels else values\r\n                return $.extend(trace, traceOptions)\r\n\r\n            if transpose ^ reverse ^ traceOptions.type == \"pie\"\r\n                hAxisTitle = getJoinedAttrsNames(pivotData.rowAttrs, opts)\r\n                legendTitle = getJoinedAttrsNames(pivotData.colAttrs, opts)\r\n            else\r\n                hAxisTitle = getJoinedAttrsNames(pivotData.colAttrs, opts)\r\n                legendTitle = getJoinedAttrsNames(pivotData.rowAttrs, opts)\r\n\r\n            layout =\r\n                hovermode: 'closest'\r\n                autosize: true\r\n                paper_bgcolor: getPaperBGColor()\r\n                plot_bgcolor: getPlotBGColor()\r\n                font: {\r\n                    color: getFontColor()\r\n                }\r\n                legend:\r\n                    title:\r\n                        text: legendTitle\r\n                        font:\r\n                            size: 12\r\n\r\n            if traceOptions.type == 'pie'\r\n                layout.title =\r\n                        text: hAxisTitle\r\n                        font:\r\n                            size: 12\r\n                layout.margin =\r\n                    l: chartMargin\r\n                    r: chartMargin\r\n                    t: if hAxisTitle != \"\" then chartMarginWithText else chartMargin\r\n                    b: chartMargin\r\n                columns = Math.ceil(Math.sqrt(data.length))\r\n                rows = Math.ceil(data.length / columns)\r\n                layout.grid = {columns, rows}\r\n                for i, d of data\r\n                    d.domain = {\r\n                        row: Math.floor(i / columns),\r\n                        column: i - columns * Math.floor(i / columns),\r\n                    }\r\n                    if data.length > 1\r\n                        d.title = d.name\r\n                layout.showlegend = false if data[0].labels.length == 1\r\n            else\r\n                layout.xaxis =\r\n                    type: 'category'\r\n                    title: \r\n                        text: if transpose then fullAggName else hAxisTitle\r\n                        font:\r\n                            size: 12\r\n                    automargin: true\r\n                    gridcolor: getAxisGridColor()\r\n                    linecolor: getAxisLineColor()\r\n                    zerolinecolor: getAxisZeroLineColor()\r\n                if transpose or hAxisTitle != \"\"\r\n                    layout.xaxis.title.standoff = 10;\r\n                \r\n                layout.yaxis =\r\n                    title:\r\n                        text: if transpose then hAxisTitle else fullAggName\r\n                        font:\r\n                            size: 12\r\n                    automargin: true\r\n                    gridcolor: getAxisGridColor()\r\n                    linecolor: getAxisLineColor()\r\n                    zerolinecolor: getAxisZeroLineColor()\r\n                    \r\n                layout.margin =\r\n                    l: if not transpose or hAxisTitle != '' then chartMarginWithText else chartMargin \r\n                    r: chartMargin\r\n                    t: chartMargin\r\n                    b: if transpose or hAxisTitle != \"\" then chartMarginWithText else chartMargin\r\n            result = $(\"<div>\").appendTo $(\"body\")\r\n            Plotly.newPlot(result[0], data, $.extend(layout, layoutOptions, opts.plotly), opts.plotlyConfig)\r\n            return result.detach()\r\n\r\n    makePlotlyScatterChart = -> (pivotData, opts) ->\r\n        defaults =\r\n            localeStrings: {vs: \"vs\", by: \"by\"}\r\n            plotly: {}\r\n            plotlyConfig: {\r\n                responsive: true,\r\n                locale: opts.locale\r\n            }\r\n\r\n        opts = $.extend(true, {}, defaults, opts)\r\n\r\n        rowKeys = pivotData.getRowKeys()\r\n        rowKeys.push [] if rowKeys.length == 0\r\n        colKeys = pivotData.getColKeys()\r\n        colKeys.push [] if colKeys.length == 0\r\n\r\n        data = {x: [], y: [], text: [], type: 'scatter', mode: 'markers'}\r\n\r\n        for rowKey in rowKeys\r\n            for colKey in colKeys\r\n                v = pivotData.getAggregator(rowKey, colKey).value()\r\n                if v?\r\n                    data.x.push(colKey.join(' - '))\r\n                    data.y.push(rowKey.join(' - '))\r\n                    data.text.push(v)\r\n\r\n        colAttrsString = getJoinedAttrsNames(pivotData.colAttrs, opts)\r\n        rowAttrsString = getJoinedAttrsNames(pivotData.rowAttrs, opts)\r\n                \r\n        layout = {\r\n            margin:\r\n                l: if rowAttrsString == '' then chartMargin\r\n                r: chartMargin\r\n                t: chartMargin\r\n                b: if colAttrsString == '' then chartMargin\r\n            hovermode: 'closest',\r\n            xaxis:\r\n                title:\r\n                    text: colAttrsString\r\n                    font:\r\n                        size: 12\r\n                automargin: true\r\n            yaxis:\r\n                title:\r\n                    text: rowAttrsString\r\n                    font:\r\n                        size: 12\r\n                    automargin: true\r\n            autosize: true\r\n            paper_bgcolor: getPaperBGColor()\r\n            plot_bgcolor: getPlotBGColor()\r\n            font: {\r\n                color: getFontColor()\r\n            }\r\n        }\r\n        if colAttrsString != '' \r\n            layout.xaxis.title.standoff = 10\r\n\r\n        renderArea = $(\"<div>\", style: \"display:none;\").appendTo $(\"body\")\r\n        result = $(\"<div>\").appendTo renderArea\r\n        Plotly.newPlot(result[0], [data], $.extend(layout, opts.plotly), opts.plotlyConfig)\r\n        result.detach()\r\n        renderArea.remove()\r\n        return result\r\n\r\n    $.pivotUtilities.plotly_renderers =\r\n        \"BARCHART\": makePlotlyChart(true, { type: 'bar' }, { barmode: 'group' }, false),\r\n        \"STACKED_BARCHART\": makePlotlyChart(true, { type: 'bar' }, { barmode: 'relative' }, false),\r\n        \"LINECHART\": makePlotlyChart(true, {}, {}, false),\r\n        \"AREACHART\": makePlotlyChart(true, { stackgroup: 1 }, {}, false),\r\n        \"SCATTERCHART\": makePlotlyScatterChart(),\r\n        \"MULTIPLE_PIECHART\": makePlotlyChart(false, {\r\n            type: 'pie',\r\n            scalegroup: 1,\r\n            hoverinfo: 'label+value',\r\n            textinfo: 'none'\r\n        }, {}, true),\r\n        \"HORIZONTAL_BARCHART\": makePlotlyChart(true, {type: 'bar', orientation: 'h'}, { barmode: 'group' }, true),\r\n        \"HORIZONTAL_STACKED_BARCHART\": makePlotlyChart(true, { type: 'bar', orientation: 'h'}, { barmode: 'relative' }, true)\r\n\r\n    $.pivotUtilities.colorThemeChanged = (plot) ->\r\n        computedStyle = null\r\n        CSSProps.paper_bgcolor = null\r\n        CSSProps.plot_bgcolor = null\r\n        CSSProps.font_color = null\r\n        CSSProps.axis_grid_color = null\r\n        CSSProps.axis_line_color = null\r\n        CSSProps.axis_zeroline_color = null\r\n        \r\n        if (plot != undefined)\r\n            relayout = () ->\r\n                update =\r\n                    paper_bgcolor: getPaperBGColor()\r\n                    plot_bgcolor: getPlotBGColor()\r\n                    font: {\r\n                        color: getFontColor()\r\n                    }\r\n                    xaxis:\r\n                        gridcolor: getAxisGridColor()\r\n                        linecolor: getAxisLineColor()\r\n                        zerolinecolor: getAxisZeroLineColor()\r\n                    yaxis:\r\n                        gridcolor: getAxisGridColor()\r\n                        linecolor: getAxisLineColor()\r\n                        zerolinecolor: getAxisZeroLineColor()\r\n                Plotly.relayout(plot, update)\r\n                \r\n            # to defer the task. otherwise new <theme>.css is not applied yet and getComputedStyle() returns values from the previous one\r\n            setTimeout(relayout)  \r\n"
  ]
}