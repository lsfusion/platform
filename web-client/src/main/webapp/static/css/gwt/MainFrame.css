body, textarea, input, button, select, .gwt-Button, .gwt-Label, .gwt-TextBox, .gwt-TreeItem, .gwt-TabBarItem, .gwt-DialogBox .Caption,
.messageBox-messageContainer, .ResizableWindow-header, .captionPanelLegend, .checkBoxFilter, .comboBoxFilter,
.filterDialogHeader, .gwt-ProgressBar-shell .gwt-ProgressBar-text,
.pvtRenderer, .pvtAggregator, .pvtCheckContainer, .pvtFilterBox input[type=text], 
table.pvtTable, table.pvtTable tbody tr th, table.pvtTable thead tr th {
    font-size: 9pt;
}

body, textarea, select, button, input, .ResizableWindow-header, .gwt-DialogBox .Caption, .gwt-ListBox, .gwt-Label, .gwt-MenuBar .gwt-MenuItem,
.gwt-SuggestBox, .gwt-TextArea, .gwt-TextBox, .textBasedGridCellEditor, .leaflet-container {
    font-family: 'Segoe UI', 'Open Sans', Arial Unicode MS, Arial, sans-serif;
}

body, html {
    margin: 0;
}

/* ------------ Scrollbars ------------ */
body {
    /*firefox*/
    scrollbar-color: var(--scrollbar-color) var(--component-background-color);
    scrollbar-width: thin;
    /*ie*/
    scrollbar-face-color: var(--scrollbar-color);
    scrollbar-arrow-color: var(--component-border-color);
}

::-webkit-scrollbar-track {
    background: transparent;
}

::-webkit-scrollbar {
    width: 8px;
    height: 8px;
}

::-webkit-scrollbar-thumb {
    background-color: var(--scrollbar-color);
}

::-webkit-scrollbar-thumb:hover {
    background: var(--component-border-color);
}

::-webkit-scrollbar-corner {
    background: transparent;
}

/*Fix buttons paddings and margins in FF*/
button::-moz-focus-inner {
    border: 0;
    padding: 0;
    margin: 0;
}

/* ------------ Default gwt overrides ------------ */
:focus {
    outline: 0;
}

.gwt-Button {
    white-space: nowrap;
}

.gwt-ToggleButton {
    white-space: nowrap;
    border-radius: var(--button-border-radius);
}

input[type=checkbox] {
    vertical-align: middle;
    position: relative;
}

input[type=checkbox]:focus {
    outline: 1px solid var(--focus-color);
}

.SplitPanelBase-hdragger {
    position: absolute;
    background-color: black;
    opacity: 0.5;
    cursor: col-resize;
    width: 4px;
    top: 0;
    bottom: 0;
}

.SplitPanelBase-vdragger {
    position: absolute;
    background-color: black;
    opacity: 0.5;
    cursor: row-resize;
    height: 4px;
    left: 0;
    right: 0;
}

.gwt-DecoratorPanel .middleCenter {
    height: 100%;
    width: 100%;
}

.formsTabBar .gwt-TabBarItem {
    padding-right: 5px;
}

.mobileFormsTabPanel > .gwt-TabBar-horz {
    padding-top: 0;
    padding-bottom: var(--border-padding);
}

.mobileFormsTabPanel > .gwt-TabBar-horz .tabBarItemsWrapper {
    flex-wrap: nowrap !important;
    overflow-x: auto;
    
    scrollbar-width: none;  /* hide scrollbars in Firefox */
}
.mobileFormsTabPanel > .gwt-TabBar-horz .tabBarItemsWrapper::-webkit-scrollbar {
    display: none;  /* hide scrollbars in Safari and Chrome */
}

.mobileFormsTabPanel > .gwt-TabBar-horz .gwt-TabBarItem {
    border-top: none;
    border-bottom: 1px solid var(--panel-border-color);
    border-radius: var(--tab-border-radius-vert);
}

.mobileFormsTabPanel > .gwt-TabBar-horz .gwt-TabBarItem:hover {
    border-bottom: 1px solid var(--component-hover-border-color);
}

.mobileFormsTabPanel > .gwt-TabPanelBottom {
    padding-top: 0;
    padding-bottom: var(--border-padding);
    border-top: none;
    border-bottom: 1px solid var(--panel-border-color);
}

.tabLayoutPanelTabWidget {
    height: 100%;
}

.closeTabButton {
    padding: 0;
    margin-left: 2px;
    border: 0;
    border-radius: 3px;
    background: transparent;
    font-size: 8pt;
    font-family: tahoma;
    font-weight: bold;
    cursor: pointer;
}

.closeTabButton:hover {
    border: 1px solid var(--component-hover-border-color);
    background: var(--component-hover-background-color);
}

.closeTabButton:active { /* should come after ':hover' */
    background: var(--component-active-background-color);
}

.closeTabButton[disabled] {
    cursor: default;
    color: var(--close-tab-button-disabled-color);
}

.tabLayoutPanelTabTitleWrapper {
    flex-shrink: 1 !important;
}

/* ------------ Message box styles ------------ */
.messageBox-button {
    width: 90px;
}

.messageBox-messageContainer {
    height: auto;
    overflow: auto;
    padding: 5px 5px 7px 5px;
}

/* ------------ Error box styles ------------ */
.errorBox-button {
    margin: 3px 3px 5px;
}

.errorBox-stackBox {
    resize: none;
    white-space: nowrap;
}

.errorBox-message {
    padding: 5px;
}

/* ------------ Resizable window ------------ */
.dragdrop-boundary {
    /*background-color: #F8F8F8; *//* light gray */
    /*border: 1px solid black;*/
}

.dragdrop-selected, .dragdrop-dragging {
    filter: none;
    opacity: 1;
}

.ResizableWindow {
    position: absolute;
    border: 1px solid var(--dialog-outer-border-color);
}

.ResizableWindow .ResizableWindow-header {
    background: var(--dialog-border-color);
    padding: 0 0 4px 0;
    cursor: default;
    font-weight: bold;
    border-bottom: 1px solid var(--dialog-outer-border-color);
    overflow: hidden;
}

@sprite .ResizableWindow .resize-edge {
    line-height: 1px;
    width: auto;
    height: auto;
}
.ResizableWindow .resize-edge {
    background: var(--dialog-border-color);
}

.ResizableWindow .resize-edge-nw .dragdrop-handle {
    cursor: nw-resize;
}

.ResizableWindow .resize-edge-n .dragdrop-handle {
    cursor: n-resize;
}

.ResizableWindow .resize-edge-ne .dragdrop-handle {
    cursor: ne-resize;
}

.ResizableWindow .resize-edge-w .dragdrop-handle {
    cursor: w-resize;
}

.ResizableWindow .resize-edge-e .dragdrop-handle {
    cursor: e-resize;
}

.ResizableWindow .resize-edge-sw .dragdrop-handle {
    cursor: sw-resize;
}

.ResizableWindow .resize-edge-s .dragdrop-handle {
    cursor: s-resize;
}

.ResizableWindow .resize-edge-se .dragdrop-handle {
    cursor: se-resize;
}

.ResizableWindow .dragdrop-handle {
}

.modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: black;

    opacity: 0.3;
}
/* ------------ Cell Renderer related styles ------------ */

.logicalRendererCheckBox {
    /*margin: 0;*/
    pointer-events: none;
}

/* needed for paddings + mask */
.formDockableContainerPanel {
    padding: var(--border-padding);
}

/* ------------ Panel Renderer related styles ------------ */
.dataPanelRendererPanel {
    white-space: nowrap;

    cursor: default; /* need this since text by default gets "editing" cursor, however it overrides for example resize cursor, but it's not clear what to do with it */
}

.propertyContainerPanel {
}

.notEmptyPanelLabel {
    margin-left: var(--border-padding);
    margin-right: var(--border-padding);
}

.alignPanelLabel {
    margin-top: var(--border-padding);
    margin-bottom: var(--border-padding);
}

.panelRendererValue {
    margin: var(--border-padding);
}

.property-toolbar-on-hover .hide {
    width:0;
    transition:width 200ms linear;
}

.property-toolbar-on-hover:hover .hide {
    width:100%;
    transition:width 200ms linear;
}

.panelRendererValueBoxed, .panelRendererValueBoxed .background-inherit {
    background: var(--component-background-color);
}

.panelRendererValueBoxed {
    border: 1px solid var(--component-border-color); /* should correspond to the result in ActionOrPropertyValue.setBaseSize */
}

.propertyPanelRendererValue {
}

.propertyPanelRendererValue.panelRendererValueBoxed {
    border-radius: var(--textfield-border-radius);
    overflow: hidden; /* to hide inner corners */
}

.actionPanelRendererValue.panelRendererValueBoxed {
    border-radius: var(--button-border-radius);
}

button {
    border-radius: var(--button-border-radius);
    background: var(--component-background-color);
    border: 1px solid var(--component-border-color); /* should correspond to the result in ActionOrPropertyValue.setBaseSize */
}

.panelRendererValueEdited {
}

.panelRendererValueFocused.panelRendererValueBoxed:not(.panelRendererValueEdited),
.panelRendererValueFocused.panelRendererValueBoxed:not(.panelRendererValueEdited) .background-inherit, button:focus {
    background-color: var(--selection-color);
}

.panelRendererValueFocused.panelRendererValueBoxed, button:focus {
    border: 1px solid var(--focus-color);
}

.panelRendererValueBoxed:hover:not(.panelRendererValueFocused), button:hover:not(focus) { /* we want focus to have higher priority than hover*/
    border: 1px solid var(--component-hover-border-color);
}

.panelRendererValueBinding, .panelRendererValueBinding .background-inherit {
    background-color: var(--button-active-background-color);
}

/* ------------ Caption panel ------------ */

.leftBorder {
    border-left: var(--border-width) solid var(--panel-border-color);

    margin-left: calc(0px - var(--border-width) - var(--border-padding));
    padding-left: var(--border-padding);
}
.topBorder {
    border-top: 1px solid var(--panel-border-color);

    padding-top: var(--border-padding);
}
/* margin and not padding because we want the opposite borders to respect this padding */
/* also to have correct size / scroll when right component is wrapped */
.rightBorderNoWrap {
    margin-right: calc(var(--border-padding) + var(--border-padding));
}
.flexHorzBorderWrap {
    column-gap : calc(var(--border-padding) + var(--border-padding));
}
.bottomBorder {
    margin-bottom: var(--border-padding);
}

/* we can't use topborder because it is removed in autoDrawBorders */
.captionPanelNotNullLegend {
    border-top: 1px solid var(--panel-border-color);
}

.captionPanel {
    position: relative;
}

.captionLegendContainerPanel {
    position: relative;
}
.captionPanelLegend {
    white-space: nowrap;
    /*background-color: var(--background-color);*/
    color: var(--caption-panel-legend-color);
}

.notNullCaptionPanelLegend {
    padding-top: var(--border-padding);
    padding-bottom: var(--border-padding);
}

.notEmptyCaptionPanelLegend {
    /*margin-left: 4px;*/
    /*margin-right: 4px;*/

    padding-left: 4px;
    padding-right: 4px;
}

.captionCenteredLine {
    /*position: absolute;*/
    /*top : 50%;*/
    /*bottom: 0;*/
    /*left: 0;*/
    /*right: 0;*/
    /*z-index: -1;*/

    border-top: 1px solid var(--panel-border-color);
}

.rightCaptionCenteredLine {
    flex-grow : 1 !important;
}

.collapsePanelImage {
    cursor: default;
    /*margin-top: var(--border-padding);*/
    /*background: var(--background-color);*/
}

/* ------------ Navigator windows  ------------ */

.verticalToolbar {
    overflow-x: hidden;
    overflow-y: auto;
}

.horizontalToolbar {
    overflow-x: auto;
    overflow-y: hidden;
}

.toolbarNavigatorButton {
    border: solid 1px transparent;
    background: transparent;
    border-radius: var(--button-border-radius);
}

.toolbarSelectedNavigatorButton {
    border: solid 1px var(--component-border-color);
    background-color: var(--selection-color);
}

.toolbarNavigatorButton:hover {
    border: 1px solid var(--component-hover-border-color);
    background-color: var(--component-hover-background-color);
}

.toolbarSelectedNavigatorButton:hover {
    background-color: var(--selection-color);
}

.toolbarNavigatorButton:active { /* should come after ':hover' */
    background-color: var(--component-active-background-color);
}

.panelNavigatorView {
    display: block;
}

/* ------------ Form "dockables"  ------------ */
.dockableBlockingMask {
    background: black;
    opacity: 0.3;
    z-index: 10000;
}

/* ------------ Filters ------------ */
.checkBoxFilter {
    display: flex;
    align-items: center;
    white-space: nowrap;
    overflow: hidden;
    margin: 0 2px;
}

.checkBoxFilter label, .userFilterNegationCheckBox label {
    vertical-align: middle;
}

.comboBoxFilter {
    margin: auto 2px;
}

.userFilterLabel {
    cursor: default;
    margin: 0 3px 0 5px;
}

.userFilterButton {
    margin-top: var(--border-padding);
    margin-bottom: var(--border-padding);
}

.userFilterListBox, .userFilterDataPropertyValue, .userFilterSelector, .userFilterButton {
    margin-left: var(--border-padding);
}

/* mimicry of propertyPanelRendererValue / panelRendererValue, CELL_HORIZONTAL_PADDING (textbasedCellRenderer) */
.userFilterSelector {
    cursor : default;
    border: 1px solid var(--component-border-color);
    margin: var(--border-padding);
    border-radius: var(--textfield-border-radius);

    padding-left: 3px;
    padding-right: 3px;

    /* aligning text vertically (the other way with line-height) */
    display : flex;
    align-items : center;
}

.userFilterSelector, .userFilterSelector .background-inherit {
    background-color: var(--component-background-color);
}

.userFilerValueCellApplied, .userFilerValueCellApplied .background-inherit {
    background-color: var(--selection-color);
}

.userFilterNegationCheckBox input {
    margin-left: 3px;
}

.userFilterJunctionSeparator {
    margin: 0 7px 0 12px;
}

.gwt-ProgressBar-shell {
    border: 1px solid var(--component-border-color);
    background-color: #AAAAAA;
    width: 50%;
    height: 12pt;
}

.gwt-ProgressBar-shell .gwt-ProgressBar-bar {
    background-color: var(--focus-color);
}

.gwt-ProgressBar-shell .gwt-ProgressBar-text {
    padding: 0px;
    margin: 0px;
    color: white;
}

/* ------------ Loading blocker  ------------ */
.messageCanvas {
    position: absolute;
    background-color: rgba(226, 226, 226, 0.74);
    padding: 8px;
    overflow: hidden;
}

.messageLabel {
    word-wrap: break-word;
}

.busyDialog {
    text-align: center;
}

.stackMessage {
    margin: 5px 5px 5px 5px;
    border: 1px solid var(--panel-border-color);
    padding: 5px;
    overflow-wrap: break-word;
    word-wrap: break-word;
    /*!* Умный разбор длинных строк без пробелов по словам *!*/
    word-break: break-word;
}

/* ------------ Table user preferences  ------------ */
.listPositioner{
    z-index: 1;
    border-top: 1px dashed green;
    margin-top: 1px;
}

.userPreferencesDualList .dragdrop-selected {
    opacity: 1.0;
}

.userPreferencesDualList .draggableListBox {
}

.userPreferencesDualList .listBoxContainer {
    outline: none;
    overflow-y: auto;
    overflow-x: hidden;
    border: 1px solid var(--component-border-color);
    border-radius: var(--table-border-radius);
    background: var(--component-background-color);
    padding: 2px 3px;
    margin: 2px 1px 1px;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
}

.userPreferencesDualList .listBoxContainer:focus {
    border: 1px solid var(--focus-color);
}

.dualListButtonsContainer {
    margin: 0.5em 0.5em 0;
}

.dualListButtonsContainer td {
    padding: 0.2em 0.5em;
}

.dualListButtonsContainer button {
    width: 3em;
    padding: 4px 0;
}

.userPreferencesDualList .dragdrop-selected ,
.userPreferencesDualList .dragdrop-movable-panel .draggableListBoxItem {
    background-color: var(--selection-color);
}

.draggableListBoxItem .dragdrop-handle {}

.userPreferencesDualList .dragdrop-movable-panel {
    opacity: 0.5;
}

.userPreferencesIntegralTextBox {
    padding: 2px;
    text-align: right;
    width: 3em;    
}

.userPreferencesColumnTextBox {
    padding: 2px;
    flex: auto !important;
}

.userPreferencesCheckBox {
    display: flex;
}

.userPreferencesCheckBox label {
    margin: auto;
}

.userPreferencesFontLabel {
    padding-bottom: 1px;
}

.userPreferencesSaveResetButton {
    width: 13em;
    margin: 1px;
}

.userPreferencesRadioButton {
    display: inline-flex;
    align-items: center;
}

/* ------------ Leaflet components  ------------ */
.leaflet-container {
    /*border: 1px solid var(--component-border-color);*/
}

.leaflet-popup-content-wrapper, .leaflet-popup-tip {
    background: var(--background-color);
    color: var(--text-color);
}

.leaflet-popup-content-wrapper {
    border-radius: unset;
}

.leaflet-bar {
    border-radius: 0;
}

.leaflet-popup-content {
    margin: 17px;
}

.leaflet-popup-scrolled {
    border-bottom: 1px solid var(--component-border-color);
    border-top: 1px solid var(--component-border-color);
}

.leaflet-bar a, .leaflet-bar a:first-child:hover {
    border-bottom: 1px solid var(--component-border-color);
}

.leaflet-bar a:hover {
    background-color: var(--component-hover-background-color) !important;
}

.leaflet-control-zoom-in, .leaflet-control-zoom-out {
    color: var(--text-color) !important;
    background-color: var(--background-color) !important;
}

.leaflet-container .leaflet-control-attribution {
    background-color: var(--leaflet-control-transparent-background);
    color: var(--text-color);
}

.leaflet-bar a {
    border-radius: unset !important;
}

.leaflet-marker-icon img {
    position: absolute;
    bottom: 0;
    left: 50%;
    -webkit-transform: translateX(-50%);
    transform: translateX(-50%);
}

.leaflet-edit-marker-selected {
    border-color: transparent;
    background: none;
}

.leaflet-marker-cluster {
    border-radius: 50%;
    width: 40px;
    height: 40px;
    position: absolute;
    left: -15px; /* -half size + margin marker icon (6) - border */
    top: -15px; /* -half size + margin marker icon (6) - border */
    border: 1px solid var(--component-border-color);
}

.leaflet-marker-cluster-text {
    padding: 10px 0;
    font-weight: bold;
    color: white;
    text-shadow: 0 0 5px black;
    text-align: center;
}

/* ------------ Other components  ------------ */
.gridSizePanel{
}

.gridContainerPanel{
    margin: var(--border-padding);
}

.gridContainerPanelBoxed, .gridContainerPanelBoxed .background-inherit {
    background: var(--component-background-color);
}
.gridContainerPanelBoxed {
    border: 1px solid var(--component-border-color);
    border-radius: var(--table-border-radius);
}

.gridContainerPanelFocused {
}
.gridContainerPanelBoxed.gridContainerPanelFocused {
    /*background-color: var(--selection-color);*/
    border: 1px solid var(--focus-color);
}
.gridContainerPanelBoxed:hover:not(.gridContainerPanelFocused) { /* we want focus to have higher priority than hover*/
    border: 1px solid var(--component-hover-border-color);
}

.gridToolbarContainerPanel {
    margin-top: var(--border-padding);
    margin-bottom: var(--border-padding);
}

.toolbarButtonNoBorder {
}

.toolbarButton {
    border: 1px solid transparent;
    background: transparent;
    border-radius: var(--button-border-radius);
}

.toolbarButton:hover {
    background-color: var(--component-hover-background-color);
    border: 1px solid var(--component-hover-border-color);
}

.toolbarButton:active { /* should come after ':hover' */
    background-color: var(--component-active-background-color);
}

.toolbarItem {
    /*margin: 0 4px 0 0;*/
    margin-left: var(--border-padding);
    margin-right: var(--border-padding);
}

.logPanel {
    white-space: nowrap;
}

.errorLogMessage {
    color: #ff4500;
}

.dateTimeEditorBox {
    width: 11em;
    padding: 0 2px;
    text-align: right;
    float: right;
    margin-bottom: 1px;
}

.boxSized {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.displayBlock {
    display: block;
}

.noOutline {
    outline: none;
}

.nullValueString {
    color: var(--null-value-string-color);
}

.requiredValueString {
    color: var(--required-value-string-color);

    /* need this for notNullLine absolute positioning (see below) */
    position: relative;
}

.notNullLine {
    background: var(--not-null-line-color);
    height: 1px;
    bottom: 2px;
    right:0;
    left:0;
    margin: 0 5px;
    position:absolute;
}

.floatRight {
    float: right;
}

.filterDialogButton {
    margin: 0;
    height: 21px;
    width: 21px;
}

.imageButtonWithoutCaption {
    padding: 1px;
}

.userFilterJunctionSeparatorButton {
    margin: 0 12px 0 12px;
    padding: 5px;
}

.userFilterJunctionSeparatorButtonText {
    margin: 0 4px 0 4px;
    padding: 5px;
}

.verticalStretchSeparator {
    border-left: 1px solid var(--panel-border-color);
    margin: 3px 0;
    padding: 0 2px;
    align-self: stretch;
}

.verticalSeparator {
    border-left: 1px solid var(--panel-border-color);
}

.horizontalSeparator {
    width: 100%;
    border-bottom: 1px solid var(--panel-border-color);
}

.js-plotly-plot {
    width: 100%;
    height: 100%;
}

/* we want to turn cell to hyper link*/
.linkMode .selectedCellHasEdit {
    color: var(--link-color) !important;
    cursor: pointer !important;
}

.linkMode .selectedCellHasEdit:hover {
    text-decoration: underline;
}

.linkMode .selectedFileCellHasEdit {
    border: 1px solid var(--link-color);
}