
.prop-size-value,
.prop-size-value.fill-parent-perc {
    box-sizing: content-box; /* it's important to have content-box sizing, since we're setting explicit heights for the renderer element (and we don't want paddings to be included, since we're calculating elements heights based on contents) */
}

.prop-size-value.fill-parent-perc {
    /* it's tricky here
     fill-parent-perc wants 100% and border-box, but prop-size-value wants content-box*/
    /* so we use the hack with fill-available which respects paddings, and actual width is set in colgroup */
    width: -webkit-fill-available;
    width: -moz-available;

    /* we want to stretch div in the cell even if the explicit height is set */
    /* however there is a problem: prop-size-value sets box-sizing to content-box, and 100% starts ignoring paddings, so the content can overflow the container element */
    /* it's not really clear how to fix this, the above hack doesn't work. but it's a really rare case (explicit height, wrapped renderer, it has paddings and it's not the largest component) so we'll ignore it for now */
    min-height: 100%;
}

.prop-size-value.fill-parent-flex {
    /* we want to stretch div in the cell even if the explicit width is set (height is stretched by the flex:1 1 auto even if it is explicitly set) */
    /* maybe later should be moved directly to the fill-parent-flex */
    min-width: -webkit-fill-available;
    min-width: -moz-available;
    max-width: -webkit-fill-available;
    max-width: -moz-available;
}


.prop-value-shrink,
.prop-value-shrink.comp-shrink-horz {
    overflow-x: clip;
}

.prop-value-shrink,
.prop-value-shrink.comp-shrink-vert {
    overflow-y: clip;
}

.prop-input {
    /*background-color:transparent;*/
    /*var(--component-background-color);*/
    /*color: var(--text-color);*/
}

.text-based-prop-value:not(.prop-input) {
    cursor: default; /* need this since text by default gets "editing" cursor, however it overrides for example resize cursor, but it's not clear what to do with it */
}
a.text-based-prop-value:not(.prop-input) { /* we have to set cursor pointer for a since we don't set href and thus UA doesn't set cursor pointer */
    cursor: pointer;
}

/* we set pre to preserve white spaces and line preaks in prop data*/
.text-based-prop-value {
    white-space: pre;
}
.text-based-prop-value.text-based-prop-wrap {
    white-space: pre-wrap;
}
/* when we have string and \n inside we still don't want it to wrap, so we have to set nowrap for that (we loose pre, but there is no pre-nowrap for now)*/
.text-based-prop-value.text-based-value-multi-line:not(.text-based-prop-wrap) {
    white-space: nowrap;
}

.prop-display-flex, .prop-display-flex.btn {
    display: flex;
}

/* 2 and 3 selectors are needed for action cell renderers, to respect that alignments */
.prop-flex-horz-start,
.prop-flex-horz-start.wrap-text-not-empty.wrap-img-horz,
.prop-flex-vert-start.wrap-text-not-empty.wrap-img-vert
{
    justify-content: flex-start;
}
.prop-flex-horz-center,
.prop-flex-horz-center.wrap-text-not-empty.wrap-img-horz,
.prop-flex-vert-center.wrap-text-not-empty.wrap-img-vert
{
    justify-content: center;
}
.prop-flex-horz-end,
.prop-flex-horz-end.wrap-text-not-empty.wrap-img-horz,
.prop-flex-vert-end.wrap-text-not-empty.wrap-img-vert
{
    justify-content: flex-end;
}
.prop-flex-vert-start,
.prop-flex-vert-start.wrap-text-not-empty.wrap-img-vert,
.prop-flex-horz-start.wrap-text-not-empty.wrap-img-horz
{
    align-items: flex-start;
}
.prop-flex-vert-center,
.prop-flex-vert-center.wrap-text-not-empty.wrap-img-vert,
.prop-flex-horz-center.wrap-text-not-empty.wrap-img-horz
{
    align-items: center;
}
.prop-flex-vert-end,
.prop-flex-vert-end.wrap-text-not-empty.wrap-img-vert,
.prop-flex-horz-end.wrap-text-not-empty.wrap-img-horz
{
    align-items: flex-end;
}
.prop-flex-vert-stretch {
    align-items: stretch;
}

.prop-text-horz-start {
    text-align: left;
}
.prop-text-horz-center {
    text-align: center;
}
.prop-text-horz-end {
    text-align: right;
}
.prop-text-vert-start {
    vertical-align: top;
}
.prop-text-vert-center {
    vertical-align: middle;
}
.prop-text-vert-baseline {
    vertical-align: baseline;
}
.prop-text-vert-end {
    vertical-align: bottom;
}