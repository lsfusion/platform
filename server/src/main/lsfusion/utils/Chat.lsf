MODULE Chat;

REQUIRE Authentication, Integration, Time, SystemEvents, Service, Utils;

// ---- Chats

CLASS Chat '{chat.chat}';
TABLE chat(Chat);
TABLE chatCustomUser(Chat, CustomUser);

EXTEND CLASS UserRole : Chat;

onWebClientInit() + {
    onWebClientInit('chat.js') <- 1;
    onWebClientInit('chat.css') <- 1;
}

@defineExternalizable(chat, STRING[100]);

in '{chat.in.chat}' = DATA BOOLEAN (Chat, CustomUser);
overIn '{chat.in.chat}' (Chat c, CustomUser u) = IF c IS UserRole THEN has(u,c) ELSE in(c,u);
in (Chat c) = overIn(c, currentUser());
 
isDialog(Chat chat) = (GROUP SUM 1 IF in(chat, CustomUser user)) == 2 MATERIALIZED;
chatIn(CustomUser user1, CustomUser user2) = GROUP MAX Chat chat IF in(chat, user1) AND in(chat, user2) AND isDialog(chat);

readonly '{chat.readonly}' = DATA BOOLEAN (Chat, CustomUser);
readonly '{chat.readonly}' (Chat c) = readonly(c, currentUser());

dataName '{chat.name}' = DATA ISTRING[100] (Chat);

nameOrLogin '{chat.name.or.login.user}' (CustomUser user) = OVERRIDE name(user), login(user);
name '{chat.name}' (Chat chat) = 
    (OVERRIDE dataName(chat), 
              IF chat IS UserRole THEN 
                    '{chat.name.role}: ' + Security.name(chat) 
              ELSE (GROUP CONCAT nameOrLogin(CustomUser user) IF in(chat, user) AND (NOT isDialog(chat) OR NOT user == currentUser()), ', ' ORDER user)) CHARWIDTH 15;

FORM addChat '{chat.form.add.chat}'
    OBJECTS c = Chat PANEL
    PROPERTIES (c) name
    
    OBJECTS u = CustomUser
    PROPERTIES(u) READONLY login, name
    PROPERTIES(c,u) DRAW u in, readonly 
    
    FILTERGROUP in FILTER '{chat.form.add.chat.filter.in}' in(c,u)          

    EVENTS ON CHANGE c { in(c, currentUser()) <- TRUE; }

    EDIT Chat OBJECT c
;  
  
FORM editChat '{chat.chat}'
    OBJECTS c = Chat PANEL
    PROPERTIES (c) name
    
    OBJECTS u = CustomUser
    PROPERTIES(u) READONLY login, name
    PROPERTIES(c,u) DRAW u in, readonly 
    
    FILTERGROUP in FILTER '{chat.form.add.chat.filter.in}' in(c,u) DEFAULT
;  

editChatAction '{chat.edit.chat.action}' (Chat c)  { 
    IF c IS UserRole THEN 
        MESSAGE '{chat.edit.chat.action.message}';
    ELSE
        SHOW editChat ;
}

createDialogChat (CustomUser user1, CustomUser user2) {
    IF NOT chatIn(user1, user2) THEN {
        NEW chat = Chat {
            in(chat, user1) <- TRUE;
            in(chat, user2) <- TRUE;
        }
    }
}

// ---- Messages

CLASS Message '{chat.message}';
TABLE message(Message);

author '{chat.author.message}' = DATA CustomUser (Message);
nameAuthor '{chat.author.message}' (Message m) = nameOrLogin(author(m)) CHARWIDTH 30 NOFLEX;
own(Message m) = author(m) = currentUser();

chat = DATA Chat (Message) INDEXED;
nameChat '{chat.chat}' (Message message) = name(chat(message)) CHARWIDTH 30;
nameShortChat '{chat.chat}' (Message message) = IF isDialog(chat(message)) THEN nameChat(message) ELSE (nameChat(message) + ' [' + nameAuthor(message) + ']') CHARWIDTH 15;

text '{chat.text.message}' = DATA RICHTEXT (Message) CHARWIDTH 50;
dateTime '{chat.date.time.message}' = DATA DATETIME (Message) CHARWIDTH 30 NOFLEX;

lastEditDateTime '{chat.last.edit.date.time.message}' = DATA DATETIME (Message) CHARWIDTH 30 NOFLEX;
editedText (Message m) = '{chat.edited.text}: ' + TEXT(lastEditDateTime(m));
showText '{chat.show.text}' (Message m) = 
    (IF text(m) THEN text(m) ELSE '') + (IF lastEditDateTime(m) THEN '<br><br>' + editedText(m) ELSE '');

system '{chat.system.message}' = DATA BOOLEAN (Message);

replyTo = DATA Message (Message);
nameAuthorReplyTo (Message m) = nameAuthor(replyTo(m)); 
textReplyTo (Message m) = text(replyTo(m)); 

attachmentName '{chat.attachment}' = DATA ISTRING (Message); 

attachment '{chat.attachment}' = DATA FILE (Message);
hasAttachment '{chat.has.attachment}' (Message m) = TRUE IF attachment(m);
loadAttachment '{chat.load.attachment}' (Message m)  { INPUT =attachment(m) CHANGE; }
openAttachment '{chat.open.attachment}' (Message m)  { 
    IF attachment(m) THEN {
        open(attachment(m));
    } ELSE {
        MESSAGE '{chat.open.attachment.message.no.attachment}';
    }
} IMAGE 'open.png';

readonly (Message m) = readonly(chat(m));
editable (Message m) = NOT readonly(m);

// ----- message statuses 
CLASS MessageStatus {
    sent '{chat.message.status.sent}',
    delivered '{chat.message.status.delivered}',
    seen '{chat.message.status.seen}'
}
TABLE messageCustomUser(Message, CustomUser);

status '{chat.status.message}' = DATA MessageStatus (Message, CustomUser);
captionStatus '{chat.status.message}' (Message message, CustomUser user) = staticCaption(status(message, user));

seenCount(m) = GROUP SUM 1 IF status(m, CustomUser user) == MessageStatus.seen;
deliveredCount(m) = GROUP SUM 1 IF status(m, CustomUser user) == MessageStatus.delivered;

status '{chat.status.message}' (Message m) = 
    IF own(m) THEN 
        BPISTRING[10](staticCaption(IF seenCount(m) > 1 THEN MessageStatus.seen 
                                                        ELSE IF deliveredCount(m) > 0 THEN 
                                                                MessageStatus.delivered 
                                                                ELSE MessageStatus.sent)) 
    ELSE '' 
        CHARWIDTH 10 NOFLEX;
 
countMessages '{chat.count.messages}' (Chat chat) = GROUP SUM 1 BY chat(Message message);
 
unreadMessages '{chat.unread.messages}' (Chat chat, CustomUser user) = 
    GROUP SUM 1 IF (status(Message message, user) == MessageStatus.sent OR status(message, user) == MessageStatus.delivered) AND 
                   author(message) != user 
          BY chat(message);
unreadMessages'{chat.unread.messages}' (Chat chat) = unreadMessages(chat, currentUser()) CHARWIDTH 10 NOFLEX;
unreadMessages '{chat.unread.messages}' (CustomUser user) = unreadMessages(chatIn(user, currentUser()), currentUser()) CHARWIDTH 10 NOFLEX;
countUnreadMessages '{chat.sum.unread.messages}' (CustomUser user) = 
    GROUP SUM unreadMessages(Chat chat, user) IF overIn(chat, user);

lastMessageDateTime '{chat.last.message.date.time}' (Chat c) = GROUP LAST dateTime(Message m) ORDER dateTime(m), m BY chat(m);
lastMessageDateTime '{chat.last.message.date.time}' (CustomUser u) = lastMessageDateTime(chatIn(u, currentUser()));

// clear after restart
onStarted() + { 
    NEWSESSION {
        FOR NOT chat('system') NEW c = Chat DO {
            id(c) <- 'system';
            dataName(c) <- '{chat.name.all}'; 
        }

        in(Chat c, User u) <- TRUE WHERE login(u) AND lastActivity(u) AND c = chat('system');
        
        DELETE Message m WHERE system(m) AND NOT dateTime(m) >= subtractDay(currentDateTime(), 30); 
        status(Message m, CustomUser u) <- MessageStatus.seen IF overIn(chat(m), u) AND login(u) WHERE system(m);
        APPLY;
    }
}

// ----- mark seen
seekLastMessage ABSTRACT LIST ();

markSeenOnChangeMessages (Chat chat, CustomUser user)  { 
    LOCAL needApply = BOOLEAN();
    FOR in(chat) AND chat(Message m) == chat AND (status(m, user) == MessageStatus.sent OR status(m, user) == MessageStatus.delivered) DO {
        status(m, user) <- MessageStatus.seen;
        needApply() <- TRUE;
    }
    IF needApply() THEN {
        APPLY;
    }
}

markSeenMessages (CustomUser user)  { 
    FOR in(chat(Message m)) AND status(m, user) == MessageStatus.delivered DO {
        status(m, user) <- MessageStatus.seen;
    }
}

markSeenOnChange (Chat c) { 
    markSeenOnChangeMessages(c, currentUser());
    seekLastMessage();
}

markSeenOnChange(Message m)  { 
    markSeenOnChangeMessages(chat(m), currentUser());
}

seekChat ABSTRACT (Chat);

prevUser() = DATA LOCAL NESTED CustomUser();
seekChat (CustomUser user) { 
    LOCAL chat = Chat();
    chat() <- chatIn(user, currentUser());
    IF NOT chat() THEN {
        markSeenOnChange(chatIn(prevUser(), currentUser()));
    } ELSE {
        seekChat(chat());
        seekLastMessage();
        markSeenOnChange(chat());
    }
    prevUser() <- user;
}

// ----- new message

message '{chat.new.message}' = DATA LOCAL RICHTEXT ();
notificate '{chat.notificate}' = DATA LOCAL BOOLEAN ();

replyTo = DATA LOCAL Message ();
nameAuthorReplyTo () = nameAuthor(replyTo());
textReplyTo () = text(replyTo());

attachmentName '{chat.attachment}' = DATA LOCAL ISTRING (); 

attachment '{chat.attachment}' = DATA LOCAL FILE ();
loadAttachment '{chat.load.attachment}' ()  { INPUT =attachment() CHANGE; }
deleteAttachment '{chat.delete.attachment}' ()  { attachment() <- NULL; } IMAGE 'delete.png';

pushNotification '{chat.push.notification}' ABSTRACT LIST (CustomUser, BOOLEAN, BOOLEAN);
sendMessage '{chat.send.message.chat}' (Chat chat, TEXT message, BOOLEAN system, BOOLEAN notificate)  { 
    NEW m = Message {
        chat(m) <- chat;
        dateTime(m) <- currentDateTime();
        author(m) <- currentUser();
        system(m) <- system;
        text(m) <- message;
        replyTo(m) <- replyTo();
        attachmentName(m) <- attachmentName();
        attachment(m) <- attachment();
        
        status(m, currentUser()) <- IF system THEN MessageStatus.sent ELSE MessageStatus.seen;
        FOR overIn(chat, CustomUser user) AND user != currentUser() DO {
            status(m, user) <- MessageStatus.sent;
        }            
    }
    APPLY;
    
    NEWSESSION NEWTHREAD {
        FOR overIn(chat, CustomUser user) AND (user != currentUser() OR system) DO {
            pushNotification(user, system, notificate);
        }          
    }
}

sendMessage '{chat.send.message.user}' (CustomUser user1, CustomUser user2, STRING message, BOOLEAN notificate)  {
    createDialogChat(user1, user2);
    sendMessage(chatIn(user1, user2), message, NULL, notificate);
}

sendMessage '{chat.send.message.user}' (CustomUser user, STRING message, BOOLEAN notificate)  {
    sendMessage(user, currentUser(), message, notificate);
}

sendMessage '{chat.send.message}' (Chat chat)  { 
    IF message() OR attachment() THEN {
        sendMessage(chat, message(), NULL, notificate());
        markSeenOnChangeMessages(chat, currentUser());
        seekLastMessage();
    }
} CHANGEKEY 'ctrl ENTER;priority=200';

sendMessage '{chat.send.message}' (CustomUser user)  { 
    createDialogChat(user, currentUser()) ;
    sendMessage(chatIn(user, currentUser()));
    seekChat(chatIn(user, currentUser()));
} CHANGEKEY 'ctrl ENTER;priority=200';

recentVisible = ABSTRACT BOOLEAN ();

// ----- editing

editingMessage '{chat.editing.message}' = DATA LOCAL Message ();

activateMessage ABSTRACT LIST ();
editMessage '{chat.edit.message}' (Chat c, Message m) { 
    IF own(m) THEN {
        IF subtractSeconds(dateTime(m), currentDateTime()) < 3600 THEN {
            editingMessage() <- m;
            message() <- text(m);
            attachmentName() <- attachmentName(m);
            attachment() <- attachment(m);
            activateMessage();
        } ELSE MESSAGE '{chat.edit.message.message1}';
    } ELSE MESSAGE '{chat.edit.message.message2}';
}

saveEditing '{chat.save.message}' () { 
    FOR Message m = editingMessage() DO {
        lastEditDateTime(m) <- currentDateTime();
        text(m) <- message();
        attachmentName(m) <- attachmentName();
        attachment(m) <- attachment();
        APPLY;
    }
} CHANGEKEY 'ctrl ENTER;priority=200';

stopEditing () { 
    IF editingMessage() THEN {
        editingMessage() <- NULL;
        message() <- NULL;
        attachmentName() <- NULL;
        attachment() <- NULL;
    }
}

deleteMessage '{chat.delete.message}' (Message m)  { 
    IF own(m) THEN {
        IF subtractSeconds(dateTime(m), currentDateTime()) < 3600 THEN {
            DELETE m;
            APPLY;
        } ELSE MESSAGE '{chat.delete.message.message1}';
    } ELSE MESSAGE '{chat.delete.message.message2}';
}

// ------ Full chat form
online (CustomUser user) = subtractSeconds(lastActivity(user), currentDateTime()) < 300;
away (CustomUser user) = subtractSeconds(lastActivity(user), currentDateTime()) < 3600;
backgroundUser (CustomUser user) = IF online(user) THEN RGB(0, 255, 0) ELSE IF away(user) THEN RGB(255, 255, 0);

backgroundMessage (Message m) = IF NOT own(m) THEN NULL ELSE IF seenCount(m) < 2 THEN RGB(247, 247, 247) ELSE RGB(240, 244, 248);

backgroundUnread '{chat.background.unread}' (Chat chat) = RGB(255, 0, 0) IF unreadMessages(chat);
backgroundUnread '{chat.background.unread}' (CustomUser user) = RGB(255, 0, 0) IF unreadMessages(user);

FORM fullChat '{chat.chat}'
    OBJECTS c = Chat
    PROPERTIES(c) READONLY   name ON CONTEXTMENU editChatAction(c), lastMessageDateTime, unreadMessages BACKGROUND backgroundUnread(c)
    PROPERTIES(c) NEWSESSION NEW, DELETE SHOWIF NOT countMessages(c)
    FILTERS in(c)

    EVENTS ON INIT markSeenOnChange(c)
    EVENTS ON CHANGE c markSeenOnChange(c), 
           ON CHANGE c stopEditing()
    EVENTS ON CLOSE markSeenOnChange(c)
    ORDERS lastMessageDateTime(c) DESC

//  user    
    OBJECTS u = CustomUser
    PROPERTIES(u) READONLY BACKGROUND backgroundUser(u) login, name, lastMessageDateTime , unreadMessages BACKGROUND backgroundUnread(u) 
    
    EVENTS ON INIT seekChat(u)
    EVENTS ON CHANGE u seekChat(u)
    
    FILTERGROUP in FILTER '{chat.form.full.chat.filter.in}' away(u)  
    FILTERS u != currentUser(), login(u), lastActivity(u)
    ORDERS lastMessageDateTime(u) DESC

//  message    
    OBJECTS m = Message LAST
    PROPERTIES(m) READONLY BACKGROUND backgroundMessage(m) SHOWIF NOT isWeb() 
                                nameAuthor, 
                                showText ON CONTEXTMENU editMessage(c, m) ON CONTEXTMENU deleteMessage(m), 
                                hasAttachment, status, dateTime
    PROPERTIES(m) SHOWIF hasAttachment(m) AND NOT isWeb() TOOLBAR
                                attachmentName READONLY, openAttachment
    
    EVENTS ON CHANGE m markSeenOnChange(m), 
           ON CHANGE m stopEditing()
        
    FILTERS chat(m) = c AND (recentVisible() OR chatIn(u, currentUser()) = c), status(m, currentUser())

//  send
    PROPERTIES() PANEL READONLYIF readonly(c) AND recentVisible() 
                                                 message, notificate,
                                                 loadAttachment SHOWIF NOT attachment(), 
                                                 attachmentName SHOWIF TRUE IF attachment(),
                                                 deleteAttachment SHOWIF TRUE IF attachment() 
    
    PROPERTIES(c) sendMessage SHOWIF recentVisible() AND NOT editingMessage()
    PROPERTIES(u) sendMessage SHOWIF NOT recentVisible() AND NOT editingMessage()
    
    PROPERTIES()     saveEditing SHOWIF     editingMessage()
    
    LIST Chat OBJECT c
;

DESIGN fullChat {
    OBJECTS {
        NEW pane {
            horizontal = TRUE;
            fill = 1;
            NEW left {
                fill = 0.3;
                tabbed = TRUE;
                NEW contacts {
                    caption = '{chat.contacts}';
                    MOVE BOX(u) { caption = '{chat.contacts}'; }
                }
                NEW recent {
                    caption = '{chat.chats}';
                    MOVE BOX(c) { caption = '{chat.chats}'; } 
                }                         
            }
            NEW chat {
                fill = 0.7;
                MOVE BOX(m) { 
                    fill = 0.8;
                    PROPERTY(showText(m)) {
                        valueWidth = 300;
                    }                       
                }
                
                NEW chatMessage {
                    fill = 0.2;
                    horizontal = TRUE;
                    alignment = STRETCH;
                    NEW inputMessage {
                        showIf = NOT isWeb();
                        fill = 1;
                        MOVE PROPERTY(message()) {
                            fill = 1; 
                            panelCaptionVertical = TRUE;
                        }   
                        NEW inputAttachments {
                            align = STRETCH;
                            horizontal = TRUE;
                            MOVE PROPERTY(loadAttachment()) {
                                fill = 1;
                                fontSize = 24;
                            }
                            MOVE PROPERTY(attachmentName()) {
                                fill = 1;
                                fontSize = 24;
                            }
                            MOVE PROPERTY(deleteAttachment()) {
                                fill = 1;
                                fontSize = 24;
                            }
                        }
                    }
                    NEW sendMessage {
                        alignment = STRETCH;
                        MOVE PROPERTY(sendMessage(c)) {
                            fill = 1;                           
                            font = 'bold 24';
                        }                        
                        MOVE PROPERTY(sendMessage(u)) {
                            fill = 1;                           
                            font = 'bold 24';
                        }
                        MOVE PROPERTY(saveEditing()) {                           
                            fill = 1;                           
                            font = 'bold 24';
                        }
                        MOVE PROPERTY(notificate()) {
                            font = 'bold 24';
                            alignment = START;
                        }
                    }
                }                            
            }            
        }
    }           
}

EXTEND FORM fullChat
    EVENTS ON INIT { ACTIVATE TAB fullChat.recent; } 
;

recentVisible() += ACTIVE TAB fullChat.recent;
seekChat (Chat chat) + { SEEK fullChat.c = chat; }

seekLastMessage() + { SEEK LAST fullChat.m; }

NAVIGATOR {
    NEW fullChat WINDOW system PARENT AFTER showDesign HEADER '{chat.chat}' IF NOT noSystemToolbarCaptions() IMAGE 'chat.png';
}

//---------------------------- SHORT CHAT ----------------------------//

deliveredNotificationAction(CustomUser user) + { 
    FOR in(chat(Message m)) AND status(m, user) == MessageStatus.sent DO {
        status(m, user) <- MessageStatus.delivered;
    }
}

replyChat '{chat.reply.chat}' (Message m)  { 
    IF (message()) THEN {
        markSeenMessages(currentUser());
        sendMessage(chat(m));
        formClose();
    }
} CHANGEKEY 'ctrl ENTER';

openChat '{chat.open.chat}' (Message m)  { 
    markSeenMessages(currentUser());
    APPLY;
    SHOW fullChat OBJECTS c = chat(m) NOWAIT;
    formClose();
};

FORM shortChat '{chat.new.message}'
    OBJECTS m = Message LAST
    PROPERTIES(m) READONLY SHOWIF NOT isWeb() nameShortChat, showText, dateTime
    PROPERTIES()  PANEL SHOWIF NOT isWeb() message READONLYIF readonly(m)
    PROPERTIES()  PANEL notificate SHOWIF editable(m)
    PROPERTIES(m) PANEL replyChat SHOWIF editable(m), openChat
    
    FILTERS in(chat(m)), status(m, currentUser()) != MessageStatus.seen
    EVENTS ON CLOSE markSeenOnChange(m)
;

DESIGN shortChat {
    size = (800, 600);
    OBJECTS {
        NEW chat {
            fill = 1;
            MOVE BOX(m) {
                GRID(m) { height = 200; }
                fill = 0.7;
            }
            MOVE PROPERTY(message()) {
                panelCaptionVertical = TRUE;   
                fill = 0.3;
            }
            NEW buttons {
                align = STRETCH;
                horizontal = TRUE;
                MOVE PROPERTY(replyChat(m));
                MOVE PROPERTY(openChat(m));
                MOVE PROPERTY(formClose()) { caption = '{chat.close.chat}'; }
                NEW notificate {
                    fill = 1;
                    MOVE PROPERTY(notificate()) { alignment = END; };
                }
            }
        }
    }      
    REMOVE TOOLBARBOX;
}  

showOnStart()  { 
    IF countUnreadMessages(currentUser()) > 0 THEN {
        deliveredNotificationAction(currentUser());
        APPLY;
        SHOW shortChat NOMANAGESESSION;
    }
}

onDesktopClientStarted() + {  showOnStart(); }
onWebClientStarted() + {  showOnStart(); }

pushAction (BOOLEAN system, BOOLEAN notificate)  { 
    ACTIVE FORM fullChat;
    IF isActiveForm() AND NOT system THEN {
        seekLastMessage();
        formRefresh();
    }
    ELSE {
        ACTIVE FORM shortChat;
        IF isActiveForm() THEN {
            formRefresh();
            SEEK LAST shortChat.m;
        } 
        ELSE {
            IF system OR notificate THEN {
                NEWSESSION {
                    SHOW shortChat NOMANAGESESSION;
                }
            }
        }
    }
}

pushNotification (CustomUser user, BOOLEAN system, BOOLEAN notificate) + { 
    FOR user(Connection conn) == user AND connectionStatus(conn) == ConnectionStatus.connectedConnection AND conn != currentConnection() DO {
        NEWSESSION { 
            NEWTHREAD pushAction(system AS BOOLEAN, notificate AS BOOLEAN); 
                      CONNECTION conn; 
        }
    }
}

// web

// list
json (Message m) = JSON FROM
        author = nameAuthor(m),
        time = dateTime(m),
        text = text(m),
        own = IF own(m) THEN 1 ELSE 0,
        replyAuthor = nameAuthorReplyTo(m),
        replyText = textReplyTo(m),
        replyMessage = replyTo(m),
        id = m,
        attachment = attachmentName(m),
        status = status(m);

changeMessage (Message m) {
    INPUT f = JSON DO {
        IMPORT JSON FROM f FIELDS() STRING action, LONG id DO {
            IF action = 'goToReply' THEN {
                seek(replyTo(m));
            }
    
            IF action = 'reply' THEN {
                replyTo() <- m;
            }
    
            IF action = 'open' THEN {
                FOR LONG(Message ms AS Message) = id DO {
                    open(attachment(ms), attachmentName(ms));
                }
            }
        }
    }
}

EXTEND FORM fullChat
    PROPERTIES(m) '' = json CUSTOM 'chatMessageRender' SHOWIF isWeb() 
                  ON CHANGE changeMessage(m) 
                  ON CONTEXTMENU editMessage(c, m) 
                  ON CONTEXTMENU deleteMessage(m)
;
EXTEND FORM shortChat
    PROPERTIES(m) '' = json CUSTOM 'chatMessageRender' SHOWIF isWeb() ON CHANGE changeMessage(m) 
;

// send
jsonInputMessage () = JSON FROM
        replyAuthor =  nameAuthorReplyTo(),
        replyText = textReplyTo(),
        text = message(),
        attachment = attachmentName();

changeInputMessage () {
    INPUT f = JSON DO {
        IMPORT JSON FROM f FIELDS() STRING action, TEXT value, STRING name, STRING data DO {
            IF action = 'replyRemove' THEN {
                replyTo() <- NULL;
            }
    
            IF action = 'change' THEN {
                message() <- value;
            }
    
            IF action = 'upload' THEN {
                LOCAL extension = STRING ();
                extension() <- getWord(name, '.', wordCount(name, '.')) IF wordCount(name, '.') > 1;
                attachmentName() <- left(name, length(name) - OVERRIDE (length(extension()) + 1), 0);
                attachment() <- file(decode(data, 'base64'), (OVERRIDE extension(), 'dat'));
            }
    
            IF action = 'open' THEN {
                open(attachment(), attachmentName());
            }
    
            IF action = 'remove' THEN {
                attachment() <- NULL;
                attachmentName() <- NULL;
            }
        }
    }
}

EXTEND FORM fullChat
    PROPERTIES jsonInputMessage() CUSTOM 'chatMessageInputRender' SHOWIF isWeb() 
               ON CHANGE changeInputMessage()
;

DESIGN fullChat {
    chatMessage {
        MOVE PROPERTY(jsonInputMessage()) FIRST {
            alignment = STRETCH; 
            autoSize = TRUE; 
            width = 0; 
            caption = ''; 
            fill = 1; 
        }
    }
}

activateMessage() + { 
    IF isWeb() THEN
        ACTIVATE PROPERTY fullChat.jsonInputMessage();
    ELSE
        ACTIVATE PROPERTY fullChat.message(); 
}

EXTEND FORM shortChat
    PROPERTIES jsonInputMessage() CUSTOM 'chatMessageInputRender' SHOWIF isWeb() 
               ON CHANGE changeInputMessage()
;

DESIGN shortChat {
    chat {
        NEW chatMessage BEFORE buttons {
            fill = 0.3;
            horizontal = TRUE;
            alignment = STRETCH; 
            MOVE PROPERTY(jsonInputMessage()) {
                alignment = STRETCH; 
                autoSize = TRUE; 
                width = 0; 
                caption = ''; 
                fill = 1; 
            }
        }
    }
}

// ----- restart server
sendRestartMessage '{chat.send.restart.message}' = DATA BOOLEAN ();
sendRestartServerMessage '{chat.send.restart.server.message}' ()  { sendMessage(chat('system'), '{chat.send.restart.server.message.message}', TRUE, NULL); }
restartServer() + {  IF sendRestartMessage() THEN sendRestartServerMessage(); }

sendCancelRestartServerMessage '{chat.send.cancel.restart.server.message}' ()  { sendMessage(chat('system'), '{chat.send.cancel.restart.server.message.message}', TRUE, NULL); }
cancelRestartServer() + {  IF sendRestartMessage() THEN sendCancelRestartServerMessage(); }

EXTEND FORM maintenance PROPERTIES() sendRestartMessage;

DESIGN maintenance {
    administration {
        MOVE PROPERTY(sendRestartMessage()) BEFORE PROPERTY(restartServer());
    }
}                               