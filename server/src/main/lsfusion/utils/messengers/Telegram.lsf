MODULE Telegram;

REQUIRE Messenger;

EXTEND CLASS Messenger { telegram 'Telegram' }
isTelegram(Account a) = messenger(a) == Messenger.telegram;
showTitle(Messenger m) += WHEN m == Messenger.telegram THEN TRUE;

setWebHookTelegramResult = DATA LOCAL STRING();
setWebHookTelegram(Account account) {
    LOCAL result = JSONFILE();
        
    EXTERNAL HTTP POST 'https://api.telegram.org/bot' + token(account) + '/setWebhook'
        BODYURL 'url=' + webServerUrl() + '/exec/webHookTelegram?botid=' + LONG(account) TO result;
    
    LOCAL ok = BOOLEAN();
    LOCAL description = STRING();
    IMPORT FROM result() TO() ok, description;
    IF NOT ok() THEN {
        setWebHookTelegramResult() <- description();
    }
}
WHEN SET (Account a IS Account) AND isTelegram(a) DO {
    setWebHookTelegram(a);
    IF setWebHookTelegramResult() THEN {
        MESSAGE setWebHookTelegramResult() NOWAIT;
        CANCEL;
    }
}

GROUP privateMessage EXTID 'message';
GROUP privateChat EXTID 'chat': privateMessage;
GROUP channelPost EXTID 'channel_post';
GROUP channelChat EXTID 'chat' : channelPost;
GROUP from EXTID 'from' : privateMessage;
id = DATA LOCAL STRING();
type = DATA LOCAL STRING();
first_name = DATA LOCAL STRING();
username = DATA LOCAL STRING();
title = DATA LOCAL STRING();
text = DATA LOCAL STRING();
senderUsername = DATA LOCAL STRING();
senderFirstName = DATA LOCAL STRING();
channelId = DATA LOCAL STRING();
channelUsername = DATA LOCAL STRING();
channelTitle = DATA LOCAL STRING();

FORM webHookTelegram
PROPERTIES() IN privateMessage text
PROPERTIES() IN from senderFirstName EXTID 'first_name', senderUsername EXTID 'username'
PROPERTIES() IN privateChat id, type, first_name, username, title
PROPERTIES() IN channelChat channelId EXTID 'id', channelUsername EXTID 'username', channelTitle EXTID 'title';

webHookTelegram(JSONFILE f) {
    
    IMPORT webHookTelegram JSON FROM f;
    
    LOCAL chat = Chat();
    chat() <- chatIdAccount(account(LONG(params('botid'))), IF channelId() THEN channelId() ELSE id());
    IF NOT chat() THEN {
        NEW chat = Chat {
            chat() <- chat;
            account(chat) <- account(LONG(params('botid')));
            id(chat()) <- IF channelId() THEN channelId() ELSE id();
        }
    }
    name(chat()) <- IF channelId() THEN channelUsername() ELSE username();
    title(chat()) <- CASE WHEN type() == 'private' THEN first_name()
                          WHEN type() == 'group' THEN title()
                          WHEN channelId() THEN channelTitle();
    chatType(chat()) <- CASE WHEN type() == 'private' THEN ChatType.private 
                             WHEN type() == 'group' THEN ChatType.group
                             WHEN channelId() THEN ChatType.channel;

    NEW message = Message {
        chat(message) <- chat();
        message(message) <- text();
        dateTime(message) <- currentDateTime();
        from(message) <- OVERRIDE senderUsername(), senderFirstName();
    }

    APPLY;
} @@noauth;

fileMessage = DATA NAMEDFILE(Message);

telegramAttachment '{chat.attachment}' = DATA LOCAL NAMEDFILE();
sendMessageTelegramResult = DATA LOCAL STRING();

processResult(Chat chat, JSONFILE result, STRING message, NAMEDFILE file) {
    sendMessageTelegramResult() <- NULL;
    LOCAL ok = BOOLEAN();
    LOCAL description = STRING();
    IMPORT FROM result TO() ok, description;
    IF NOT ok() THEN {
        sendMessageTelegramResult() <- description();
    } ELSE {
        NEW botMessage = Message {
            chat(botMessage) <- chat;
            fileMessage(botMessage) <- file;
            message(botMessage) <- message;
            dateTime(botMessage) <- currentDateTime();
            from(botMessage) <- 'YOU';
        }
    }
}

sendFile(Chat chat, NAMEDFILE attachment) {
    LOCAL result = JSONFILE();

    LOCAL headers = TEXT(STRING[100]);
    headers('Content-Type') <- 'multipart/form-data; charset=UTF-8';
    
    LOCAL fileName = STRING();
    fileName() <- CONCAT '', name(telegramAttachment()), IF length(extension(telegramAttachment())) > 0 THEN '.' ELSE '', extension(telegramAttachment());

    EXTERNAL HTTP POST 'https://api.telegram.org/bot' + token(account(chat)) + '/sendDocument?chat_id=' + id(chat)
        BODYPARAMNAMES 'document;' + fileName() HEADERS headers PARAMS telegramAttachment() TO result;

    processResult(chat, result(), fileName(), attachment);
}

sendMessageTelegram(Chat chat, STRING message) {
    LOCAL result = JSONFILE();
    urlEncode(message);
    EXTERNAL HTTP GET 'https://api.telegram.org/bot' + token(account(chat)) + '/sendMessage?chat_id=' + id(chat) + '&text=' + urlEncoded() TO result;
    
    processResult(chat, result(), message, NULL);
}

openFile '{system.open.file}' (Message m) {
    open(fileMessage(m));
}

EXTEND FORM messengers
    PROPERTIES telegramAttachment()
    PROPERTIES (m) openFile SHOWIF isTelegram(a) READONLYIF NOT fileMessage(m);
;

DESIGN messengers {
    sendMessage {
        MOVE PROPERTY(telegramAttachment()) FIRST;
        horizontal = TRUE;
    }
}

sendMessage(Chat chat, STRING message) + WHEN isTelegram(account(chat)) AND message IS STRING OR telegramAttachment() THEN {
    IF message IS STRING THEN sendMessageTelegram(chat, message);
    IF NOT sendMessageTelegramResult() AND telegramAttachment() THEN sendFile(chat, telegramAttachment());
    APPLY;
    sendMessageResult() <- sendMessageTelegramResult();
}