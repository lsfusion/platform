MODULE Profiler;

REQUIRE SystemEvents, Security, Service, Utils;

CLASS ProfileObject {
    top '{profiler.profile.object.top}'
}

TABLE profileObject(ProfileObject); 
TABLE profileData(ProfileObject, ProfileObject, User, Form);

text '{profiler.text.profile.object}' = DATA TEXT (ProfileObject) IN id CHARWIDTH 40;
onStarted() + { 
    text(ProfileObject po) <- staticCaption(ProfileObject.top) WHERE po == ProfileObject.top;
}
profileObject = GROUP AGGR ProfileObject profileObject BY text(profileObject);

totalTime '{profiler.total.time}' = DATA LOCAL LONG (TEXT, TEXT, INTEGER, STRING[100]);
totalSQLTime '{profiler.total.sql.time}' = DATA LOCAL LONG (TEXT, TEXT, INTEGER, STRING[100]);  
totalUserInteractionTime '{profiler.total.user.interaction.time}' = DATA LOCAL LONG (TEXT, TEXT, INTEGER, STRING[100]);
callCount '{profiler.call.count}' = DATA LOCAL LONG (TEXT, TEXT, INTEGER, STRING[100]);
minTime '{profiler.min.time}' = DATA LOCAL LONG (TEXT, TEXT, INTEGER, STRING[100]);
maxTime '{profiler.max.time}' = DATA LOCAL LONG (TEXT, TEXT, INTEGER, STRING[100]);
squaresSum '{profiler.squares.sum}' = DATA LOCAL DOUBLE (TEXT, TEXT, INTEGER, STRING[100]);

totalTime '{profiler.total.time}' = DATA LONG (ProfileObject, ProfileObject, User, Form);
totalSQLTime '{profiler.total.sql.time}' = DATA LONG (ProfileObject, ProfileObject, User, Form);
totalUserInteractionTime '{profiler.total.user.interaction.time}' = DATA LONG (ProfileObject, ProfileObject, User, Form);
callCount '{profiler.call.count}' = DATA LONG (ProfileObject, ProfileObject, User, Form);
minTime '{profiler.min.time}' = DATA LONG (ProfileObject, ProfileObject, User, Form);
maxTime '{profiler.max.time}' = DATA LONG (ProfileObject, ProfileObject, User, Form);
squaresSum '{profiler.squares.sum}' = DATA DOUBLE (ProfileObject, ProfileObject, User, Form);

isStartedProfiler '{profiler.is.started.profiler}'  = DATA BOOLEAN ();
isStoppedProfiler '{profiler.is.stopped.profiler}' () = NOT isStartedProfiler();

onStarted() + {  isStartedProfiler() <- NULL; }

doStartProfiler '{profiler.start.profiler}' ()  INTERNAL  'lsfusion.server.physics.admin.profiler.action.StartProfilerAction';
startProfiler '{profiler.start.profiler}' ()  { 
    totalTime(ProfileObject p1, ProfileObject p2, User u, Form f) <- NULL;
    totalSQLTime(ProfileObject p1, ProfileObject p2, User u, Form f) <- NULL; 
    totalUserInteractionTime(ProfileObject p1, ProfileObject p2, User u, Form f) <- NULL; 
    callCount(ProfileObject p1, ProfileObject p2, User u, Form f) <- NULL; 
    minTime(ProfileObject p1, ProfileObject p2, User u, Form f) <- NULL; 
    maxTime(ProfileObject p1, ProfileObject p2, User u, Form f) <- NULL; 
    squaresSum(ProfileObject p1, ProfileObject p2, User u, Form f) <- NULL; 
    
    isStartedProfiler() <- TRUE;
    apply();
    
    doStartProfiler();
}

doStopProfiler '{profiler.stop.profiler}' ()  INTERNAL  'lsfusion.server.physics.admin.profiler.action.StopProfilerAction';

stopProfiler '{profiler.stop.profiler}' ()  { 
    doStopProfiler();
    isStartedProfiler() <- NULL;
    APPLY;
}

id(User user) = INTEGER(user AS User) MATERIALIZED INDEXED; 

writeProfilerBatch ()  { 
    FOR [ GROUP SUM 1 IF callCount(TEXT t1, TEXT t2, INTEGER u, STRING[100] f) BY t1](TEXT t1) AND NOT profileObject(t1) INLINE NEW p = ProfileObject DO {
        text(p) <- t1;    
    }     

    FOR [ GROUP SUM 1 IF callCount(TEXT t1, TEXT t2, INTEGER u, STRING[100] f) BY t2](TEXT t2) AND NOT profileObject(t2) INLINE NEW p = ProfileObject DO {
        text(p) <- t2;    
    }     
    
    FOR ProfileObject p1 == profileObject(TEXT t1) AND ProfileObject p2 == profileObject(TEXT t2) AND callCount(t1, t2, INTEGER u, STRING[100] f) 
            AND u == id(User user) AND (Form form == form(f) OR (f == '' AND form == NoForm.instance)) INLINE DO {
        totalTime(p1, p2, user, form) <- totalTime(p1, p2, user, form) (+) totalTime(t1, t2, u, f); 
        totalSQLTime(p1, p2, user, form) <- totalSQLTime(p1, p2, user, form) (+) totalSQLTime(t1, t2, u, f); 
        totalUserInteractionTime(p1, p2, user, form) <- totalUserInteractionTime(p1, p2, user, form) (+) totalUserInteractionTime(t1, t2, u, f); 
        callCount(p1, p2, user, form) <- callCount(p1, p2, user, form) (+) callCount(t1, t2, u, f); 
        minTime(p1, p2, user, form) <- MIN minTime(p1, p2, user, form), minTime(t1, t2, u, f); 
        maxTime(p1, p2, user, form) <- MAX maxTime(p1, p2, user, form), maxTime(t1, t2, u, f); 
        squaresSum(p1, p2, user, form) <- squaresSum(p1, p2, user, form) (+) squaresSum(t1, t2, u, f);     
    }   
     
    apply();
}

CLASS ProfilerIndex {
    callCount '{profiler.call.count}',
    totalTime '{profiler.profiler.index.total.time}',
    totalTimeNoWait '{profiler.profiler.index.total.time.no.wait}',
    totalJavaTime '{profiler.profiler.index.total.java.time}',
    totalSQLTime '{profiler.total.sql.time}',
    inherentTimeNoWait '{profiler.profiler.index.inherent.time.no.wait}',
    inherentJavaTime '{profiler.profiler.index.inherent.java.time}',
    inherentSQLTime '{profiler.profiler.index.inherent.sql.time}',
    totalUserInteractionTime '{profiler.total.user.interaction.time}',
    minTime '{profiler.min.time}',
    maxTime '{profiler.max.time}',
    averageTime '{profiler.profiler.index.average.time}',
    averageSquaredTime '{profiler.profiler.index.average.squared.time}'
}

FORM profilerIndex '{profiler.profiler.index}'
    OBJECTS f=ProfilerIndex
    PROPERTIES(f) staticCaption READONLY
    LIST ProfilerIndex OBJECT f
;

DESIGN profilerIndex {
    PROPERTY (staticCaption(f)){caption = '{profiler.profiler.index.name}'; }
}

active '{profiler.active.profiler.index}' = DATA LOCAL NESTED BOOLEAN (ProfilerIndex);
order  = DATA LOCAL NESTED ProfilerIndex ();
nameOrder '{profiler.name.order}' = staticCaption(order());

value '{profiler.value.object.object.user.form.index}'(ProfileObject p1, ProfileObject p2, User u, Form f, ProfilerIndex pi) = CASE EXCLUSIVE 
    WHEN pi == ProfilerIndex.callCount THEN callCount(p1, p2, u, f)
    WHEN pi == ProfilerIndex.totalTime THEN NUMERIC[20,3](totalTime(p1, p2, u, f)) / 1000000
    WHEN pi == ProfilerIndex.totalSQLTime THEN NUMERIC[20,3](totalSQLTime(p1, p2, u, f)) / 1000000
    WHEN pi == ProfilerIndex.totalUserInteractionTime THEN NUMERIC[20,3](totalUserInteractionTime(p1, p2, u, f)) / 1000000
    WHEN pi == ProfilerIndex.minTime THEN NUMERIC[20,3](minTime(p1, p2, u, f)) / 1000000
    WHEN pi == ProfilerIndex.maxTime THEN NUMERIC[20,3](maxTime(p1, p2, u, f)) / 1000000
    WHEN pi == ProfilerIndex.averageTime THEN NUMERIC[20,3](totalTime(p1, p2, u, f)) / callCount(p1, p2, u, f) / 1000000
    WHEN pi == ProfilerIndex.averageSquaredTime THEN NUMERIC[20,3](sqrt(squaresSum(p1, p2, u, f) / callCount(p1, p2, u, f)) / 1000000)
    WHEN pi == ProfilerIndex.totalTimeNoWait THEN NUMERIC[20,3](totalTime(p1, p2, u, f) (-) totalUserInteractionTime(p1, p2, u, f)) / 1000000
    WHEN pi == ProfilerIndex.totalJavaTime THEN NUMERIC[20,3](totalTime(p1, p2, u, f) (-) totalUserInteractionTime(p1, p2, u, f) (-) totalSQLTime(p1, p2, u, f)) / 1000000;
    
order '{profiler.order}'(ProfileObject p1, ProfileObject p2, User u, Form f) = value(p1, p2, u, f, order());

dataInFilter '{profiler.in.filter}' = DATA LOCAL NESTED BOOLEAN (User);
inFilter '{profiler.in.filter}' = DATA LOCAL NESTED BOOLEAN (UserRole);
overFilter '{profiler.in.filter}' = OVERRIDE dataInFilter(User u), (GROUP SUM 1 IF has(u, UserRole r) AND inFilter(r)) > 0;
inFilter '{profiler.in.filter}' (User u) = OVERRIDE overFilter(u), NOT (GROUP SUM 1 IF overFilter(User uu)) AND u IS User;
background(User u) = IF inFilter(u) THEN RGB(220,220,220);

dataFilter '{profiler.in.filter}' = DATA LOCAL NESTED BOOLEAN (Form);
countDataFilterForm = GROUP SUM 1 IF dataFilter(Form f);
inFilter '{profiler.in.filter}' (Form f) = OVERRIDE dataFilter(f), f IS Form AND NOT countDataFilterForm();
background(Form u) = IF inFilter(u) THEN RGB(220,220,220);

inFilter '{profiler.in.filter}' (User u, Form f) = inFilter(u) AND inFilter(f);

link '{profiler.link}' (ProfileObject up, ProfileObject down) = GROUP SUM callCount(down, up, User u, Form f) IF inFilter(u, f);

value '{profiler.value.object.object.index}' (ProfileObject up, ProfileObject down, ProfilerIndex pi) = CASE WHEN pi != ProfilerIndex.minTime AND pi != ProfilerIndex.maxTime AND pi != ProfilerIndex.averageTime AND pi != ProfilerIndex.averageSquaredTime  
    THEN (GROUP SUM value(down, up, User u, Form f, pi) IF inFilter(u, f));
order '{profiler.order}'(ProfileObject p1, ProfileObject p2) = value(p1, p2, order());

downValue '{profiler.down.value}' (ProfileObject down, ProfilerIndex pi) = GROUP SUM value(ProfileObject up, down, pi);
upValue '{profiler.up.value}' (ProfileObject up, ProfilerIndex pi) = GROUP SUM value(up, ProfileObject down, pi);
value '{profiler.value.object.index}' (ProfileObject po, ProfilerIndex pi) = CASE 
    WHEN pi == ProfilerIndex.callCount OR pi == ProfilerIndex.totalTime OR pi == ProfilerIndex.totalSQLTime OR pi == ProfilerIndex.totalUserInteractionTime OR pi == ProfilerIndex.totalTimeNoWait OR pi == ProfilerIndex.totalJavaTime 
        THEN downValue(po, pi)
    WHEN pi == ProfilerIndex.inherentTimeNoWait THEN downValue(po, ProfilerIndex.totalTimeNoWait) (-) upValue(po, ProfilerIndex.totalTimeNoWait)
    WHEN pi == ProfilerIndex.inherentSQLTime THEN downValue(po, ProfilerIndex.totalSQLTime) (-) upValue(po, ProfilerIndex.totalSQLTime)
    WHEN pi == ProfilerIndex.inherentJavaTime THEN downValue(po, ProfilerIndex.totalJavaTime) (-) upValue(po, ProfilerIndex.totalJavaTime);
order '{profiler.order}' (ProfileObject po) = value(po, order());

callCount(ProfileObject po) = value(po, ProfilerIndex.callCount);
totalTime(ProfileObject po) = value(po,ProfilerIndex.totalTime);
totalUserInteractionTime(ProfileObject po) = value(po,ProfilerIndex.totalUserInteractionTime);
totalSQLTime(ProfileObject po) = value(po,ProfilerIndex.totalSQLTime);
totalTimeNoWait(ProfileObject po) = value(po,ProfilerIndex.totalTimeNoWait);
totalJavaTime(ProfileObject po) = value(po,ProfilerIndex.totalJavaTime);
inherentSQLTime(ProfileObject po) = value(po,ProfilerIndex.inherentSQLTime);
inherentTimeNoWait(ProfileObject po) = value(po,ProfilerIndex.inherentTimeNoWait);
inherentJavaTime(ProfileObject po) = value(po,ProfilerIndex.inherentJavaTime);


isCallCount() = active(ProfilerIndex.callCount);
isTotalTime() = active(ProfilerIndex.totalTime);
isTotalSQLTime() = active(ProfilerIndex.totalSQLTime);
isTotalUserInteractionTime() = active(ProfilerIndex.totalUserInteractionTime);
isInherentTimeNoWait() = active(ProfilerIndex.inherentTimeNoWait);
isInherentSQLTime() = active(ProfilerIndex.inherentSQLTime);
isInherentJavaTime() = active(ProfilerIndex.inherentJavaTime);
isTotalTimeNoWait() = active(ProfilerIndex.totalTimeNoWait);
isTotalJavaTime() = active(ProfilerIndex.totalJavaTime);

//user-form
downValue '{profiler.down.value}' (ProfileObject down, User u, Form f, ProfilerIndex pi) = GROUP SUM value(down, ProfileObject up, u, f, pi);
upValue '{profiler.up.value}' (ProfileObject up, User u, Form f, ProfilerIndex pi) = GROUP SUM value(ProfileObject down, up, u, f, pi);
value '{profiler.value.object.user.form.index}' (ProfileObject po, User u, Form f, ProfilerIndex pi) = downValue(po, u, f, pi) (-) upValue(po, u, f, pi);
order '{profiler.order}' (ProfileObject po, User u, Form f) = value(po, u, f, order());

//interface
dataSelectedTop = DATA LOCAL ProfileObject();
selectedTop = OVERRIDE dataSelectedTop(), ProfileObject.top;
nameSelectedTop '{profiler.name.selected.top}' = STRING[1000](text(selectedTop()));

pathTo(ProfileObject a, ProfileObject b) = RECURSION a AS ProfileObject == b STEP TRUE IF link($b, b) CYCLES YES;
pathFrom(ProfileObject a, ProfileObject b) = RECURSION a AS ProfileObject == b STEP TRUE IF link(b, $b) CYCLES YES;

parent(ProfileObject down) = IF NOT down == selectedTop() THEN 
        OVERRIDE (GROUP LAST ProfileObject up IF link(up, down) AND pathTo(selectedTop(), up) ORDER order(up, down)), 
            ProfileObject.top IF down IS ProfileObject;
        
child(ProfileObject up) = IF NOT up == selectedTop() THEN 
        OVERRIDE (GROUP LAST ProfileObject down IF link(up, down) AND pathFrom(selectedTop(), down) ORDER order(up, down)),
            ProfileObject.top IF up IS ProfileObject;
       
initFilters()  { 
    order() <- ProfilerIndex.totalTimeNoWait;
    active(ProfilerIndex i) <- TRUE WHERE i == ProfilerIndex.totalTimeNoWait OR i == ProfilerIndex.totalSQLTime OR i == ProfilerIndex.inherentJavaTime OR i == ProfilerIndex.callCount;
}

toString = FORMULA BPSTRING[100] 'CAST($1 AS character(100))';
toBoolean(s) = IF s == 'true' THEN TRUE;

changeProfilingSettingsInteger(Setting r, INTEGER value)  { 
   baseValue(r) <- toString(value);
}
changeProfilingSettingsBoolean(Setting r, BOOLEAN value)  { 
    baseValue(r) <- IF value THEN 'true' ELSE 'false';
}

explainNoAnalyze '{profiler.explain.no.analyze}' = DATA BOOLEAN ();
WHEN CHANGED(explainNoAnalyze()) DO {
    changeProfilingSettingsBoolean(setting('explainNoAnalyze'), explainNoAnalyze());
}
explainJavaStack '{profiler.explain.java.stack}' = DATA BOOLEAN ();
WHEN CHANGED(explainJavaStack()) DO {
    changeProfilingSettingsBoolean(setting('explainJavaStack'), explainJavaStack());
}
explainCompile '{profiler.explain.compile}' = DATA BOOLEAN ();
WHEN CHANGED(explainCompile()) DO {
    changeProfilingSettingsBoolean(setting('explainCompile'), explainCompile());
}
explainThreshold '{profiler.explain.threshold}' = DATA INTEGER ();
WHEN CHANGED(explainThreshold()) DO {
    changeProfilingSettingsInteger(setting('explainThreshold'), explainThreshold());
}

WHEN CHANGED(value(Setting r, NULL)) DO {
    CASE
        WHEN name(r) == 'explainNoAnalyze' THEN 
            explainNoAnalyze() <- toBoolean(value(r, NULL));
        WHEN name(r) == 'explainJavaStack' THEN 
            explainJavaStack() <- toBoolean(value(r, NULL));
        WHEN name(r) == 'explainCompile' THEN 
            explainCompile() <- toBoolean(value(r, NULL));
        WHEN name(r) == 'explainThreshold' THEN 
            explainThreshold() <- toInteger(value(r, NULL));
}
        
FORM profiler '{profiler.profiler}'

    OBJECTS cu = CustomUser
    PROPERTIES(cu) PANEL explainAnalyzeMode, explainAppEnabled
    FILTERS cu == currentUser()
    PROPERTIES() explainNoAnalyze, explainJavaStack, explainCompile, explainThreshold
    
    PROPERTIES() startProfiler SHOWIF isStoppedProfiler(), stopProfiler SHOWIF isStartedProfiler(), nameOrder
  
//settings
    OBJECTS pi = ProfilerIndex
    PROPERTIES (pi) active, staticCaption READONLY

    OBJECTS r = UserRole
    PROPERTIES (r) inFilter
    PROPERTIES (r) READONLY name
    
    OBJECTS u = User
    PROPERTIES (u) BACKGROUND background(u) overFilter, name READONLY, userRoles READONLY  
    
    OBJECTS f = Form
    PROPERTIES (f)  BACKGROUND background(f) dataFilter, canonicalName READONLY

//list
    OBJECTS ihs = ProfilerIndex GRID
    FILTERS active(ihs)

    OBJECTS ohs = ProfileObject
    PROPERTIES READONLY text(ohs), order(ohs), value(ohs, ihs) COLUMNS (ihs) HEADER staticCaption(ihs)
    ORDERS order(ohs) DESC
    FILTERS order(ohs)

//raw data
    OBJECTS i = ProfilerIndex GRID
    FILTERS active(i)
    
    OBJECTS g = (po1 = ProfileObject, po2 = ProfileObject, user = User, form = Form)
    PROPERTIES(po2) READONLY text
    PROPERTIES(po1) READONLY text 
    PROPERTIES(user) READONLY name
    PROPERTIES(form) READONLY canonicalName
    PROPERTIES(po1, po2, user, form) READONLY order
    PROPERTIES(po1, po2, user, form, i) READONLY value COLUMNS (i) HEADER staticCaption(i)
    ORDERS order(po1, po2, user, form) DESC 
    FILTERS order(po1, po2, user, form)

//tree
    PROPERTIES nameSelectedTop() 
    
    TREE pT down=ProfileObject PARENT parent(down)
    PROPERTIES (down) READONLY text, order, totalTimeNoWait SHOWIF isTotalTimeNoWait(), totalJavaTime SHOWIF isTotalJavaTime(), 
                        totalSQLTime SHOWIF isTotalSQLTime(), inherentTimeNoWait SHOWIF isInherentTimeNoWait(), inherentJavaTime SHOWIF isInherentJavaTime()
    ORDERS order(down) DESC
    
    OBJECTS iupToDown = ProfilerIndex GRID
    FILTERS active(iupToDown)
    
    OBJECTS upToDown=ProfileObject
    PROPERTIES (upToDown) READONLY text
    PROPERTIES (down, upToDown) READONLY order
    PROPERTIES (down, upToDown, iupToDown) READONLY value COLUMNS (iupToDown) HEADER staticCaption(iupToDown)
    ORDERS order(down, upToDown) DESC
    FILTERS order(down, upToDown)
    FILTERGROUP  upToDown
        FILTER '{profiler.form.profiler.filter.additional}' parent(upToDown) != down 'F6'
    
    OBJECTS idownWithUsers = ProfilerIndex GRID
    FILTERS active(idownWithUsers)    
    
    OBJECTS downWithUsers = (downWD = ProfileObject, uWD = User, fWD = Form)
    PROPERTIES READONLY text(downWD), name(uWD), canonicalName(fWD)
    PROPERTIES (downWD, uWD, fWD) READONLY order
    PROPERTIES (downWD, uWD, fWD, idownWithUsers) READONLY value
    FILTERS downWD == down, order(downWD, uWD, fWD)
    
   
    
    TREE pB up=ProfileObject PARENT child(up)
    PROPERTIES (up) READONLY text, order, totalTimeNoWait SHOWIF isTotalTimeNoWait(), totalJavaTime SHOWIF isTotalJavaTime(), 
                             totalSQLTime SHOWIF isTotalSQLTime(), inherentTimeNoWait SHOWIF isInherentTimeNoWait(), inherentJavaTime SHOWIF isInherentJavaTime()
    ORDERS order(up) DESC
    
    OBJECTS idownToUp = ProfilerIndex GRID
    FILTERS active(iupToDown)
    
    OBJECTS downToUp=ProfileObject
    PROPERTIES (downToUp) READONLY text
    PROPERTIES (downToUp, up) READONLY order
    PROPERTIES (downToUp, up, iupToDown) READONLY value COLUMNS (idownToUp) HEADER staticCaption(idownToUp)
    ORDERS order(downToUp, up) DESC
    FILTERS order(downToUp, up)
    FILTERGROUP  downToUp
        FILTER '{profiler.form.profiler.filter.additional}' child(downToUp) != up 'F6'
    
    EVENTS 
        ON INIT initFilters()
;

DESIGN profiler {
    PROPERTY (text(po2)) {
        caption = '{profiler.form.profiler.caption.text}';
    }
    
    NEW tab {
        tabbed = TRUE;
        fill = 1;
        NEW sql {
            caption = 'SQL';
            NEW cubox {
                caption = '{profiler.form.profiler.caption.current.user}';
                MOVE PROPERTY(explainAnalyzeMode(cu));
            }
            NEW settingsBox {
                caption = '{profiler.form.profiler.caption.settings}';
                MOVE PROPERTY(explainNoAnalyze());
                MOVE PROPERTY(explainJavaStack());
                MOVE PROPERTY(explainCompile());
                MOVE PROPERTY(explainThreshold());
             }
        }
        NEW first {
            caption = '{profiler.form.profiler.caption.settings}';
            MOVE PROPERTY (startProfiler());
            MOVE PROPERTY (stopProfiler());
            MOVE PROPERTY (nameOrder());
            MOVE BOX(pi){fill = 1;};
            NEW options {
                fill = 2;
                horizontal = TRUE;
                NEW user {
                    fill = 1;
                    MOVE BOX(r);
                    MOVE BOX(u);        
                }
                MOVE BOX(f){fill = 1;};
            }
        }
        NEW hotSpots {
            caption = '{profiler.form.profiler.caption.call.list}';
            MOVE BOX(ohs);
        }
        NEW call {
            caption = '{profiler.form.profiler.caption.call.tree}';
            MOVE PROPERTY (nameSelectedTop());
            NEW split {
                horizontal = TRUE;
                fill = 1;
                NEW pT{
                    fill = 1;
                    MOVE BOX(TREE pT){fill = 2;};
                    NEW tabDownUsers{
                        tabbed = TRUE;
                        fill = 1;
                        MOVE BOX(upToDown) {caption = '{profiler.form.profiler.caption.up.to.down}';};
                        MOVE BOX(downWithUsers) {caption = '{profiler.form.profiler.caption.down.with.users}';};
                    }
                }
                NEW pB {
                    fill = 1;
                    MOVE BOX(TREE pB){fill = 2;};
                    MOVE BOX(downToUp){fill = 1;};
                }
            }
        }
        NEW raw {
            caption = '{profiler.form.profiler.caption.row.data}';
            MOVE BOX(g);
        }
    }
    MOVE TOOLBARBOX;
}

setSelected '{profiler.form.profiler.caption.view.call.tree}'(ProfileObject po)  { 
    dataSelectedTop() <- po;
    ACTIVATE TAB profiler.call;
} ASON CONTEXTMENU text[ProfileObject];

NAVIGATOR {
    performance {
        NEW profiler;
    }
}
