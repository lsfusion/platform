MODULE ProcessMonitor;

REQUIRE Authentication, Utils, Time;

CLASS ProcessType '{process.monitor.process.type}' {
    all '{process.monitor.process.type.all}',
    activeAll '{process.monitor.process.type.active.all}',
    activeSQL '{process.monitor.process.type.active.sql}',
    activeJava '{process.monitor.process.type.active.java}'
}

FORM processTypes '{process.monitor.process.types}'
    OBJECTS t = ProcessType
    PROPERTIES(t) READONLY staticCaption
    
    LIST ProcessType OBJECT t
;

CLASS StateProcess '{process.monitor.status.process}' {
    active '{process.monitor.status.process.active}',
    idle '{process.monitor.status.process.idle}'
}

updateProcessMonitorAction '{process.monitor.update.process.monitor.action}'  INTERNAL  'lsfusion.server.physics.admin.monitor.action.UpdateProcessMonitorAction' () TOOLBAR;
killJavaProcess '{process.monitor.kill.java.process}'  INTERNAL  'lsfusion.server.physics.admin.monitor.action.KillJavaProcessAction' (STRING[10]);
killSQLProcess '{process.monitor.kill.sql.process}'  INTERNAL  'lsfusion.server.physics.admin.monitor.action.KillSQLProcessAction' (STRING[10]);
cancelJavaProcess '{process.monitor.cancel.java.process}'  INTERNAL  'lsfusion.server.physics.admin.monitor.action.CancelJavaProcessAction' (STRING[10]);
cancelSQLProcess '{process.monitor.cancel.sql.process}'  INTERNAL  'lsfusion.server.physics.admin.monitor.action.CancelSQLProcessAction' (STRING[10]);

processType '{process.monitor.process.type}'= DATA LOCAL ProcessType();
nameProcessType '{process.monitor.process.type}' () = staticName(processType()) CHARWIDTH 15;
captionProcessType '{process.monitor.process.type}' () = staticCaption(processType());
WHEN LOCAL CHANGED (processType()) DO EXEC updateProcessMonitorAction();
 
idThreadProcess '{process.monitor.id.thread.process}' = DATA LOCAL STRING[10] (STRING[10]);
threadNameSQLProcess '{process.monitor.thread.name.sql.process}' = DATA LOCAL STRING[100] (STRING[10]);
threadStackTraceSQLProcess '{process.monitor.thread.stack.trace.sql.process}' = DATA LOCAL TEXT (STRING[10]);

nameComputerJavaProcess '{process.monitor.name.computer.java.process}' = DATA LOCAL STRING[100] (STRING[10]);
computerProcess '{process.monitor.computer.process}' = DATA LOCAL LONG (STRING[10]);
objValue (Computer i) = LONG (i AS Computer);
computerObject (value) = GROUP AGGR Computer computer BY objValue(computer);
nameComputerSQL '{process.monitor.name.computer.sql}' (STRING[10] process) = hostname(computerObject(computerProcess(process)));
nameComputer '{process.monitor.name.computer}' (STRING[10] process) = OVERRIDE nameComputerSQL(process), nameComputerJavaProcess(process);
  
nameUserJavaProcess '{process.monitor.name.user.java.process}' = DATA LOCAL STRING[100] (STRING[10]);
userProcess '{process.monitor.user.process}' = DATA LOCAL LONG (STRING[10]);
objValue (User i) = LONG (i AS User);
userObject (value) = GROUP AGGR User user BY objValue(user);
nameUserSQL '{process.monitor.name.user.process.sql}' (STRING[10] process) = name(userObject(userProcess(process)));
nameUser '{process.monitor.name.user}' (STRING[10] process) = OVERRIDE nameUserSQL(process), nameUserJavaProcess(process);
dateTimeCallProcess '{process.monitor.date.time.call.process}' = DATA LOCAL DATETIME (STRING[10]);

idSQLProcess '{process.monitor.id.sql.process}' = DATA LOCAL INTEGER (STRING[10]);
querySQLProcess '{process.monitor.query.sql.process}' = DATA LOCAL TEXT (STRING[10]);
fullQuerySQLProcess '{process.monitor.full.query.sql.process}' = DATA LOCAL TEXT (STRING[10]);
copyFullQuerySQLProcess '{process.monitor.copy.full.query.sql.process}' (STRING[10] i)  INTERNAL  'lsfusion.server.physics.admin.monitor.action.CopyFullQuerySQLProcessAction' (STRING[10]);
addressUserSQLProcess '{process.monitor.address.user.sql.process}' = DATA LOCAL STRING[100] (STRING[10]);
debugInfoSQLProcess '{process.monitor.debug.info.sql.process}' = DATA LOCAL TEXT (STRING[10]);
dateTimeSQLProcess '{process.monitor.date.time.sql.process}' = DATA LOCAL DATETIME (STRING[10]);
isActiveSQLProcess '{process.monitor.is.active.sql.process}' = DATA LOCAL BOOLEAN (STRING[10]);
inTransactionSQLProcess '{process.monitor.in.transaction.sql.process}' = DATA LOCAL BOOLEAN (STRING[10]);
startTransactionSQLProcess '{process.monitor.start.transaction.sql.process}' = DATA LOCAL DATETIME (STRING[10]);
attemptCountSQLProcess '{process.monitor.attempt.count.sql.process}' = DATA LOCAL STRING[30] (STRING[10]);
statusSQLProcess '{process.monitor.status.sql.process}' = DATA LOCAL TEXT (STRING[10]);
statusMessageSQLProcess '{process.monitor.status.message.sql.process}' = DATA LOCAL TEXT (STRING[10]);
waitEventTypeSQLProcess '{process.monitor.wait.event.type.sql.process}' = DATA LOCAL TEXT (STRING[10]);
waitEventSQLProcess '{process.monitor.wait.event.sql.process}' = DATA LOCAL TEXT (STRING[10]);

lsfStackTraceProcess '{process.monitor.lsf.stack.trace.process}' = DATA LOCAL TEXT (STRING[10]);
lastThreadAllocatedBytesProcess '{process.monitor.last.thread.allocated.bytes.process}' = DATA LOCAL LONG (STRING[10]);
threadAllocatedBytesProcess '{process.monitor.thread.allocated.bytes.process}' = DATA LOCAL LONG (STRING[10]);

stackTraceJavaProcess '{process.monitor.stack.trace.java.process}' = DATA LOCAL TEXT (STRING[10]);
hasStackTraceJavaProcess (STRING[10] i) = stackTraceJavaProcess(i) AND i IS STRING[10];
nameJavaProcess '{process.monitor.name.java.process}' = DATA LOCAL STRING[100] (STRING[10]);
statusJavaProcess '{process.monitor.status.java.process}' = DATA LOCAL STRING[100] (STRING[10]);
lockNameJavaProcess '{process.monitor.lock.name.java.process}' = DATA LOCAL STRING[100] (STRING[10]);

lockOwnerIdProcess '{process.monitor.lock.owner.id.process}' = DATA LOCAL STRING[10] (STRING[10]);
lockOwnerNameProcess '{process.monitor.lock.owner.name.process}' = DATA LOCAL STRING[100] (STRING[10]);
isDisabledNestLoopProcess '{process.monitor.is.disabled.nest.loop.process}' = DATA LOCAL BOOLEAN (STRING[10]);
queryTimeoutProcess '{process.monitor.query.timeout.process}' = DATA LOCAL INTEGER (STRING[10]);
   
processThread (id) = GROUP AGGR STRING[10] process WHERE process IS STRING[10] BY idThreadProcess(process);
threadOwnerProcess (STRING[10] i) = processThread(lockOwnerIdProcess(i));
                                                                                                                                                                                                                                                          
blockingProcess '{process.monitor.blocking.process}' (STRING[10] child, STRING[10] parent) = RECURSION 1l IF idThreadProcess(child) AND parent == child
                                                        STEP 1l IF parent == threadOwnerProcess($parent);                                                                                                                                                                                                                                                       
isBlockingProcess '{process.monitor.is.blocking.process}' (STRING[10] child, STRING[10] parent) = TRUE IF blockingProcess(child, parent);
sumPlusOneBlocked  (STRING[10] parent) = GROUP SUM 1 IF isBlockingProcess(STRING[10] child, parent);
sumBlocked '{process.monitor.sum.blocked}' (STRING[10] process) = sumPlusOneBlocked(process) - 1;
deadlock (STRING[10] parent) = GROUP SUM 1 IF isBlockingProcess(parent, STRING[10] child) AND statusJavaProcess(child) != 'BLOCKED';
isDeadlock '{process.monitor.is.dead.lock}' (STRING[10] process) = NOT deadlock(process) AND process IS STRING[10];
sumPlusOneBlocking '{process.monitor.sum.plus.one.blocking}' (STRING[10] parent) = GROUP SUM 1 IF isBlockingProcess(parent, STRING[10] child);
sumBlocking '{process.monitor.sum.blocking}' (STRING[10] process) = sumPlusOneBlocking(process) - 1;

activeSQLProcess (STRING[10] i) = querySQLProcess(i) AND (isActiveSQLProcess(i) OR inTransactionSQLProcess(i));
activeJavaBlockingProcess (STRING[10] i) = statusJavaProcess(i) == 'RUNNABLE' AND hasStackTraceJavaProcess(i);
activeJavaProcess (STRING[10] i) = activeJavaBlockingProcess(i)
                                   AND NOT startsWith(stackTraceJavaProcess(i), 'java.net.DualStackPlainSocketImpl')
                                   AND NOT startsWith(stackTraceJavaProcess(i), 'sun.awt.windows.WToolkit.eventLoop')
                                   AND NOT startsWith(stackTraceJavaProcess(i), 'java.net.SocketInputStream.socketRead0')
                                   AND NOT startsWith(stackTraceJavaProcess(i), 'sun.management.ThreadImpl.dumpThreads0')
                                   AND NOT startsWith(stackTraceJavaProcess(i), 'java.net.SocketOutputStream.socketWrite')                                        
                                   AND NOT startsWith(stackTraceJavaProcess(i), 'java.net.PlainSocketImpl')
                                   AND NOT startsWith(stackTraceJavaProcess(i), 'java.io.FileInputStream.readBytes')
                                   AND NOT startsWith(stackTraceJavaProcess(i), 'java.lang.UNIXProcess.waitForProcessExit');
activeBlockingProcess '{process.monitor.status.process.active}' (STRING[10] i) = activeSQLProcess(i) OR activeJavaBlockingProcess(i);
activeProcess '{process.monitor.status.process.active}' (STRING[10] i) = activeSQLProcess(i) OR activeJavaProcess(i);

blockedProcess '{process.monitor.blocked.process}' (STRING[10] i) = statusJavaProcess(i) == 'BLOCKED' OR lockOwnerIdProcess(i);             

intToColor = FORMULA '(256*256*($1)+256*($2)+($3))::integer';

deltaDateTimeProcess(STRING[10] i) = subtractSeconds(dateTimeSQLProcess(i), currentDateTime());
deltaTransactionProcess(STRING[10] i) = subtractSeconds(startTransactionSQLProcess(i), currentDateTime());

red(STRING[10] i) = 255 IF i IS STRING[10];
green(STRING[10] i) = CASE
                        WHEN deltaTransactionProcess(i) > 90 THEN 105
                        WHEN deltaTransactionProcess(i) > 80 THEN 125
                        WHEN deltaTransactionProcess(i) > 70 THEN 145
                        WHEN deltaTransactionProcess(i) > 60 THEN 165
                        WHEN deltaTransactionProcess(i) > 50 THEN 185
                        WHEN deltaTransactionProcess(i) > 40 THEN 205
                        WHEN deltaTransactionProcess(i) > 30 THEN 225
                        WHEN deltaTransactionProcess(i) > 20 THEN 245
                        WHEN i IS STRING[10] THEN 255;
blue(STRING[10] i) = CASE
                        WHEN deltaDateTimeProcess(i) > 90 THEN 0
                        WHEN deltaDateTimeProcess(i) > 80 THEN 30
                        WHEN deltaDateTimeProcess(i) > 70 THEN 60
                        WHEN deltaDateTimeProcess(i) > 60 THEN 90
                        WHEN deltaDateTimeProcess(i) > 50 THEN 120
                        WHEN deltaDateTimeProcess(i) > 40 THEN 150
                        WHEN deltaDateTimeProcess(i) > 30 THEN 180
                        WHEN deltaDateTimeProcess(i) > 20 THEN 210
                        WHEN i IS STRING[10] THEN 240;
sqlColorProcess(STRING[10] i) = COLOR(intToColor(red(i), green(i), blue(i)));
backgroundProcess(STRING[10] i) = IF isActiveSQLProcess(i) OR startsWith(idThreadProcess(i), 's') THEN sqlColorProcess(i) ELSE RGB(240, 255, 255);  
                   
cancelProcess '{process.monitor.cancel.process}' (STRING[10] i)  { 
    IF idSQLProcess(i) THEN cancelSQLProcess(i); ELSE cancelJavaProcess(i);
    updateProcessMonitorAction();
}           
killProcess '{process.monitor.kill.process}' (STRING[10] i)  { 
    IF isActiveSQLProcess(i) THEN killSQLProcess(i); ELSE killJavaProcess(i);
    updateProcessMonitorAction();
}
showExtraButtons(STRING[10] i) = idSQLProcess(i) AND NOT startsWith(idThreadProcess(i), 's');
                      
setDefaultProcessType()  { 
    processType() <- ProcessType.activeSQL;
}    

FORM processMonitor '{process.monitor.form.process.monitor}'
    OBJECTS i = STRING[10]
    PROPERTIES(i) READONLY BACKGROUND backgroundProcess(i) activeProcess, idThreadProcess, nameComputer, nameUser,
                           dateTimeCallProcess, querySQLProcess, debugInfoSQLProcess, dateTimeSQLProcess,
                           isActiveSQLProcess, inTransactionSQLProcess, startTransactionSQLProcess, attemptCountSQLProcess,
                           statusSQLProcess, statusMessageSQLProcess, waitEventTypeSQLProcess, waitEventSQLProcess,
                           addressUserSQLProcess, lsfStackTraceProcess, threadAllocatedBytesProcess, 
                           lastThreadAllocatedBytesProcess, nameJavaProcess, threadNameSQLProcess, statusJavaProcess,
                           lockNameJavaProcess, stackTraceJavaProcess, threadStackTraceSQLProcess, lockOwnerIdProcess, lockOwnerNameProcess, isDisabledNestLoopProcess,
                           queryTimeoutProcess, idSQLProcess, copyFullQuerySQLProcess CHANGEABLE GRID
    PROPERTIES(i) TOOLBAR cancelProcess, killProcess, cancelJavaProcess SHOWIF showExtraButtons(i), killJavaProcess SHOWIF showExtraButtons(i)                       
    FILTERS idThreadProcess(i)
    FILTERGROUP idleInTransaction FILTER '{process.monitor.form.process.monitor.filter.idle}' statusSQLProcess(i) == 'idle in transaction'
    EVENTS ON INIT setDefaultProcessType()
    
    TREE blocking i2 = STRING[10] PARENT threadOwnerProcess(i2)
    PROPERTIES(i2) READONLY BACKGROUND backgroundProcess(i2) sumBlocked,
                            activeProcess, idThreadProcess, nameComputer, nameUser, dateTimeCallProcess,
                            querySQLProcess, debugInfoSQLProcess, dateTimeSQLProcess, isActiveSQLProcess, inTransactionSQLProcess, 
                            startTransactionSQLProcess, attemptCountSQLProcess, statusSQLProcess, statusMessageSQLProcess,
                            waitEventTypeSQLProcess, waitEventSQLProcess, addressUserSQLProcess, lsfStackTraceProcess, threadAllocatedBytesProcess, 
                            lastThreadAllocatedBytesProcess, threadNameSQLProcess, threadStackTraceSQLProcess, nameJavaProcess, statusJavaProcess,
                            lockNameJavaProcess, stackTraceJavaProcess, lockOwnerIdProcess, lockOwnerNameProcess, isDisabledNestLoopProcess,
                            queryTimeoutProcess, idSQLProcess, copyFullQuerySQLProcess CHANGEABLE GRID 
    PROPERTIES(i2) TOOLBAR cancelProcess, killProcess, cancelJavaProcess SHOWIF isActiveSQLProcess(i2), killJavaProcess SHOWIF isActiveSQLProcess(i2)  
    FILTERS idThreadProcess(i2)
    FILTERGROUP filter FILTER '{process.monitor.form.process.monitor.filter.filter}' (activeBlockingProcess(i2) AND sumBlocked(i2) > 0) OR (lockOwnerIdProcess(i2) AND lockOwnerIdProcess(i2) != '-1') DEFAULT   
    
    OBJECTS blocked = STRING[10], blocking = STRING[10]
    PROPERTIES(blocked) READONLY idThreadProcess, isDeadlock, 
                                 sumBlocking, nameComputer, nameUser, dateTimeCallProcess, 
                                 querySQLProcess, debugInfoSQLProcess, dateTimeSQLProcess, isActiveSQLProcess, inTransactionSQLProcess, 
                                 startTransactionSQLProcess, attemptCountSQLProcess, statusSQLProcess, statusMessageSQLProcess,
                                 waitEventTypeSQLProcess, waitEventSQLProcess, lsfStackTraceProcess, threadAllocatedBytesProcess, 
                                 lastThreadAllocatedBytesProcess, threadNameSQLProcess, threadStackTraceSQLProcess, nameJavaProcess, statusJavaProcess, 
                                 lockNameJavaProcess, stackTraceJavaProcess, lockOwnerIdProcess, lockOwnerNameProcess, isDisabledNestLoopProcess, 
                                 queryTimeoutProcess, idSQLProcess, copyFullQuerySQLProcess CHANGEABLE GRID 
    PROPERTIES(blocking) READONLY activeProcess, idThreadProcess, sumBlocking, nameComputer, nameUser, dateTimeCallProcess,
                                 querySQLProcess, debugInfoSQLProcess, dateTimeSQLProcess, isActiveSQLProcess, inTransactionSQLProcess, 
                                 startTransactionSQLProcess, attemptCountSQLProcess, statusSQLProcess, statusMessageSQLProcess,
                                 waitEventTypeSQLProcess, waitEventSQLProcess, addressUserSQLProcess, lsfStackTraceProcess, threadAllocatedBytesProcess, 
                                 lastThreadAllocatedBytesProcess, threadNameSQLProcess, threadStackTraceSQLProcess, nameJavaProcess, statusJavaProcess,
                                 lockNameJavaProcess, stackTraceJavaProcess, lockOwnerIdProcess, lockOwnerNameProcess, isDisabledNestLoopProcess, 
                                 queryTimeoutProcess, idSQLProcess, copyFullQuerySQLProcess CHANGEABLE GRID 
    PROPERTIES(blocking) TOOLBAR cancelProcess, killProcess, cancelJavaProcess SHOWIF isActiveSQLProcess(blocking), killJavaProcess SHOWIF isActiveSQLProcess(blocking)                                   
    FILTERS idThreadProcess(blocked), sumBlocking(blocked) > 0, sumBlocked(blocking) > 0, isBlockingProcess(blocked, blocking) AND blocked != blocking
    FILTERGROUP nonBlocking FILTER '{process.monitor.form.process.monitor.filter.non.blocking}' sumBlocked(blocked) == 0 OR isDeadlock(blocked) DEFAULT 
    ORDERS sumBlocking(blocked) DESC, sumBlocking(blocking) DESC
    
    PROPERTIES() captionProcessType, updateProcessMonitorAction
;

DESIGN processMonitor {
    NEW top {
        tabbed = TRUE;
        fill = 1;
        NEW allProcesses {
            fill = 1;
            caption = '{process.monitor.caption.all.processes}';
            MOVE BOX(i) {
                fill = 3;
                caption = '{process.monitor.caption.processes}';
            }
        }
        NEW blockingProcesses {
            fill = 1;
            caption = '{process.monitor.caption.blocking}';
            MOVE BOX(TREE blocking) {
                caption = '{process.monitor.caption.blocking.processes}';
            }
        }
        NEW blockedProcesses {
            fill = 1;
            caption = '{process.monitor.caption.blocked}';
            MOVE BOX(blocked) {
                caption = '{process.monitor.caption.blocked.process}';
            }
            MOVE BOX(blocking) {
                caption = '{process.monitor.caption.blocking.processes}';
            }
        }
    } 
    NEW bottom {
        horizontal = TRUE;
        align = END;
        MOVE PROPERTY(captionProcessType());
        MOVE PROPERTY(updateProcessMonitorAction());
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    performance {
        NEW processMonitor FIRST;
    }
}