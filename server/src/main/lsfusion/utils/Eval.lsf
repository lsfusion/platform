MODULE Eval;

REQUIRE System, Service, Time;

NAMESPACE System;

CLASS Script '{eval.script.script}';
TABLE script(Script);

name '{eval.script.name.script}' = DATA STRING[100] (Script);
text '{eval.script.text.script}' = DATA TEXT (Script);
textScript = GROUP MAX Script script BY text(script);
 
dateTime '{eval.script.date.time.script}' = DATA DATETIME (Script);

dateTimeChange '{eval.script.date.time.change.script}' = DATA DATETIME (Script);  
dateTimeChange(Script s) <- currentDateTime() WHEN CHANGED(text(s));

copyToClipboard '{eval.script.copy.to.clipboard}' (STRING message, STRING javaStack, STRING lsfStack) {
    copyToClipboard(CONCAT '\n', message, javaStack, lsfStack);
}

showStack '{eval.script.show.stack}' = DATA LOCAL BOOLEAN ();
FORM exception '{eval.script.form.exception}'
    OBJECTS message = TEXT PANEL, showStack = BOOLEAN PANEL, javaStack = TEXT PANEL, lsfStack = TEXT PANEL
    PROPERTIES valueMessage= VALUE(message) BACKGROUND RGB(255, 50, 50) READONLY, showStack() TOOLBAR 
    PROPERTIES READONLY SHOWIF showStack() valueJavaStack = VALUE(javaStack), valueLsfStack = VALUE(lsfStack)
    PROPERTIES copy = copyToClipboard(message, javaStack, lsfStack)
;

DESIGN exception {
    size = (800, 600);
    OBJECTS {
        NEW pane {
            fill = 1;
            MOVE PROPERTY(valueMessage) {
                fill = 1;
                panelCaptionVertical = TRUE;
                caption = '{eval.script.form.exception.caption.value.message}';
            }
            NEW stacks {
                fill = 3;
                horizontal = TRUE;
                height = 100;
                NEW javaStack {
                    caption = '{eval.script.form.exception.caption.java.stack}';
                    width = 100;
                    fill = 1;
                    MOVE PROPERTY(valueJavaStack) {
                        alignShrink = FALSE;
                        valueHeight = -1;
                        valueWidth = -1;
                    }
                }
                NEW lsfStack {
                    caption = '{eval.script.form.exception.caption.lsf.stack}';
                    width = 100;
                    fill = 1;
                    MOVE PROPERTY(valueLsfStack) {
                        alignShrink = FALSE;
                        valueHeight = -1;
                        valueWidth = -1;
                    }
                }
                TOOLBARBOX {
                    MOVE PROPERTY(copy) FIRST;
                }
            }
        }
    }
}

// Rows
CLASS Row '{eval.script.row}';
TABLE row(Row);

string1 '{eval.script.string1.row}' = DATA STRING[1000] (Row) CHARWIDTH 10;
string2 '{eval.script.string2.row}' = DATA STRING[1000] (Row) CHARWIDTH 10;
string3 '{eval.script.string3.row}' = DATA STRING[1000] (Row) CHARWIDTH 10;
string4 '{eval.script.string4.row}' = DATA STRING[1000] (Row) CHARWIDTH 10;
string5 '{eval.script.string5.row}' = DATA STRING[1000] (Row) CHARWIDTH 10;
string6 '{eval.script.string6.row}' = DATA STRING[1000] (Row) CHARWIDTH 10;
string7 '{eval.script.string7.row}' = DATA STRING[1000] (Row) CHARWIDTH 10;
string8 '{eval.script.string8.row}' = DATA STRING[1000] (Row) CHARWIDTH 10;
string9 '{eval.script.string9.row}' = DATA STRING[1000] (Row) CHARWIDTH 10;
string10 '{eval.script.string10.row}' = DATA STRING[1000] (Row) CHARWIDTH 10;

numeric1 '{eval.script.numeric1.row}' = DATA NUMERIC[20,7] (Row);
numeric2 '{eval.script.numeric2.row}' = DATA NUMERIC[20,7] (Row);
numeric3 '{eval.script.numeric3.row}' = DATA NUMERIC[20,7] (Row);
numeric4 '{eval.script.numeric4.row}' = DATA NUMERIC[20,7] (Row);
numeric5 '{eval.script.numeric5.row}' = DATA NUMERIC[20,7] (Row);

date1 '{eval.script.date1.row}' = DATA DATE (Row);
date2 '{eval.script.date2.row}' = DATA DATE (Row);
date3 '{eval.script.date3.row}' = DATA DATE (Row);

FORM scriptLog '{eval.script.form.script.log}'
    OBJECTS s = Script PANEL
    PROPERTIES(s) name, text, dateTime

    EDIT Script OBJECT s
;

FORM scriptsLog '{eval.script.form.scripts.log}'
    
    OBJECTS s=Script FIRST
    PROPERTIES(s) READONLY name, text, dateTimeChange, dateTime 
    PROPERTIES(s) NEWSESSION DELETE 
    ORDERS dateTimeChange(s) DESC

    FILTERGROUP user FILTER '{eval.script.form.scripts.log.filter.name}' name(s) 'F9'

    LIST Script OBJECT s
;

CLASS ScriptType {
    script '{eval.script.script}',
    action '{eval.script.action}',
    form '{eval.script.form}',
    java '{eval.script.java}'
}

dataScriptType = DATA ScriptType(Script);
dataScriptType(Script s) <- ScriptType.action WHEN SET(s IS Script);
selectedExecutionScriptType (ScriptType st, Script s) = st == dataScriptType(s);
executionScriptTypeCaption (ScriptType st) = staticCaption(st);
executionScriptTypeName (ScriptType st) = basicStaticName(st);

evalString = DATA LOCAL STRING();
executeScript '{eval.execution}' (Script s) {
    dateTime(s) <- currentDateTime();
    APPLY;

    NEWSESSION {
        TRY {
            IF executionScriptTypeName(dataScriptType(s)) == 'script' OR executionScriptTypeName(dataScriptType(s)) == 'action' THEN evalString() <- text(s);
            IF executionScriptTypeName(dataScriptType(s)) == 'form' THEN evalString() <- CONCAT ' ', 'FORM form', text(s), '\n;\nrun() \{ SHOW form NOWAIT; \}';
            IF executionScriptTypeName(dataScriptType(s)) == 'java' THEN evalString() <- CONCAT ' ', 'run()  INTERNAL  <\{ ', text(s), ' \}>;';

            IF executionScriptTypeName(dataScriptType(s)) == 'action' THEN EVAL ACTION evalString(); ELSE EVAL evalString();
        } CATCH {
            SHOW exception OBJECTS message = messageCaughtException(), javaStack = javaStackTraceCaughtException(), lsfStack = lsfStackTraceCaughtException() WAIT;
        }
    }
} IMAGE 'play.png';

scriptExecution '{eval.script.script.execution}' (Script s)  {
    dataScriptType(s) <- ScriptType.script;
    executeScript(s);    
}

actionBodyExecution '{eval.script.action.body.execution}' (Script s)  {
    dataScriptType(s) <- ScriptType.action; 
    executeScript(s);    
}

formExecution '{eval.script.form.execution}' (Script s)  {
    dataScriptType(s) <- ScriptType.form;   
    executeScript(s);    
}

javaActionBodyExecution '{eval.script.java.action.body.execution}' (Script s)  {
    dataScriptType(s) <- ScriptType.java; 
    executeScript(s);    
}

json(Script s) = JSON FROM text = (OVERRIDE text(s), ''), type = (OVERRIDE executionScriptTypeName(dataScriptType(s)), '');

changeScript(Script sc) {
    INPUT s = TEXT DO {
        stringToFile(s);
        LOCAL text = TEXT();
        IMPORT JSON FROM resultFile() TO() text;
        text(sc) <- text(); 
    }
}

onWebClientInit() +{ onWebClientInit('interpreter.js') <- 1; }

FORM interpreter '{eval.script.form.interpreter}'
    OBJECTS s = Script PANEL
    PROPERTIES name(s), '{eval.script.text.script}' = json(s) CUSTOM 'interpreter' SHOWIF isWeb() ON CHANGE changeScript(s), text(s) SHOWIF NOT isWeb()

    OBJECTS st = ScriptType CUSTOM 'selectButtonGroup'
    PROPERTIES SHOWIF isWeb() name=executionScriptTypeCaption(st), selected=selectedExecutionScriptType(st, s), executionScriptTypeName(st)
    ORDERS executionScriptTypeName(st)

    PROPERTIES(s) SHOWIF NOT isWeb() scriptExecution, actionBodyExecution, formExecution, javaActionBodyExecution
    PROPERTIES(s) '' = executeScript SHOWIF isWeb()
                 
    OBJECTS r = Row GRID
    PROPERTIES(r) string1, string2, string3, string4, string5, string6, string7, string8, string9, string10 
    PROPERTIES(r) numeric1, numeric2, numeric3, numeric4, numeric5, date1, date2, date3
    PROPERTIES(r) NEW, DELETE GRID
;

copyScript '{eval.script.copy.script}' (Script sf)  { 
    NEW s = Script {
        text(s) <- text(sf);
        SEEK interpreter.s = s;
    }
    IF NOT PREV(sf IS Script) THEN
        DELETE sf;
}

findScript '{eval.script.find.script}' (Script sf)  { 
    DIALOG scriptsLog OBJECTS s INPUT DO {
        IF NOT PREV(sf IS Script) THEN
            DELETE sf;

        LOCAL new = BOOLEAN();
        new() <- NULL;
        ASK '{eval.script.find.script.ask}' DO {
            NEW st = Script {
                text(st) <- text(s);
                SEEK interpreter.s = st;
            }
            new () <- TRUE;
        }
        IF NOT new() THEN {
            SEEK interpreter.s = s;
        }
    }   
}

EXTEND FORM interpreter 
    PROPERTIES(s) copyScript, findScript 
    
    EVENTS  
        ON INIT {
            NEW scr = Script {
                SEEK interpreter.s = scr; 
            }
        }
;

DESIGN interpreter {
    NEW pane {
        fill = 1;
        tabbed = TRUE;
        NEW scriptPane {
            fill = 1;        
            caption = '{eval.script.form.interpreter.caption.script}';
            NEW script {
                caption = '{eval.script.form.interpreter.caption.options}';
                horizontal = TRUE;
                MOVE PROPERTY(copyScript(s)); // { font = 'bold 24'; alignment = STRETCH; }
                MOVE PROPERTY(findScript(s)); // { font = 'bold 24'; alignment = STRETCH; }
                MOVE PROPERTY(name(s)); // { font = 'bold 24'; alignment = STRETCH; }
            }
            NEW execute {
                caption = '{eval.script.form.interpreter.caption.run}';
                horizontal = TRUE;
                MOVE BOX(st) {
                    caption = NULL;
                    flex = 0;
                    alignment = CENTER;
                };
                GRID(st) {
                    boxed = FALSE;
                }
                MOVE PROPERTY(executeScript(s)) {
                    focusable = FALSE;
                    alignment = CENTER;
                }
                MOVE PROPERTY(scriptExecution(s)); // { font = 'bold 24'; }
                MOVE PROPERTY(actionBodyExecution(s)); // { font = 'bold 24'; }
                MOVE PROPERTY(formExecution(s)); // { font = 'bold 24'; }
                MOVE PROPERTY(javaActionBodyExecution(s)); // { font = 'bold 24'; }
            }
            REMOVE TOOLBARSYSTEM(st);
            
            MOVE PROPERTY(text(s)) {
                panelCaptionVertical = TRUE;    
                fill = 1;
            }
            
            MOVE PROPERTY(json(s)) {
                panelCaptionVertical = TRUE;    
                fill = 1;
            }            
        }
        MOVE BOX(r) {
            caption = '{eval.script.form.interpreter.caption.data}';
        }
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    system {
        NEW interpreter BEFORE maintenance;
    }
}

