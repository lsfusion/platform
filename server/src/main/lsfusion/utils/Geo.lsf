MODULE Geo;

REQUIRE SystemEvents, Utils;

CLASS ABSTRACT POI '{geo.poi}';
TABLE POI(POI);

autoSynchronizeCoordinates '{geo.auto.synchronize.coordinates}' = DATA BOOLEAN ();

CLASS MapProvider '{geo.map.provider}' {
    google '{geo.map.provider.google}',
    yandex '{geo.map.provider.yandex}'
}

calculateUserMapProvider = DATA MapProvider ();
calculateMapProvider = OVERRIDE calculateUserMapProvider(), MapProvider.yandex;
showUserMapProvider = DATA MapProvider ();
showMapProvider = OVERRIDE showUserMapProvider(), MapProvider.yandex;
useTor '{geo.use.tor}' = DATA BOOLEAN ();

nameCalculateUserMapProvider '{geo.name.calculate.user.map.provider}' () = staticCaption(calculateUserMapProvider());
nameShowUserMapProvider '{geo.name.show.user.map.provider}' () = staticCaption(showUserMapProvider());

name '{geo.name.poi}'= ABSTRACT ISTRING[200] (POI) MATERIALIZED;

nameCountry '{geo.name.country.poi}' (poi) = ABSTRACT ISTRING[100] (POI) MATERIALIZED;

mainAddress '{geo.main.address.poi}' = ABSTRACT ISTRING[150] (POI) MATERIALIZED;
additionalAddress '{geo.additional.address.poi}' = ABSTRACT ISTRING[150] (POI) MATERIALIZED;

address '{geo.address.poi}' (POI poi) = OVERRIDE additionalAddress(poi), mainAddress(poi); 

latitude '{geo.latitude.poi}' = ABSTRACT NUMERIC[11,6] (POI);
longitude '{geo.longitude.poi}' = ABSTRACT NUMERIC[11,6] (POI);

//Get coordinates
readLatitude '{geo.latitude.poi}' = DATA LOCAL NUMERIC[11,6] ();
readLongitude '{geo.longitude.poi}' = DATA LOCAL NUMERIC[11,6] ();

//Get address
readAddress '{geo.address.poi}' = DATA LOCAL STRING();

isDefault '{geo.api.key.default}' (MapProvider m) = m == calculateMapProvider();
apiKey '{geo.api.key}' = DATA STRING(MapProvider); 
provider '{geo.api.key.provider}' (MapProvider m) = staticCaption(m) CHARWIDTH 5;
lsfParams(STRING s) += GROUP MAX apiKey(MapProvider p) IF s = 'mapApiKey_' + staticCaption(p);

googleAutocompleteCountry '{geo.google.autocomplete.country}' = DATA STRING();
lsfParams(STRING s) += googleAutocompleteCountry() IF s = 'googleMapAutocompleteCountry';

getCoordinatesAddress  INTERNAL  'lsfusion.server.logics.classes.data.utils.geo.GetCoordinatesAddressAction' (STRING, MapProvider);
getCoordinates (STRING address)  { getCoordinatesAddress(address, calculateMapProvider()); }
recalculateDistance  INTERNAL  'lsfusion.server.logics.classes.data.utils.geo.RecalculateDistancePOIAction' (POI);

getAddressCoordinates  INTERNAL  'lsfusion.server.logics.classes.data.utils.geo.GetAddressCoordinatesAction' (NUMERIC[11,6], NUMERIC[11,6], MapProvider, STRING);
getAddress(NUMERIC[11,6] latitude, NUMERIC[11,6] longitude) { getAddressCoordinates(latitude, longitude, calculateMapProvider(), lsfParams('googleGeocodingLanguage')); }

calculateCoordinates '{geo.calculate.coordinates}'(POI POI) { 

    TRY {
        getCoordinates (CONCAT ',', nameCountry(POI), address(POI));
        latitude(POI) <- readLatitude();
        longitude(POI) <- readLongitude();
        recalculateDistance(POI);
    }

}
WHEN LOCAL (SETCHANGED(nameCountry(POI POI)) OR SETCHANGED(address(POI))) AND autoSynchronizeCoordinates() DO EXEC calculateCoordinates(POI);

recalculateAllDistances '{geo.recalculate.all.distances}'()  { 
    FOR POI p IS POI DO {
        recalculateDistance(p);
    }
}

// Показать на карте одну точку
showOnMap '{geo.show.on.map}' INTERNAL  'lsfusion.server.logics.classes.data.utils.geo.ShowOnMapAction' (DOUBLE, DOUBLE, MapProvider, BPSTRING[100]);
showOnMap(DOUBLE latitude, DOUBLE longitude, BPSTRING[100] address)  { showOnMap (latitude, longitude, showMapProvider(), address); }

showOnMap '{geo.show.on.map}'(POI POI) { 
    EXEC showOnMap (latitude (POI), longitude (POI), address(POI));
}

// Показать на карте путь
numberPath '{geo.number.path.poi}' = DATA LOCAL INTEGER (POI);
descriptionPath '{geo.description.path.poi}' = DATA LOCAL STRING[200] (POI);

TABLE poiPoi (POI, POI); 
distancePOIPOI '{geo.distance.poi.poi}' = DATA INTEGER (POI, POI);
showOnPath '{geo.show.on.path}' INTERNAL  'lsfusion.server.logics.classes.data.utils.geo.ShowOnMapPathAction' (MapProvider);

inPath '{geo.in.path.poi}' = DATA LOCAL BOOLEAN (POI);
startPathPOI '{geo.start.path.poi}'= DATA LOCAL POI();
calculatePath '{geo.calculate.path.poi}' INTERNAL  'lsfusion.server.logics.classes.data.utils.geo.CalculatePathAction' ();

EXTEND FORM options
    PROPERTIES() autoSynchronizeCoordinates, nameShowUserMapProvider, useTor, recalculateAllDistances, googleAutocompleteCountry
    OBJECTS m = MapProvider
    PROPERTIES(m) provider, apiKey, isDefault
;

DESIGN options {
    commons {
        NEW coordinatesContainer {
            caption = '{geo.form.options.caption.navigation}';
                NEW apiKeys {
                    fill = 1;
                    height = 130;
                    MOVE BOX (m);
                }
                MOVE PROPERTY(googleAutocompleteCountry());
                MOVE PROPERTY(autoSynchronizeCoordinates());
                MOVE PROPERTY(nameShowUserMapProvider());
                MOVE PROPERTY(useTor());
                MOVE PROPERTY(recalculateAllDistances());	
        }
    }
}

// POSTGIS support

tailedPolygon(STRING text) = FORMULA 'ST_GeomFromText(\'POLYGON((\' || $1 || \'))\')';
tailPolygon(STRING text) = text + ',' + left(text, strpos(text, ',') - 1); 
polygon(STRING text) = tailedPolygon(tailPolygon(text));

point(DOUBLE latitude, DOUBLE longitude) = FORMULA 'ST_MakePoint($1, $2)';

intersects(geometry1, geometry2) = FORMULA NULL BOOLEAN 'CASE WHEN NULLIF(ST_Intersects($1,$2), FALSE) THEN 1 ELSE NULL END'; 

isPointInPolygon(DOUBLE latitude, DOUBLE longitude, STRING polygon) = intersects(point(latitude, longitude), polygon(polygon)); 

