MODULE I18n;

REQUIRE System, MasterData, Utils;

CLASS Dictionary '{i18n.dictionary}';
TABLE dictionary (Dictionary);

name '{i18n.name.dictionary}' = DATA ISTRING[50](Dictionary);

insensitive '{i18n.insensitive.dictionary}' = DATA BOOLEAN (Dictionary);

CLASS DictionaryEntry '{i18n.dictionary.entry}';
TABLE dictionaryEntry (DictionaryEntry);

dictionary '{i18n.dictionary}' = DATA Dictionary (DictionaryEntry);
term '{i18n.term.dictionary.entry}' = DATA STRING[50] (DictionaryEntry);
insensitiveTerm(DictionaryEntry dictionaryEntry) = upper (term(dictionaryEntry));
translation '{i18n.translation.dictionary.entry}' = DATA STRING[50] (DictionaryEntry);

dictionaryEntryTerm = GROUP AGGR DictionaryEntry dictionaryEntry WHERE dictionaryEntry IS DictionaryEntry BY dictionary(dictionaryEntry), term(dictionaryEntry);
translationDictionaryEntry '{i18n.translation.dictionary.entry}' (Dictionary dictionary, STRING[50] term) = translation(dictionaryEntryTerm(dictionary, term));
nameDictionary '{i18n.dictionary}' (DictionaryEntry dictionaryEntry) = name(dictionary(dictionaryEntry));
insensitiveDictionaryEntryTerm = GROUP MAX DictionaryEntry dictionaryEntry BY dictionary(dictionaryEntry), insensitiveTerm(dictionaryEntry);
insensitiveTranslationDictionaryEntry '{i18n.insensitive.translation.dictionary.entry}' = translation (dictionaryEntryTerm(Dictionary dictionary, STRING[50] term));

CLASS Language '{i18n.language}';
TABLE language(Language);

name '{i18n.name.language}' = DATA ISTRING[50](Language);

locale '{i18n.locale.language}' = DATA BPSTRING[5] (Language);

FORM language '{i18n.language}'
    OBJECTS l = Language PANEL
    PROPERTIES(l) name, locale

    EDIT Language OBJECT l
;

FORM languages '{i18n.languages}'
    OBJECTS l = Language
    PROPERTIES(l) READONLY name, locale
    PROPERTIES(l)          NEWSESSION NEW, EDIT, DELETE GRID

    LIST Language OBJECT l
;

NAVIGATOR {
    regionalData {
        NEW languages;
    }
}

languageFrom = DATA Language (Dictionary);
nameLanguageFrom '{i18n.name.language.from}'(Dictionary dictionary) = name(languageFrom(dictionary));
languageTo = DATA Language (Dictionary);
nameLanguageTo '{i18n.name.language.to}'(Dictionary dictionary) = name(languageTo(dictionary));

translationInput '{i18n.translation.input}' = DATA LOCAL TEXT ();
translationCode = DATA INTEGER ();
translationResult '{i18n.translation.result}' = DATA LOCAL TEXT ();

// ------------------------------------ Google Translate -------------------------------- //
languageFromTranslation = DATA Language ();
nameLanguageFromTranslation '{i18n.name.language.from}'() = name(languageFromTranslation());
languageToTranslation = DATA Language ();
nameLanguageToTranslation '{i18n.name.language.to}'() = name(languageToTranslation());

translateApiKey '{i18n.api.key}' = DATA STRING () CHARWIDTH 40;
translate INTERNAL 'lsfusion.server.physics.dev.i18n.action.TranslateAction' (TEXT, Language, Language) NULL;

translateTerm '{i18n.translate}'(DictionaryEntry e)  { 
    translate(TEXT(term(e)), languageFrom(dictionary(e)), languageTo(dictionary(e)));
    translation(e) <- STRING[50](translationResult());
}

translateText '{i18n.translate}'()  { 
    translate(translationInput(), languageFromTranslation(), languageToTranslation());
}

// ------------------------------------ Translate dictionary -------------------------------- //
translate INTERNAL  'lsfusion.server.physics.dev.i18n.action.TranslateDictionaryAction' (Dictionary, TEXT);

WHEN LOCAL CHANGED (translationInput()) AND Dictionary dictionary IS Dictionary DO EXEC translate(dictionary, translationInput());

FORM translation '{i18n.translation}'
    PROPERTIES() translateApiKey, 
                 translationInput, translationResult, nameLanguageFromTranslation, nameLanguageToTranslation,
                 translateText
;

DESIGN translation {
    NEW languages {
        caption = '{i18n.languages}';
        horizontal = TRUE;
        MOVE PROPERTY(translateApiKey());
        MOVE PROPERTY(nameLanguageFromTranslation());
        MOVE PROPERTY(nameLanguageToTranslation());
    }
    NEW translation {
        fill = 1;
        horizontal = TRUE;
        MOVE PROPERTY(translationInput()) {
            fill = 1;
            panelCaptionVertical = TRUE;
        }
        MOVE PROPERTY(translationResult()) {
            fill = 1;
            panelCaptionVertical = TRUE;
        }
    }
    MOVE PROPERTY(translateText()) { font = 'bold 24'; }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    regionalData {
        NEW translation;
    }
}

// ---------------------------------------------- Multilanguage name -------------------------------- //
CLASS MultiLanguageNamed '{i18n.multi.language.named}';

TABLE multiLanguageNamedLanguage(MultiLanguageNamed, Language);
languageName '{i18n.language.name.multi.language.named}' = DATA ISTRING[110] (MultiLanguageNamed, Language);

// ---------------------------------------------- Dictionary --------------------------------------------- //
FORM dictionary '{i18n.dictionary}'
    OBJECTS d = Dictionary PANEL
    PROPERTIES(d) name, insensitive, nameLanguageFrom, nameLanguageTo

    OBJECTS e = DictionaryEntry
    PROPERTIES(e) term, translation, translateTerm GRID, NEW, DELETE GRID
    FILTERS       dictionary(e) == d

    EDIT Dictionary OBJECT d

    PROPERTIES() translationInput, translationResult
;

DESIGN dictionary {
    BOX {
        MOVE BOX(d);
        MOVE BOX(e);
        NEW test {
            horizontal = TRUE;
            MOVE PROPERTY(translationInput()) {
                fill = 1;
                caption = '{i18n.form.dictionary.caption.phrase}';
                panelCaptionVertical = TRUE;
                font = 'bold 24';
            }
            MOVE PROPERTY(translationResult()){
                fill = 1;
                caption = '{i18n.translation}';
                panelCaptionVertical = TRUE;
                font = 'bold 24';
            }
        }
        MOVE TOOLBARBOX;
    }
}

FORM dictionaries '{i18n.dictionaries}'
    OBJECTS d = Dictionary
    PROPERTIES(d) READONLY name, insensitive, nameLanguageFrom, nameLanguageTo

    PROPERTIES(d) NEWSESSION NEW, EDIT, DELETE GRID

    LIST Dictionary OBJECT d
;

NAVIGATOR {
    regionalData {
        NEW dictionaries;
    }
}
