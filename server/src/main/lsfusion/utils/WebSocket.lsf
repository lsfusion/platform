MODULE WebSocket;

REQUIRE SystemEvents;

CLASS WebSocketClient;

webSocketClient = GROUP AGGR WebSocketClient c BY LONG(c) IF c IS WebSocketClient;
hostname = DATA STRING(WebSocketClient);

onStarted() + {
    DELETE WebSocketClient c WHERE c IS WebSocketClient;
}

connectionCreated = DATA LOCAL NESTED WebSocketClient();
onOpen ABSTRACT LIST (STRING);
onOpen(STRING hostname) + {
    NEW c = WebSocketClient {
        connectionCreated() <- c;
        hostname(c) <- hostname;
    }
}

onStringMessage ABSTRACT LIST (WebSocketClient, STRING);

onBinaryMessage ABSTRACT LIST (WebSocketClient, RAWFILE);

onClose ABSTRACT LIST (WebSocketClient);
onClose(WebSocketClient c) + {
    DELETE c;
}

sendStringMessage 'Send string message' INTERNAL 'lsfusion.server.physics.dev.integration.external.to.net.websocket.SendStringMessageAction' (WebSocketClient, STRING);
sendBinaryMessage 'Send binary message' INTERNAL 'lsfusion.server.physics.dev.integration.external.to.net.websocket.SendBinaryMessageAction' (WebSocketClient, RAWFILE);

FORM webSockets 'WebSockets'
    OBJECTS c = WebSocketClient
    PROPERTIES(c) id 'id' = VALUE, hostname
    
    OBJECTS m = STRING PANEL 
    PROPERTIES(m) stringMessage = VALUE
    PROPERTIES(c, m) sendStringMessage
    
    OBJECTS f = RAWFILE PANEL
    PROPERTIES(f) binaryMessage = VALUE
    PROPERTIES(c, f) sendBinaryMessage
;

DESIGN webSockets {
    PROPERTY(stringMessage) {
        showIf = c;
    }
    PROPERTY(binaryMessage) {
        showIf = c;
    }
}

NAVIGATOR {
    system {
        NEW webSockets;
    }
}