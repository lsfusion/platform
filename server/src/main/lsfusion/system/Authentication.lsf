MODULE Authentication;

REQUIRE System, Time;

// ------------------------- Computers ---------------------- //

CLASS Computer '{authentication.computer}';
TABLE computer (Computer);

hostname '{authentication.host.name.computer}' = DATA ISTRING[100] (Computer) CHARWIDTH 10 IN id;
computer = GROUP LAST Computer computer BY hostname(computer);

FORM computer '{authentication.computer}'
    OBJECTS c = Computer PANEL
    PROPERTIES(c) hostname
    
    EDIT Computer OBJECT c
;

FORM computers '{authentication.computers}'
    OBJECTS c = Computer
    PROPERTIES(c) READONLY hostname
    PROPERTIES(c) NEWSESSION NEW, EDIT, DELETE GRID
;

FORM computersDialog '{authentication.computers}'
    OBJECTS c = Computer
    
    PROPERTIES(c) READONLY hostname 
    
    LIST Computer OBJECT c     
;
DESIGN computersDialog { BOX { size = (1024, 768); }}

currentComputer = NATIVE Computer ();
hostnameCurrentComputer () = hostname(currentComputer());

// -------------------------- Users ---------------------------- //

// Contact
CLASS ABSTRACT Contact '{authentication.contact}';
TABLE contact (Contact);

firstName '{authentication.first.name.contact}' = DATA ISTRING[100] (Contact) CHARWIDTH 10 IN id;
lastName '{authentication.last.name.contact}' = DATA ISTRING[100] (Contact) CHARWIDTH 15 IN id;
name '{authentication.name.contact}' (Contact contact) = CONCAT ' ', firstName(contact), lastName(contact) IN id CHARWIDTH 20;

phone '{authentication.phone.contact}' = DATA STRING[100] (Contact) CHARWIDTH 10;
postAddress '{authentication.post.address.contact}' = DATA STRING[150] (Contact) CHARWIDTH 20;
birthday '{authentication.birthday.contact}' = DATA DATE (Contact);

email '{authentication.email.contact}'= DATA STRING[400] (Contact) CHARWIDTH 20 REGEXP '[-!#-\'*+/-9=?A-Z^-~]+(\\.[-!#-\'*+/-9=?A-Z^-~]+)*@[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)+' '<html>{authentication.email.contact.incorrect}</html>';
contact (email) = GROUP MAX Contact contact BY email(contact);

// User

CLASS ABSTRACT User '{authentication.user}';
TABLE user (User);

CLASS SystemUser '{authentication.system.user}' : User;

CLASS CustomUser '{authentication.custom.user}' : User, Contact;
TABLE customUser (CustomUser);

name '{authentication.name.user}' (User user) = IF user IS SystemUser 
                        THEN STRING[100]('{authentication.system.user}')
                        ELSE name[Contact](user) CHARWIDTH 10;
name '{authentication.name.user}' (CustomUser user) = name[User](user AS CustomUser) CHARWIDTH 10;

// login
login '{authentication.login}' = DATA ISTRING[100] (CustomUser) CHARWIDTH 15;
customUserLower (login) = GROUP AGGR CustomUser customUser WHERE customUser IS CustomUser BY ISTRING[100](lower(login(customUser)));
customUserNormalized (ISTRING[100] login) = customUserLower(ISTRING[100](lower(login)));

//backward compatibility
customUser (login) = GROUP AGGR CustomUser customUser WHERE customUser IS CustomUser BY login(customUser);
upcaseLogin (CustomUser customUser) = upper(login(customUser));
customUserUpcase (login) = GROUP MAX CustomUser customUser BY upcaseLogin(customUser);

//migration 4 -> 5 version
intersectingLoginsCount '{authentication.intersecting.logins}' (CustomUser user) = GROUP SUM 1 IF upper(login(CustomUser u)) == upper(login(user));
intersectingLoginsCount () = GROUP SUM 1 IF intersectingLoginsCount(CustomUser u) > 1;
FORM intersectingLogins '{authentication.intersecting.logins}'
OBJECTS c = CustomUser
PROPERTIES(c) login, intersectingLoginsCount
FILTERS intersectingLoginsCount(c) > 1 
;

showIntersectingLogins '{authentication.intersecting.logins}' ()  {
    SHOW intersectingLogins;
}

EXTEND FORM migrationData 
    PROPERTIES showIntersectingLogins()
;

DESIGN migrationData {
    commons {
        MOVE PROPERTY(showIntersectingLogins());
    }
}

// password
sha256Password '{authentication.password}' = DATA STRING[100] (CustomUser) ECHO;
calculatedHash = DATA LOCAL STRING[100] ();
calculateBase64Hash INTERNAL  'lsfusion.server.physics.admin.authentication.action.CalculateBase64HashAction' (BPSTRING[10], BPSTRING[30]);
changeSHA256Password(CustomUser customUser)  { 
    INPUT st=BPSTRING[30] DO {
        calculateBase64Hash('SHA-256', st);
        sha256Password(customUser) <- calculatedHash();
    }
}
setSHA256Password(CustomUser customUser, STRING str)  { 
    calculateBase64Hash('SHA-256', str);
    sha256Password(customUser) <- calculatedHash();
}
passwordResetToken = DATA STRING (CustomUser);
expiryPasswordResetTokenDate = DATA DATETIME (CustomUser);
userByPassResetToken(STRING str) = GROUP NAGGR CustomUser cu BY passwordResetToken(cu) IF cu IS CustomUser;

// tokens
currentAuthToken = NATIVE TEXT();    
secret = DATA TEXT();
getAuthToken() {
    exportText() <- currentAuthToken();
} @@api;

minHashLength = DATA INTEGER ();

// LDAP
useLDAP '{authentication.use.ldap}' = DATA BOOLEAN ();
serverLDAP '{authentication.server.ldap}' = DATA STRING[100] ();
portLDAP '{authentication.port.ldap}' = DATA INTEGER ();
baseDNLDAP '{authentication.base.dn.ldap}' = DATA STRING[100] ();
userDNSuffixLDAP '{authentication.user.dn.suffix.ldap}' = DATA STRING[100] ();

// OAuth and Web-client authentication
CLASS OAuth2;
id 'Id' = DATA STRING (OAuth2);
clientId 'Client id' = DATA STRING (OAuth2);
clientSecret 'Client secret' = DATA STRING (OAuth2);
clientAuthenticationMethod 'Client authentication method' = DATA STRING (OAuth2);
scope 'scope' = DATA STRING (OAuth2);
authorizationUri 'Authorization URI' = DATA STRING (OAuth2);
tokenUri 'Token URI' = DATA STRING (OAuth2);
jwkSetUri 'Jwk set URI' = DATA STRING (OAuth2);
userInfoUri 'User info URI' = DATA STRING (OAuth2);
userNameAttributeName 'Username attribute name' = DATA STRING (OAuth2);
clientName 'Client name' = DATA STRING (OAuth2);

auth (id) = GROUP AGGR OAuth2 oa BY id(oa);
clientName(STRING str) = clientName(auth(str));

webClientSecretKey 'Web-client secret key' = DATA STRING (); 

writeDefaultCredentials() {
    IF NOT clientName('github') THEN {
        NEW oa = OAuth2{
            id(oa) <- 'github';
            clientAuthenticationMethod(oa) <- 'basic';
            scope(oa) <- 'read:user';
            authorizationUri(oa) <- 'https://github.com/login/oauth/authorize';
            tokenUri(oa) <- 'https://github.com/login/oauth/access_token';
            userInfoUri(oa) <- 'https://api.github.com/user';
            userNameAttributeName(oa) <- 'node_id';
            clientName(oa) <- 'GitHub';
        }
    }
    IF NOT clientName('google') THEN {
        NEW oa = OAuth2{
            id(oa) <- 'google';
            clientAuthenticationMethod(oa) <- 'basic';
            scope(oa) <- 'openid profile email';
            authorizationUri(oa) <- 'https://accounts.google.com/o/oauth2/v2/auth';
            tokenUri(oa) <- 'https://www.googleapis.com/oauth2/v4/token';
            jwkSetUri(oa) <- 'https://www.googleapis.com/oauth2/v3/certs';
            userInfoUri(oa) <- 'https://www.googleapis.com/oauth2/v3/userinfo';
            userNameAttributeName(oa) <- 'sub';
            clientName(oa) <- 'Google';
        }
    }
    IF NOT clientName('facebook') THEN {
        NEW oa = OAuth2{
            id(oa) <- 'facebook';
            clientAuthenticationMethod(oa) <- 'post';
            scope(oa) <- 'public_profile email';
            authorizationUri(oa) <- 'https://www.facebook.com/v2.8/dialog/oauth';
            tokenUri(oa) <- 'https://graph.facebook.com/v2.8/oauth/access_token';
            userInfoUri(oa) <- 'https://graph.facebook.com/me?fields=id,name,email';
            userNameAttributeName(oa) <- 'id';
            clientName(oa) <- 'Facebook';
        }
    }
    IF NOT clientName('yandex') THEN {
        NEW oa = OAuth2{
            id(oa) <- 'yandex';
            clientAuthenticationMethod(oa) <- 'basic';
            scope(oa) <- 'login:info login:email';
            authorizationUri(oa) <- 'https://oauth.yandex.ru/authorize';
            tokenUri(oa) <- 'https://oauth.yandex.ru/token';
            userInfoUri(oa) <- 'https://login.yandex.ru/info';
            userNameAttributeName(oa) <- 'id';
            clientName(oa) <- 'Yandex';
        }
    }
    IF NOT webClientSecretKey() THEN {
            webClientSecretKey() <- 'secretKey';
    }
    APPLY;
}

getClientCredentials(STRING str) {
    IF str != webClientSecretKey() THEN {
        EXPORT FROM error = STRING s WHERE s = '{authentication.oauth2.incorrect.web.client.auth.token}';
    } ELSE {
        EXPORT FROM id(OAuth2 oa),
            clientId(oa),
            clientSecret(oa),
            clientAuthenticationMethod(oa),
            scope(oa),
            authorizationUri(oa),
            tokenUri(oa),
            jwkSetUri(oa),
            userInfoUri(oa),
            userNameAttributeName(oa),
            clientName(oa) WHERE clientId(oa) AND clientSecret(oa) AND oa IS OAuth2;
    }
} @@api @@noauth;

onUserRegister ABSTRACT LIST (User);

registerUser(JSONFILE user) {
    IMPORT FROM user FIELDS STRING[100] login, STRING[100] password, STRING[100] firstName, STRING[100] lastName, STRING[400] email DO {
        IF customUserNormalized(login) THEN {
            EXPORT FROM error = '{registration.not.successful.login.exist}';
        } ELSE {
            NEW cu = CustomUser { 
                login(cu) <- login;
                setSHA256Password(cu, password);
                firstName(cu) <- firstName;
                lastName(cu) <- lastName;
                email(cu) <- email;
                onUserRegister(cu);
                APPLY;
                EXPORT FROM success = '{registration.successful}';
            }
        } 
    }
} @@api @@noauth;

resetPassword(JSONFILE input) {
    IMPORT FROM input FIELDS STRING userNameOrEmail DO {
        LOCAL token = STRING();
        LOCAL NESTED success = BOOLEAN();
        LOCAL NESTED href = STRING();
        LOCAL NESTED email = STRING();
        TRY {
            FOR email(CustomUser cu) == userNameOrEmail OR login(cu) == userNameOrEmail DO {
                token() <- randomUUID();
                passwordResetToken(cu) <- token();
                expiryPasswordResetTokenDate(cu) <- currentDateTime();
                href() <- CONCAT '', '<a href="', webPath(), '/change-password', '?token=', token(), IF query() != '' THEN (CONCAT '', '&', query()), '"> {password.reset} - ', login(cu), '</a>';
                APPLY;
                IF NOT canceled() THEN {
                    EMAIL 
                        SUBJECT '{password.reset.email.subject} '
                        TO email(cu)
                        BODY href();
                    success() <- TRUE;
                }
                email() <- email(cu);
            }
            IF success() THEN {
                EXPORT FROM success = '{password.reset.email.sent}', email = email();  
            } ELSE {
                EXPORT FROM error = '{password.reset.error}';
            }
        } CATCH {
            EXPORT FROM error = messageCaughtException();
        }
    }
} @@api @@noauth;

changePassword(JSONFILE input) {
    IMPORT FROM input FIELDS STRING token, STRING newPassword DO {
        LOCAL NESTED success = BOOLEAN();
        FOR CustomUser cu = userByPassResetToken(token) AND cu IS CustomUser DO {
            setSHA256Password(cu, newPassword);
            passwordResetToken(cu) <- NULL;
            expiryPasswordResetTokenDate(cu) <- NULL;
            APPLY;
            IF NOT canceled() THEN {
                success() <- TRUE;
            }
        }
        IF success() THEN {
            EXPORT FROM success = '{password.changed}';
        } ELSE {
            EXPORT FROM error = '{password.reset.token.invalid}';
        }
    }
} @@api @@noauth;

clearPassResetToken ABSTRACT LIST ( ) ;
clearPassResetToken () + { 
	NEWSESSION {
	    FOR expiryPasswordResetTokenDate(CustomUser cu) <= subtractSeconds(currentDateTime(), 3600) DO {
	        expiryPasswordResetTokenDate(cu) <- NULL;
	        passwordResetToken(cu) <- NULL;
	    }
        APPLY;
	}
}

// lock
isLocked '{authentication.is.locked.user}' = DATA BOOLEAN (CustomUser);
isLockedLogin (login) = isLocked(customUserNormalized(lower(login)));

// Current User
currentUser = NATIVE User ();
currentUserName '{authentication.current.user.name}' () = name(currentUser());

// User management
logOut (restart, reconnect)  INTERNAL  'lsfusion.server.physics.admin.authentication.action.LogOutAction' (BOOLEAN, BOOLEAN);
shutdown { logOut(NULL, NULL); }
reconnect { logOut(TRUE, TRUE); }
restart { logOut(TRUE, NULL); }

// Locale settings
userLanguage '{authentication.user.language.user}' = DATA STRING[3] (CustomUser) CHARWIDTH 5;
userCountry '{authentication.user.country.user}' = DATA STRING[3] (CustomUser) CHARWIDTH 5;
userTimeZone '{authentication.user.time.zone.user}' = DATA STRING[30] (CustomUser);
userTwoDigitYearStart '{authentication.user.two.digit.year.start.user}' = DATA INTEGER (CustomUser);
userDateFormat '{authentication.user.date.format.user}' = DATA STRING (CustomUser);
userTimeFormat '{authentication.user.time.format.user}' = DATA STRING (CustomUser);

clientLanguage '{authentication.client.language.user}' = DATA STRING[3] (CustomUser) CHARWIDTH 5;
clientCountry '{authentication.client.country.user}' = DATA STRING[3] (CustomUser) CHARWIDTH 5;
useClientLocale '{authentication.use.client.locale.user}' = DATA BOOLEAN (CustomUser) CHARWIDTH 12;

clientDateFormat '{authentication.client.date.format.user}' = DATA STRING (CustomUser);
clientTimeFormat '{authentication.client.time.format.user}' = DATA STRING (CustomUser);
useClientDateTimeFormat '{authentication.use.client.date.time.format.user}' = DATA BOOLEAN (CustomUser);

defaultUserLanguage '{authentication.default.user.language}' = DATA STRING[3] ();
defaultUserCountry '{authentication.default.user.country}' = DATA STRING[3] ();
defaultUserTimezone '{authentication.default.user.time.zone}' = DATA STRING[30] ();
defaultUserTwoDigitYearStart '{authentication.default.user.two.digit.year.start}' = DATA INTEGER ();
defaultUserDateFormat '{authentication.default.user.date.format}' = DATA STRING ();
defaultUserTimeFormat '{authentication.default.user.time.format}' = DATA STRING ();

serverLanguage '{authentication.server.language}' = DATA STRING[3] ();
serverCountry '{authentication.server.country}' = DATA STRING[3] ();
serverTimezone '{authentication.server.time.zone}' = DATA STRING[30] ();
serverTwoDigitYearStart '{authentication.server.two.digit.year.start}' = DATA INTEGER ();
serverDateFormat '{authentication.server.date.format}' = DATA STRING ();
serverTimeFormat '{authentication.server.time.format}' = DATA STRING ();

language '{authentication.language.user}' (CustomUser user) = OVERRIDE (clientLanguage(user) IF useClientLocale(user)), userLanguage(user), defaultUserLanguage(), serverLanguage();
country '{authentication.country.user}' (CustomUser user) = IF useClientLocale(user) AND clientLanguage(user) 
                                                                THEN clientCountry(user)
                                                                ELSE IF userLanguage(user) THEN userCountry(user) ELSE IF defaultUserLanguage() THEN defaultUserCountry() ELSE serverCountry();

dateFormat '{authentication.date.format.user}' (CustomUser user) = OVERRIDE (clientDateFormat(user) IF useClientDateTimeFormat(user)), userDateFormat(user), defaultUserDateFormat(), serverDateFormat();
timeFormat '{authentication.time.format.user}' (CustomUser user) = OVERRIDE (clientTimeFormat(user) IF useClientDateTimeFormat(user)), userTimeFormat(user), defaultUserTimeFormat(), serverTimeFormat();

lsfParams(STRING s) += country(currentUser()) IF s = 'googleMapAutocompleteCountry';

// "duplicate" of loadLocalePreferences, but web-client needs this data just right after authentication
getCurrentUserLocale() {
    FOR CustomUser user AS CustomUser = currentUser() DO
        EXPORT JSON FROM language(user), country(user); 
} @@api;

timeZone '{authentication.time.zone.user}' (CustomUser user) = OVERRIDE userTimeZone(user), defaultUserTimezone(), serverTimezone();
twoDigitYearStart '{authentication.two.digit.year.start.user}' (CustomUser user) = OVERRIDE userTwoDigitYearStart(user), defaultUserTwoDigitYearStart(), serverTwoDigitYearStart();

// GUI settings -- should be moved to Service (but needs migration)

fontSize '{authentication.font.size.user}' = DATA INTEGER (CustomUser); 

CLASS ColorTheme '{authentication.color.theme}' {
    light '{authentication.color.theme.light}',
    dark '{authentication.color.theme.dark}'
}
TABLE colorTheme(ColorTheme);
colorTheme '{authentication.color.theme.user}' = DATA ColorTheme (CustomUser);
colorThemeStaticName (CustomUser user) = staticName(colorTheme(user));
name '{authentication.color.theme}' (ColorTheme theme) = staticCaption(theme) IF theme IS ColorTheme;
colorThemeName '{authentication.color.theme.user}' (CustomUser user) = name(colorTheme(user));

isDarkTheme() = colorTheme(currentUser()) == ColorTheme.dark;

changeColorThemeAction INTERNAL 'lsfusion.server.logics.navigator.ChangeColorThemeAction'(ColorTheme) NULL;
WHEN CHANGED(colorTheme(CustomUser user)) DO {
    changeColorThemeAction(colorTheme(user));    
}

FORM dialogColorThemes '{authentication.color.themes}'
    OBJECTS o = ColorTheme
    PROPERTIES(o) READONLY name
    
    LIST ColorTheme OBJECT o
;

// -------------------------- Forms ---------------------------- //

// sync user logins saved on client 
syncUsers ABSTRACT LIST (ISTRING[100], JSONFILE) @@noauth;
syncUsers (ISTRING[100] computer, JSONFILE users) + { 
    LOCAL syncSavedUser = BPSTRING[100](INTEGER);
    IMPORT FROM users TO syncSavedUser=value;
    EXPORT FROM value=STRING s WHERE s = syncSavedUser(INTEGER i) AND customUserNormalized(s) AND NOT isLockedLogin(s);
}

FORM customUser '{authentication.custom.user}'
    OBJECTS u=CustomUser PANEL
    PROPERTIES(u) login, sha256Password ON CHANGE changeSHA256Password(u), isLocked ,
                  firstName, lastName, email, phone, postAddress, birthday,
                  useClientLocale, userLanguage SHOWIF NOT useClientLocale(u), userCountry SHOWIF NOT useClientLocale(u), 
                  userTimeZone, userTwoDigitYearStart,
                  useClientDateTimeFormat, userDateFormat SHOWIF NOT useClientDateTimeFormat(u), userTimeFormat SHOWIF NOT useClientDateTimeFormat(u)

    EDIT CustomUser OBJECT u
;

DESIGN customUser {
    OBJECTS {
        NEW pane {
            type = SPLITH;
            fill = 1;
            NEW header {
                fill = 1;
                NEW login {
                    alignment = STRETCH;
                    caption = '{authentication.custom.user.login}';
                    MOVE PROPERTY(login(u));    
                    MOVE PROPERTY(sha256Password(u));
                    MOVE PROPERTY(isLocked(u));    
                }
                NEW info {
                    alignment = STRETCH;
                    caption = '{authentication.custom.user.info}';
                    MOVE PROPERTY(firstName(u));
                    MOVE PROPERTY(lastName(u));
                    MOVE PROPERTY(email(u));
                    MOVE PROPERTY(phone(u));
                    MOVE PROPERTY(postAddress(u));
                    MOVE PROPERTY(birthday(u));
                }
                NEW locale {
                    alignment = STRETCH;
                    caption = '{authentication.custom.user.locale}';
                    MOVE PROPERTY(useClientLocale(u));
                    MOVE PROPERTY(userLanguage(u));
                    MOVE PROPERTY(userCountry(u));
                    MOVE PROPERTY(userTimeZone(u));
                    MOVE PROPERTY(userTwoDigitYearStart(u));
                    MOVE PROPERTY(useClientDateTimeFormat(u));
                    MOVE PROPERTY(userDateFormat(u));
                    MOVE PROPERTY(userTimeFormat(u));
                }
                NEW security {
                    alignment = STRETCH;
                    caption = '{authentication.custom.user.security}';
                }
                MOVE BOX(u);
            }
            NEW details {
                type = TABBED;
                fill = 3;
            }
        }
    }
    NEW container BEFORE TOOLBARBOX {
        type = CONTAINERH;
        fill = 1;
        MOVE BOX(u) {
            flex = 0.3;
        };
        GROUP(,u) {
            type = COLUMNS;
            columns = 1;
        }
    }
}

FORM customUsers '{authentication.users}'
    OBJECTS u = CustomUser

    PROPERTIES(u) READONLYIF isReadonly() name, login, email
    PROPERTIES(u) READONLYIF isReadonly() isLocked

    PROPERTIES(u) NEWSESSION NEW, EDIT, DELETE 

    OBJECTS lu = CustomUser
    PROPERTIES(lu) READONLY                name, login, email
    PROPERTIES(lu) READONLYIF isReadonly() userLanguage BACKGROUND RGB(232,232,255), 
                                           userCountry BACKGROUND RGB(232,232,255), 
                                           useClientLocale, clientLanguage READONLY, clientCountry READONLY,
                                           userTimeZone BACKGROUND RGB(232,232,255), userTwoDigitYearStart BACKGROUND RGB(232,232,255),
                                           userDateFormat BACKGROUND RGB(232,232,255), 
                                           userTimeFormat BACKGROUND RGB(232,232,255), 
                                           useClientDateTimeFormat, clientDateFormat READONLY, clientTimeFormat READONLY 
    PROPERTIES(lu) NEWSESSION EDIT

    PROPERTIES() READONLY defaultUserLanguage, defaultUserCountry, defaultUserTimezone, defaultUserTwoDigitYearStart, defaultUserDateFormat, defaultUserTimeFormat
    PROPERTIES() READONLY serverLanguage, serverCountry, serverTimezone, serverTwoDigitYearStart, serverDateFormat, serverTimeFormat

    PROPERTIES() useLDAP, serverLDAP, portLDAP, baseDNLDAP, userDNSuffixLDAP
    
    OBJECTS auth = OAuth2 
    PROPERTIES(auth)  NEW, DELETE,
                      id,
                      clientId,
                      clientSecret,
                      clientAuthenticationMethod,
                      scope,
                      authorizationUri,
                      tokenUri,
                      jwkSetUri,
                      userInfoUri,
                      userNameAttributeName,
                      clientName
    PROPERTIES () webClientSecretKey
;

DESIGN customUsers {
    OBJECTS {
        NEW pane {
            type = TABBED;
            fill = 1;
            NEW users {
                caption = '{authentication.users}';
                MOVE BOX(u);
            }
            NEW locale {
                caption = '{authentication.locale}';
                NEW headerLocale {
                    type = CONTAINERH;
                    MOVE PROPERTY(defaultUserLanguage());
                    MOVE PROPERTY(defaultUserCountry());
                    MOVE PROPERTY(defaultUserTimezone());
                    MOVE PROPERTY(defaultUserTwoDigitYearStart());
                    MOVE PROPERTY(defaultUserDateFormat());
                    MOVE PROPERTY(defaultUserTimeFormat());
                    MOVE PROPERTY(serverLanguage());
                    MOVE PROPERTY(serverCountry());
                    MOVE PROPERTY(serverTimezone());
                    MOVE PROPERTY(serverTwoDigitYearStart());
                    MOVE PROPERTY(serverDateFormat());
                    MOVE PROPERTY(serverTimeFormat());
                }
                MOVE BOX(lu) {
                    GRID(lu) { headerHeight = 50; }
                }
            }
            NEW LDAP {
                caption = 'LDAP';
                MOVE PROPERTY(useLDAP());
                MOVE PROPERTY(serverLDAP());
                MOVE PROPERTY(portLDAP());
                MOVE PROPERTY(baseDNLDAP());
                MOVE PROPERTY(userDNSuffixLDAP());
            } 
            NEW OAUTH2 {
                caption = 'OAUTH2';
                MOVE BOX (auth){
                    GRID (auth){
                    headerHeight = 50;
                    }
                }
            }
            NEW WEBAUTH {
                caption = 'WEB-AUTH';
                MOVE PROPERTY(webClientSecretKey());
            }
        }
    }
}

@extendFormEditable(customUsers);

FORM customUsersDialog '{authentication.users}'
    OBJECTS u=CustomUser
    PROPERTIES(u) READONLY name, login, email

    LIST CustomUser OBJECT u
;

DESIGN customUsersDialog { BOX { size = (1024, 768); } }

FORM editProfile '{navigator.account.edit.profile}'
    OBJECTS u = CustomUser PANEL
    PROPERTIES(u) login READONLY
    PROPERTIES(u) firstName, lastName, email, userLanguage

    FILTERS u = currentUser()
;

DESIGN editProfile {
    OBJECTS {
        NEW commons {
            caption = '{navigator.account.edit.profile.commons}';
            MOVE PROPERTY(login(u)) { fontSize = 36; }
            MOVE PROPERTY(firstName(u)) { fontSize = 36; }
            MOVE PROPERTY(lastName(u)) { fontSize = 36; }
            MOVE PROPERTY(email(u)) { fontSize = 36; }
            MOVE PROPERTY(userLanguage(u)) { fontSize = 36; }
        }
    }
    
}

// ---------------- Relogin ------------------- //

userChanged() = DATA LOCAL BOOLEAN();

// change by login and password
FORM reloginLoginUser '{authentication.relogin}'
    OBJECTS data = (login = BPSTRING[100], password = BPSTRING[30])  PANEL
    PROPERTIES valueLogin = VALUE(login), valuePassword = VALUE(password)
;

DESIGN reloginLoginUser {
    BOX(data) {
        caption = '';
        GROUP(, data) {
            type = CONTAINERV;
            columns = 1;
            PROPERTY(valueLogin){
                caption = '{authentication.login}';
                fontSize = 36;
            }
            PROPERTY(valuePassword){
                caption = '{authentication.password}';
                echoSymbols = TRUE;
                fontSize = 36;
            }
        }
    }
    REMOVE TOOLBARLEFT;
    REMOVE PROPERTY(formRefresh());
}

relogin '{authentication.relogin}'  INTERNAL  'lsfusion.server.physics.admin.authentication.action.ReloginUserAction' (CustomUser);

reloginLoginUser()  { 
    DIALOG reloginLoginUser OBJECTS login INPUT, password INPUT DO {
        LOCAL user = CustomUser();
        user() <- customUserNormalized(login);
        IF user() THEN {
            IF isLocked(user()) THEN {
                MESSAGE '{authentication.relogin.user.locked}';
            } ELSE {
                calculateBase64Hash('SHA-256', password);
                IF sha256Password(user()) == calculatedHash() THEN {
                    relogin(user());
                    IF userChanged() THEN {
                        MESSAGE '{authentication.relogin.user.changed}';
                    }
                } ELSE {
                    MESSAGE '{authentication.relogin.user.incorrect.password}';
                }
            }
        } ELSE {
            MESSAGE '{authentication.relogin.user.not.found}';
        }
    }
    APPLY;
}

// Change by password
FORM reloginPasswordUser '{authentication.relogin}'
    OBJECTS password = BPSTRING[30] PANEL
    PROPERTIES valuePassword = VALUE(password)
;

DESIGN reloginPasswordUser {
    BOX(password) {
        caption = '';
        PROPERTY(valuePassword){
            caption = '{authentication.password}';
            fontSize = 36;
        }
    }
    REMOVE TOOLBARLEFT;
    REMOVE PROPERTY(formRefresh());
}

reloginPassword(CustomUser customUser)  { 
    DIALOG reloginPasswordUser OBJECTS password INPUT DO {
        IF isLocked(customUser) THEN {
            MESSAGE '{authentication.relogin.user.locked}';
        }  ELSE {
                calculateBase64Hash('SHA-256', password);
                IF sha256Password(customUser)==calculatedHash() THEN {
                    relogin(customUser);
                    IF userChanged() THEN {
                        MESSAGE '{authentication.relogin.user.changed}';
                    }
                } ELSE {
                    MESSAGE '{authentication.relogin.user.incorrect.password}';
                }
        }
    }
}

// ---------------- Change password ------------------- //

FORM changePasswordUser '{authentication.change.password}'
    OBJECTS u=CustomUser PANEL
    PROPERTIES(u) READONLY login

    OBJECTS passwords = (old = BPSTRING[30], new1 = BPSTRING[30], new2 = BPSTRING[30]) PANEL
    PROPERTIES valueOld = VALUE(old), valueNew1 = VALUE(new1), valueNew2 = VALUE(new2)

    FILTERS u = currentUser()
;

DESIGN changePasswordUser {
    OBJECTS {
        NEW changePassword {
            MOVE PROPERTY(login(u)) {
                fontSize = 36;
            }
            MOVE PROPERTY(valueOld){
                caption = '{authentication.change.password.old}';
                echoSymbols = TRUE;
                fontSize = 36;
            }
            MOVE PROPERTY(valueNew1){
                caption = '{authentication.change.password.new}';
                echoSymbols = TRUE;
                fontSize = 36;
            }
            MOVE PROPERTY(valueNew2){
                caption = '{authentication.change.password.repeat}';
                echoSymbols = TRUE;
                fontSize = 36;
            }
        }
    }
    REMOVE TOOLBARLEFT;
    REMOVE PROPERTY(formRefresh());
}

changePassword(CustomUser customUser)  { 
    DIALOG changePasswordUser OBJECTS old INPUT, new1 INPUT,new2 INPUT DO {
        calculateBase64Hash('SHA-256', old);
        IF calculatedHash() != sha256Password(customUser) THEN {
            MESSAGE '{authentication.change.password.incorrect.old}';
            BREAK;
        }

        IF new1 != new2 THEN {
            MESSAGE '{authentication.change.password.do.not.match}';
            BREAK;
        }
        calculateBase64Hash('SHA-256', new1);
        sha256Password(customUser) <- calculatedHash();
        APPLY;
        IF NOT canceled() THEN
            MESSAGE '{authentication.change.password.complete}';
    }
}

changePassword () { 
    changePassword(currentUser());
}

NAVIGATOR {
    system {
        NEW FOLDER security '{navigator.security}' AFTER scheduler {
            NEW customUsers;
            NEW computers;
        }
    }
    NEW FOLDER account '{navigator.account}' WINDOW toolbar IMAGE 'lock.png' {
        NEW ACTION reloginLoginUserAction '{navigator.account.relogin}' = reloginLoginUser[] IMAGE 'relogin.png';
        NEW editProfile IMAGE 'editProfile.png';
        NEW ACTION changePasswordAction '{navigator.account.change.password}' = changePassword[] IMAGE 'changePassword.png';
        NEW ACTION logOutAction '{navigator.account.logout}' = restart[] IMAGE 'logout.png';
    }
}

// Notifications
deliveredNotificationAction  ABSTRACT LIST ( CustomUser);

// -------------------------- Object locks ---------------------------- //

locked = DATA User (Object);
lockResult = DATA LOCAL NESTED BOOLEAN ();

lock(Object object)  { 
	NEWSESSION {    
	    lockResult() <- NULL;
	    APPLY SERIALIZABLE {
	        IF NOT object THEN
	            RETURN;
	        IF locked(object) THEN {
	            cancel();
	        } ELSE {
	            locked(object) <- currentUser();
	            lockResult() <- TRUE;
	        }
	    }
	}
}

unlock(Object object)  { 
	NEWSESSION { 
	    APPLY locked(object) <- NULL;
	}
}
