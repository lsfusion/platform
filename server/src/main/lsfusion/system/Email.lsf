MODULE Email;

REQUIRE System, Reflection, SystemEvents;

// -------------- Account ----------------- //
CLASS Account '{email.account}';
TABLE account (Account);

name '{email.name.account}' = DATA STRING[50](Account);
password '{email.password.account}' = DATA STRING[50](Account) ECHO;
disable '{email.disable.account}' = DATA BOOLEAN(Account);
insecureSSL '{email.insecure.ssl}' = DATA BOOLEAN(Account); 

// Sending
smtpHost '{email.smtp.host.account}' = DATA STRING[50](Account);
smtpPort '{email.smtp.port.account}' = DATA STRING[10](Account);

CLASS EncryptedConnectionTypeStatus '{email.encrypted.connection.type.status}' {
    SSL '{email.encrypted.connection.type.status.ssl}',
    TLS '{email.encrypted.connection.type.status.tls}'
}
TABLE encryptedConnectionTypeStatus(EncryptedConnectionTypeStatus);

name '{email.encrypted.connection.type.status}' (EncryptedConnectionTypeStatus s) = staticCaption(s) IF s IS EncryptedConnectionTypeStatus;
FORM encryptedConnectionTypeStatuses '{email.encrypted.connection.type.status}'
    OBJECTS s = EncryptedConnectionTypeStatus
    PROPERTIES(s) READONLY name
    LIST EncryptedConnectionTypeStatus OBJECT s
;

encryptedConnectionType = DATA EncryptedConnectionTypeStatus(Account);
nameEncryptedConnectionType '{email.encrypted.connection.type.account}' (Account account) = name(encryptedConnectionType(account)) CHARWIDTH 3;

fromAddress '{email.from.address.account}' = DATA STRING[50] (Account);
accountFromAddress = GROUP AGGR Account account WHERE account IS Account BY fromAddress (account); 

isDefaultInbox '{email.is.default.inbox.account}' = DATA BOOLEAN (Account);
defaultInboxAccount = GROUP MAX Account account IF isDefaultInbox(account);
inboxAccount (STRING[100] fromAddress) = OVERRIDE accountFromAddress(fromAddress), defaultInboxAccount();

// Receiving
receiveHost '{email.receive.host.account}' = DATA STRING[50](Account);
receivePort '{email.receive.port.account}' = DATA INTEGER(Account);

CLASS ReceiveAccountType '{email.receive.account.type}' {
    POP3 '{email.receive.account.type.pop3}',
    POP3S '{email.receive.account.type.pop3s}',
    IMAP '{email.receive.account.type.imap}',
    IMAPS '{email.receive.account.type.imaps}'
}
TABLE receiveAccountType(ReceiveAccountType);

name '{email.receive.account.type}' (ReceiveAccountType s) = staticCaption(s) IF s IS ReceiveAccountType;
FORM receiveAccountTypes '{email.receive.account.type}'
    OBJECTS r = ReceiveAccountType
    PROPERTIES(r) READONLY name
    LIST ReceiveAccountType OBJECT r
;

receiveAccountType = DATA ReceiveAccountType(Account);
nameReceiveAccountType '{email.receive.account.type.account}' (Account account) = name(receiveAccountType(account));

startTLS '{email.receive.start.tls}' = DATA BOOLEAN (Account);

imapsMigrated = DATA BOOLEAN();
onStarted() + { 
    IF NOT imapsMigrated() THEN {
        receiveAccountType(Account a) <- ReceiveAccountType.IMAPS WHERE receiveAccountType(a) == ReceiveAccountType.IMAP;
        imapsMigrated() <- TRUE; 
    }   
}

deleteMessages '{email.delete.messages.account}' = DATA BOOLEAN(Account);
lastDays '{email.last.days.account}' = DATA INTEGER(Account) CHARWIDTH 10 NOFLEX;
maxMessages '{email.max.messages.account}' = DATA INTEGER(Account) CHARWIDTH 10 NOFLEX;
unpack '{email.unpack.account}' = DATA BOOLEAN (Account);
ignoreExceptions '{email.ignore.exceptions.account}' = DATA BOOLEAN (Account);
readAllFolders '{email.read.all.folders}' = DATA BOOLEAN (Account);

FORM account '{email.form.account}'
    OBJECTS a = Account PANEL
    PROPERTIES(a) name, password, disable, insecureSSL
    PROPERTIES(a) smtpHost, smtpPort, nameEncryptedConnectionType, fromAddress, isDefaultInbox 
    PROPERTIES(a) receiveHost, receivePort, nameReceiveAccountType, startTLS,
                  deleteMessages, lastDays, maxMessages, unpack, ignoreExceptions, readAllFolders
                   
    EDIT Account OBJECT a
;

DESIGN account {
    OBJECTS {
        NEW header {
            caption = '{email.form.account}';
            horizontal = TRUE;
            MOVE PROPERTY(name(a));
            MOVE PROPERTY(password(a));
            MOVE PROPERTY(disable(a));
            MOVE PROPERTY(insecureSSL(a));
        }
        NEW email {
            horizontal = TRUE;
            NEW sending {
                caption = '{email.form.account.sending}';
                MOVE PROPERTY(smtpHost(a));
                MOVE PROPERTY(smtpPort(a));
                MOVE PROPERTY(nameEncryptedConnectionType(a));
                MOVE PROPERTY(fromAddress(a));
                MOVE PROPERTY(isDefaultInbox(a));
            }
            NEW receiving {
                caption = '{email.form.account.receiving}';
                MOVE PROPERTY(receiveHost(a));
                MOVE PROPERTY(receivePort(a));
                MOVE PROPERTY(nameReceiveAccountType(a));
                MOVE PROPERTY(startTLS(a));
                MOVE PROPERTY(deleteMessages(a));
                MOVE PROPERTY(lastDays(a));
                MOVE PROPERTY(maxMessages(a));
                MOVE PROPERTY(unpack(a));
                MOVE PROPERTY(ignoreExceptions(a));
                MOVE PROPERTY(readAllFolders(a));
            } 
        }        
    }
}

FORM accounts '{email.form.accounts}'
   
    OBJECTS a = Account
    PROPERTIES(a) READONLY name, disable
    PROPERTIES(a) NEWSESSION NEW, EDIT, DELETE 

    LIST Account OBJECT a
;

// -------------- Folder ----------------- //

CLASS Folder '{email.folder}';
TABLE folder (Folder);
account = DATA Account (Folder) NONULL DELETE;
id '{email.folder}' = DATA STRING (Folder);
folder = GROUP AGGR Folder folder BY account(folder), id(folder);
parent = DATA Folder (Folder);

// -------------- Email ----------------- //

// Email
CLASS Email '{email.email}';
TABLE email(Email);

folder = DATA Folder(Email);
id = DATA STRING (Email);  
//todo: replace after migration
//account(Email e) = account(folder(e));
account(Email e) = DATA Account (Email) NONULL DELETE;
emailId = GROUP AGGR Email email BY account(email), id (email);

//todo: remove after upgrading to 6.0
migrated = DATA BOOLEAN();
onStarted() + {
    IF NOT migrated() THEN {
        FOR name(Account a) DO {
            NEW f = Folder {
                account(f) <- a;
                id(f) <- 'INBOX';
                folder(Email e) <- f WHERE account(e) == a;
            }
        }
        migrated() <- TRUE;
    }
}

uid = DATA LONG (Email);  
emailAccountUID = GROUP AGGR Email email BY account(email), uid (email); 

subject '{email.subject.email}' = DATA STRING (Email) CHARWIDTH 50;
fromAddress '{email.from.address.email}' = DATA STRING (Email);
toAddress '{email.to.address.email}' = DATA STRING (Email);
ccAddress '{email.cc.address.email}' = DATA STRING (Email);
bccAddress '{email.bcc.address.email}' = DATA STRING (Email);
dateTimeSent '{email.date.time.sent.email}' = DATA DATETIME (Email);
dateSent '{email.date.sent.email}' = DATE(dateTimeSent(Email e));
dateTimeReceived '{email.date.time.received.email}' = DATA DATETIME (Email);
message '{email.message.email}' = DATA HTMLTEXT (Email);
emlFile '{email.eml.file.email}' = DATA FILE (Email);
openEMLFile '{email.open.eml.file.email}' (Email email)  { open(emlFile(email)); }

skipFilter(Email email, Account account, DATETIME minDateTime) = fromAddress(email) AND account(email) == account AND (NOT minDateTime OR dateTimeSent(email) >= minDateTime); 

// Attachment
CLASS AttachmentEmail '{email.attachment.email}';
TABLE attachmentEmail(AttachmentEmail);

id = DATA STRING[100] (AttachmentEmail);  
imported '{email.imported.attachment.email}' = DATA BOOLEAN (AttachmentEmail);  
markImported '{email.mark.imported.attachment.email}' (AttachmentEmail ae)  { 
    IF NOT imported(ae) THEN imported(ae) <- TRUE;
}
importError '{email.import.error.attachment.email}' = DATA BOOLEAN (AttachmentEmail);  
showError (AttachmentEmail attachmentEmail) = NOT imported (attachmentEmail) OR importError(attachmentEmail)
                                                            AND attachmentEmail IS AttachmentEmail;
notImported (AttachmentEmail attachmentEmail) = NOT imported (attachmentEmail) AND NOT importError(attachmentEmail)
                                                            AND attachmentEmail IS AttachmentEmail;
email = DATA Email (AttachmentEmail) NONULL DELETE;
attachmentEmail (id, email) = GROUP AGGR AttachmentEmail attachment WHERE attachment IS AttachmentEmail BY id (attachment), id(email(attachment));
 
name '{email.name.attachment.email}' = DATA STRING[255] (AttachmentEmail);
file '{email.file.attachment.email}' = DATA FILE (AttachmentEmail);
filename '{email.name.attachment.email}' (AttachmentEmail ae) = CONCAT '.', name(ae), extension(file(ae)); 
openFile '{email.open.file.attachment.email}' (AttachmentEmail attachmentEmail)  { open(file(attachmentEmail)); }
saveFile '{email.save.file.attachment.email}' (AttachmentEmail attachmentEmail)  { WRITE CLIENT DIALOG file(attachmentEmail) TO name(attachmentEmail);}
lastError '{email.last.error.attachment.email}' = DATA TEXT (AttachmentEmail);
importErrors '{email.import.errors}' (Email e) = GROUP MAX importError(AttachmentEmail ae) BY email(ae);

// Receive actions
receiveEmailAction '{email.receive.email.action}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.mail.ReceiveEmailAction' ();
receiveEmailAction '{email.receive.email.action.account}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.mail.ReceiveEmailAccountAction' (Account);

receiveEML '{email.receive.eml}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.mail.ReceiveEMLAction' (Account);
importEML '{email.import.eml}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.mail.ImportEMLAction' (Account, LONG, FILE);

emlFile '{email.eml.file}' = DATA LOCAL FILE (LONG);

receiveMail '{email.receive.mail}' (Account account) {
    receiveEML(account);
    FOR(emlFile(LONG uid)) DO {
        importEML(account, uid, emlFile(uid));
    }
}

FORM mail '{email.form.mail}' 
    OBJECTS a=Account
    PROPERTIES(a) READONLY name, disable
    PROPERTIES(a) NEWSESSION NEW, EDIT, DELETE

    TREE folderTree f = Folder PARENT parent(f)
    PROPERTIES(f) id
    FILTERS account(f) = a
    
    OBJECTS e=Email LAST
    PROPERTIES(e) READONLY subject, fromAddress, toAddress, ccAddress, bccAddress, dateTimeSent, 
                           dateTimeReceived, importErrors, openEMLFile CHANGEABLE GRID
    PROPERTIES SHOWIF isWeb() message '' = HTML(HTMLFILE(message(e))) PANEL 
    PROPERTIES(e) SHOWIF isNative() '' = message PANEL
    PROPERTIES(e) NEWSESSION DELETE
    PROPERTIES(a) receiveEmailAction TOOLBAR DRAW e 
    FILTERS folder(e) == f, dateTimeReceived(e)
                    
    OBJECTS ae = AttachmentEmail
    PROPERTIES(ae) READONLY imported, importError, filename, lastError PANEL
    PROPERTIES(ae) GRID openFile, saveFile, markImported
    FILTERS email(ae) = e
;

DESIGN mail {
    OBJECTS {
        NEW top {
            fill = 1;
            horizontal = TRUE;
            NEW accountFolder {
                width = 300;
                fill = 1;
                MOVE BOX(a);
                MOVE BOX(TREE folderTree);
            }
            MOVE BOX(e) { fill = 3; }
        }
        NEW content {
            fill = 1;
            height = 300;
            tabbed = TRUE;
            NEW message {
                height = 200;
                fill = 1;
                caption = '{email.form.mail.caption.message}';
                MOVE PROPERTY(message) {
                    fill = 1;
                }
                MOVE PROPERTY(message(e)) { fill = 1; }
            }
            NEW attachments {
                fill = 1;
                caption = '{email.form.mail.caption.attachments}';
                horizontal = TRUE;
                MOVE BOX(ae) {
                    PROPERTY(filename(ae)) { autoSize = TRUE; }
                    GRID(ae) {
                        height = 100;
                    }
                }
                MOVE PROPERTY (lastError(ae)){ 
                    panelCaptionVertical = TRUE;
                    fill = 0.3;
                }
            }
        }
    }
}

NAVIGATOR {
    notification {
        NEW mail;
    }
}