MODULE System;

NAMESPACE System;

CLASS NATIVE Object;

GROUP NATIVE root '{system.group.root}';
GROUP NATIVE public '{system.group.public}' : root;
GROUP NATIVE private '{system.group.private}' : root;

CLASS NATIVE StaticObject;
TABLE staticObject (StaticObject) NODEFAULT;

CLASS NATIVE CustomObjectClass : StaticObject;
TABLE customObjectClass (CustomObjectClass);
objectClass = NATIVE CustomObjectClass (Object);

random = NATIVE DOUBLE ();
randomUUID = FORMULA STRING[100] 'md5(random()::text || clock_timestamp()::text)::cstring';
//watch = NATIVE (); 

stat '{system.stat.class}' = DATA INTEGER (CustomObjectClass);

GROUP NATIVE base '{system.group.base}' : public;
GROUP NATIVE id '{system.group.id}' : base;

GROUP drillDown '{system.group.drill.down}' : root;
GROUP propertyPolicy '{system.group.property.policy}' : root;

canceled = DATA LOCAL BOOLEAN ();
applyMessage = DATA LOCAL TEXT ();
empty()  { };
empty(Object o)  { };

logMessage = DATA LOCAL TEXT ();

apply  { APPLY; }
cancel  { CANCEL; }

responseTcp = DATA LOCAL RAWFILE();
timeoutTcp = DATA LOCAL INTEGER();

statusHttp = DATA LOCAL INTEGER();
failedHttp = statusHttp() < 200 OR statusHttp() >= 300;
statusHttpTo = DATA LOCAL NESTED INTEGER();
timeoutHttp() = DATA LOCAL INTEGER ();

headers = DATA LOCAL NESTED TEXT(TEXT);    
cookies = DATA LOCAL NESTED TEXT(TEXT);    
headersTo = DATA LOCAL NESTED TEXT(TEXT);
cookiesTo = DATA LOCAL NESTED TEXT(TEXT);
query = DATA LOCAL NESTED TEXT();
params = DATA LOCAL NESTED TEXT(TEXT);
contentType = DATA LOCAL NESTED TEXT();
body = DATA LOCAL NESTED RAWFILE();
appHost = DATA LOCAL NESTED TEXT();
appPort = DATA LOCAL NESTED INTEGER();
exportName = DATA LOCAL NESTED TEXT();
scheme = DATA LOCAL NESTED TEXT();
method = DATA LOCAL NESTED TEXT();
webHost = DATA LOCAL NESTED TEXT();
webPort = DATA LOCAL NESTED INTEGER();
contextPath = DATA LOCAL NESTED TEXT();
servletPath = DATA LOCAL NESTED TEXT();
pathInfo = DATA LOCAL NESTED TEXT();
webPath() = scheme() + '://' + webHost() + ':' + webPort() + contextPath();
url() = webPath() + servletPath() + pathInfo(); 

messageCaughtException = DATA LOCAL TEXT();
javaStackTraceCaughtException = DATA LOCAL TEXT();
lsfStackTraceCaughtException = DATA LOCAL TEXT();

upper = FORMULA 'upper($1)';    
lower = FORMULA 'lower($1)';   

formApply '{action.form.save}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.lifecycle.FormApplyAction' () CHANGEKEY 'alt ENTER' IMAGE 'apply.png';
formCancel '{action.form.cancel}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.lifecycle.FormCancelAction' () CHANGEKEY 'shift ESCAPE' IMAGE 'cancel.png';
formEditReport '{action.form.edit}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.lifecycle.EditReportAction' () CHANGEKEY 'ctrl E' IMAGE 'editReport.png';
formDrop '{action.form.drop}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.lifecycle.DropAction' () CHANGEKEY 'alt DELETE';
formRefresh '{action.form.refresh}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.lifecycle.RefreshAction' () CHANGEKEY 'F5;priority=-100' IMAGE 'refresh.png';
formOk '{action.form.ok}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.lifecycle.OkAction' () CHANGEKEY 'ctrl ENTER' CHANGEMOUSE 'DBLCLK;priority=1000;dialog=only;group=input;preview=only' IMAGE 'ok.png';
formClose '{action.form.close}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.lifecycle.CloseAction' () CHANGEKEY 'ESCAPE' IMAGE 'close.png';

formApplied ABSTRACT LIST FIRST (); 
formApplied() + {
    MESSAGE '{form.instance.changes.saved}' NOWAIT LOG;
}

seek '{system.seek}'  INTERNAL  'lsfusion.server.logics.form.interactive.action.seek.SeekInternalAction' (Object);

sleep '{system.sleep}'  INTERNAL  'lsfusion.server.logics.action.flow.SleepAction' (LONG);

sessionOwners = DATA LOCAL NESTED MANAGESESSION INTEGER ();
manageSession = NOT sessionOwners() > 1;

CLASS ListViewType {
    grid 'Grid',
    pivot 'Pivot',
    map 'Map',
    custom 'Custom',
    calendar 'Calendar'
}
count '{form.grid.count}' = 1;
isPivot(ListViewType t) = t == ListViewType.pivot;

applyOnlyWithoutRecalc  INTERNAL  'lsfusion.server.logics.action.session.action.ApplyOnlyWithoutRecalcAction' ();
applyOnlyCalc  INTERNAL  'lsfusion.server.logics.action.session.action.ApplyOnlyCalcAction' ();
applyOnlyCheck  INTERNAL  'lsfusion.server.logics.action.session.action.ApplyOnlyCheckAction' ();
applyOnlyData  INTERNAL  'lsfusion.server.logics.action.session.action.ApplyOnlyDataAction' ();
applyAll  INTERNAL  'lsfusion.server.logics.action.session.action.ApplyAllAction' ();

throwException  INTERNAL  'lsfusion.server.logics.action.flow.ThrowExceptionAction' (TEXT);

setNoCancelInTransaction()  INTERNAL  <{ context.getSession().setNoCancelInTransaction(true); }>;
dropNoCancelInTransaction()  INTERNAL  <{ context.getSession().setNoCancelInTransaction(false); }>;

setNoEventsInTransaction()  INTERNAL  <{ context.getSession().setNoEventsInTransaction(true); }>;
dropNoEventsInTransaction()  INTERNAL  <{ context.getSession().setNoEventsInTransaction(false); }>;

check()  { 
    applyOnlyCheck();
    
    TRY { 
        apply();
    } FINALLY {
        applyAll();
    }    
}

executeLocalEvents  INTERNAL  'lsfusion.server.logics.event.ExecuteLocalEventsAction' (TEXT);
executeLocalEvents()  { executeLocalEvents(NULL); }

staticName '{system.static.name.object}' = DATA BPSTRING[250] (StaticObject) TABLE staticObject;
nameStatic (name) = GROUP NAGGR StaticObject object BY staticName(object);

fillingIDs = DATA LOCAL BOOLEAN ();
CONSTRAINT CHANGED(staticName(StaticObject object)) AND NOT fillingIDs() MESSAGE '{system.constraint.change.staticname.forbidden}';

staticCaption '{system.static.caption.object}' = DATA BPISTRING[100] (StaticObject) TABLE staticObject IN id;

objectClassName '{system.object.class.name.object}' (Object o) = staticCaption(objectClass(o));
prevObjectClassName '{system.object.class.name.object}' (Object o) = staticCaption(PREV(objectClass(o)));

defaultBackgroundColor '{system.default.background.color}' = DATA COLOR ();
defaultOverrideBackgroundColor '{system.default.background.color}' = OVERRIDE defaultBackgroundColor(), RGB(255, 255, 0) MATERIALIZED;
defaultForegroundColor '{system.default.foreground.color}' = DATA COLOR ();
defaultOverrideForegroundColor '{system.default.foreground.color}' = OVERRIDE defaultForegroundColor(), RGB(255, 0, 0) MATERIALIZED;

selectedRowBackgroundColor '{system.selected.row.background.color}' = DATA COLOR ();
selectedCellBackgroundColor '{system.selected.cell.background.color}' = DATA COLOR ();
focusedCellBackgroundColor '{system.focused.cell.background.color}' = DATA COLOR ();
focusedCellBorderColor '{system.focused.cell.border.color}' = DATA COLOR ();
tableGridColor '{system.table.grid.color}' = DATA COLOR ();
  
customReportCharWidth '{system.report.char.width}' = DATA INTEGER ();
customReportRowHeight '{system.report.row.height}' = DATA INTEGER ();
   
defaultReportCharWidth = 8;
defaultReportRowHeight = 18;    
   
reportCharWidth '{system.report.char.width}' = OVERRIDE customReportCharWidth(), defaultReportCharWidth();      
reportRowHeight '{system.report.row.height}' = OVERRIDE customReportRowHeight(), defaultReportRowHeight();
reportNotToStretch '{system.report.not.to.stretch}' = DATA BOOLEAN (); 
reportToStretch '{system.report.to.stretch}' = NOT reportNotToStretch();

hashModules '{system.hash.modules}' = DATA STRING[200] ();

checkIsServer INTERNAL 'lsfusion.server.physics.admin.authentication.action.CheckIsServerAction' ();
isServer = DATA LOCAL BOOLEAN ();

lsfParams(STRING s) = ABSTRACT VALUE STRING(STRING);

// ----------------------------------- open files ----------------------------------- //

//source path, name
open '{system.open.file}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.file.open.OpenPathAction' (ISTRING[255], ISTRING[255]);
open '{system.open.file}' (STRING[255] source)  { open(source, NULL); }
//source file, name
open '{system.open.file}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.file.open.OpenFileAction' (FILE, ISTRING[255]);
open '{system.open.file}' (FILE source)  { open(source, NULL); }
//source namedFile
open '{system.open.file}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.file.open.OpenNamedFileAction' (NAMEDFILE);
//source rawFile, name
open '{system.open.file}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.file.open.OpenRawFileAction' (RAWFILE, ISTRING[255]);
open '{system.open.file}' (RAWFILE source)  { open(source, NULL); }
//source link
open '{system.open.link}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.file.open.OpenLinkAction' (LINK);
//source rawLink
open '{system.open.link}'  INTERNAL  'lsfusion.server.physics.dev.integration.external.to.file.open.OpenRawLinkAction' (RAWLINK);

// ----------------------------------- open html link in tab ----------------------------------- //

htmlLinkInTab '' = DATA LOCAL HTMLLINK();
FORM htmlLinkInTab 'Web Page'
PROPERTIES() READONLY htmlLinkInTab;
DESIGN htmlLinkInTab {
    NEW panel {
        fill = 1;
        type = CONTAINERH;
        MOVE PROPERTY(htmlLinkInTab()) {
            fill = 1;
        }
    };
    REMOVE TOOLBARBOX;
}
htmlLinkInTab(HTMLLINK htmlLink) {
    htmlLinkInTab() <- htmlLink;
    SHOW htmlLinkInTab DOCKED;
}
  
addedObject() = DATA LOCAL Object ();
formPageCount() = DATA LOCAL INTEGER ();

exportObject = DATA LOCAL Object ();
exportBpString = DATA LOCAL BPSTRING ();
exportString = DATA LOCAL STRING ();
exportText = DATA LOCAL TEXT ();
exportRichText = DATA LOCAL RICHTEXT ();
exportHTMLText = DATA LOCAL HTMLTEXT ();
exportInteger = DATA LOCAL INTEGER ();
exportLong = DATA LOCAL LONG ();
exportDouble = DATA LOCAL DOUBLE ();
exportNumeric = DATA LOCAL NUMERIC ();
exportYear = DATA LOCAL YEAR ();
exportDateTime = DATA LOCAL DATETIME ();
exportZDateTime = DATA LOCAL ZDATETIME ();
exportIntervalDate = DATA LOCAL INTERVAL[DATE] ();
exportIntervalDateTime = DATA LOCAL INTERVAL[DATETIME] ();
exportIntervalTime = DATA LOCAL INTERVAL[TIME] ();
exportIntervalZDateTime = DATA LOCAL INTERVAL[ZDATETIME] ();
exportBoolean = DATA LOCAL BOOLEAN ();
exportTBoolean = DATA LOCAL TBOOLEAN ();
exportDate = DATA LOCAL DATE ();
exportTime = DATA LOCAL TIME ();
exportColor = DATA LOCAL COLOR ();
exportJSON = DATA LOCAL JSON ();
exportWordFile = DATA LOCAL WORDFILE ();
exportImageFile = DATA LOCAL IMAGEFILE ();
exportPdfFile = DATA LOCAL PDFFILE ();
exportDbfFile = DATA LOCAL DBFFILE ();
exportRawFile = DATA LOCAL RAWFILE ();
exportFile = DATA LOCAL FILE ();
exportExcelFile = DATA LOCAL EXCELFILE ();
exportTextFile = DATA LOCAL TEXTFILE ();
exportCsvFile = DATA LOCAL CSVFILE ();
exportHtmlFile = DATA LOCAL HTMLFILE ();
exportJsonFile = DATA LOCAL JSONFILE ();
exportXmlFile = DATA LOCAL XMLFILE ();
exportTableFile = DATA LOCAL TABLEFILE ();
exportNamedFile = DATA LOCAL NAMEDFILE ();
exportWordLink = DATA LOCAL WORDLINK ();
exportImageLink = DATA LOCAL IMAGELINK ();
exportPdfLink = DATA LOCAL PDFLINK ();
exportDbfLink = DATA LOCAL DBFLINK ();
exportRawLink = DATA LOCAL RAWLINK ();
exportLink = DATA LOCAL LINK ();
exportExcelLink = DATA LOCAL EXCELLINK ();    
exportTextLink = DATA LOCAL TEXTLINK ();    
exportCsvLink = DATA LOCAL CSVLINK ();    
exportHtmlLink = DATA LOCAL HTMLLINK ();    
exportJsonLink = DATA LOCAL JSONLINK ();    
exportXmlLink = DATA LOCAL XMLLINK ();    
exportTableLink = DATA LOCAL TABLELINK ();    

importFile() = DATA LOCAL FILE ();
imported = DATA LOCAL BOOLEAN (INTEGER);
importedString = DATA LOCAL BOOLEAN (STRING[10]);

readFile = DATA LOCAL FILE ();

showResult = DATA LOCAL TEXT();

//cast to FILE and NAMEDFILE
file(RAWFILE rawFile, STRING extension) = FORMULA FILE 'cast_static_file_to_dynamic_file($1, $2)';
setExtension(RAWFILE rawFile, STRING extension) = FORMULA FILE 'cast_static_file_to_dynamic_file($1, $2)'; // backward compatibility
namedFile(RAWFILE rawFile, STRING name, STRING extension) = FORMULA NAMEDFILE 'cast_static_file_to_named_file($1, $2, $3)';
namedFile(FILE file, STRING name) = FORMULA NAMEDFILE 'cast_dynamic_file_to_named_file($1, $2)';

//get name and extension
extension(FILE file) = FORMULA TEXT 'get_extension($1)';
name(NAMEDFILE file) = FORMULA TEXT 'get_named_file_name($1)';
extension(NAMEDFILE file) = FORMULA TEXT 'get_named_file_extension($1)';

getFileExtension(FILE file) = extension(file); //backward compatibility
getExtension = getFileExtension(FILE(file)); //backward compatibility

//change name and extension
file(FILE file, STRING newExtension) = file(RAWFILE(file), newExtension);
namedFile(NAMEDFILE file, STRING newName, STRING newExtension) = namedFile(RAWFILE(file), newName, newExtension);

// converter to the file value, that would be converted to the resource image when this file showing on a form (using IMAGE clauses / image attributes)s
// for example IF condition(a) THEN resourceImage('fa-solid fa-star') ELSE file(a)
resourceImage(STRING resourcePath) = file(TEXTFILE(resourcePath), 'resourceImage');

loadLibrary '{system.load.library}' (path)   { 
    INTERNAL CLIENT path;
}

loadFont '{system.load.font}' (path)   { 
    INTERNAL CLIENT path;
}

beforeCanceled() = DATA LOCAL NESTED BOOLEAN ();
requestCanceled() = DATA LOCAL NESTED BOOLEAN ();
requestPushed() = DATA LOCAL NESTED BOOLEAN ();

requestedObject = DATA LOCAL NESTED Object ();
requestedBpString = DATA LOCAL NESTED BPSTRING[4000] ();
requestedString = DATA LOCAL NESTED STRING[4000] ();
requestedText = DATA LOCAL NESTED TEXT ();
requestedRichText = DATA LOCAL NESTED RICHTEXT ();
requestedHTMLText = DATA LOCAL NESTED HTMLTEXT ();
requestedInteger = DATA LOCAL NESTED INTEGER ();
requestedLong = DATA LOCAL NESTED LONG ();
requestedDouble = DATA LOCAL NESTED DOUBLE ();
requestedNumeric = DATA LOCAL NESTED NUMERIC ();
requestedYear = DATA LOCAL NESTED YEAR ();
requestedDateTime = DATA LOCAL NESTED DATETIME ();
requestedZDateTime = DATA LOCAL NESTED ZDATETIME ();
requestedIntervalDate = DATA LOCAL NESTED INTERVAL[DATE] ();
requestedIntervalDateTime = DATA LOCAL NESTED INTERVAL[DATETIME] ();
requestedIntervalTime = DATA LOCAL NESTED INTERVAL[TIME] ();
requestedIntervalZDateTime = DATA LOCAL NESTED INTERVAL[ZDATETIME] ();
requestedBoolean = DATA LOCAL NESTED BOOLEAN ();
requestedTBoolean = DATA LOCAL NESTED TBOOLEAN ();
requestedDate = DATA LOCAL NESTED DATE ();
requestedTime = DATA LOCAL NESTED TIME ();
requestedColor = DATA LOCAL NESTED COLOR ();
requestedJSON = DATA LOCAL NESTED JSON ();
requestedWordFile = DATA LOCAL NESTED WORDFILE ();
requestedImageFile = DATA LOCAL NESTED IMAGEFILE ();
requestedPdfFile = DATA LOCAL NESTED PDFFILE ();
requestedDbfFile = DATA LOCAL NESTED DBFFILE ();
requestedRawFile = DATA LOCAL NESTED RAWFILE ();
requestedFile = DATA LOCAL NESTED FILE ();
requestedExcelFile = DATA LOCAL NESTED EXCELFILE ();
requestedTextFile = DATA LOCAL NESTED TEXTFILE ();
requestedCsvFile = DATA LOCAL NESTED CSVFILE ();
requestedHtmlFile = DATA LOCAL NESTED HTMLFILE ();
requestedJsonFile = DATA LOCAL NESTED JSONFILE ();
requestedXmlFile = DATA LOCAL NESTED XMLFILE ();
requestedTableFile = DATA LOCAL NESTED TABLEFILE ();
requestedNamedFile = DATA LOCAL NESTED NAMEDFILE ();
requestedWordLink = DATA LOCAL NESTED WORDLINK ();
requestedImageLink = DATA LOCAL NESTED IMAGELINK ();
requestedPdfLink = DATA LOCAL NESTED PDFLINK ();
requestedDbfLink = DATA LOCAL NESTED DBFLINK ();
requestedRawLink = DATA LOCAL NESTED RAWLINK ();
requestedLink = DATA LOCAL NESTED LINK ();
requestedExcelLink = DATA LOCAL NESTED EXCELLINK ();    
requestedTextLink = DATA LOCAL NESTED TEXTLINK ();    
requestedCsvLink = DATA LOCAL NESTED CSVLINK ();    
requestedHtmlLink = DATA LOCAL NESTED HTMLLINK ();    
requestedJsonLink = DATA LOCAL NESTED JSONLINK ();    
requestedXmlLink = DATA LOCAL NESTED XMLLINK ();    
requestedTableLink = DATA LOCAL NESTED TABLELINK ();    

isActiveForm = DATA LOCAL BOOLEAN ();

edit '{logics.edit}'  ABSTRACT MULTI OVERRIDE FIRST ( Object) TOOLBAR;
// since now SHOW fills request props, we don't need to do DIALOG, and without dialog there is no REQUEST wrapping, so group change for example will work
edit(Object o) + {  SHOW EDIT Object =o DOCKED; } OPTIMISTICASYNC; //  
formEdit(Object o)  { edit(o); }

formEditObject(Object o)  {
    IF PREV(o IS Object) THEN 
        NEWSESSION formEdit(o);
    ELSE 
        formEdit(o);
}

// private, only for interactive usage (for other purposes use operator DELETE)
delete '{logics.delete}'  ABSTRACT MULTI OVERRIDE FIRST ( Object) IMAGE 'delete.png' CHANGEKEY 'DELETE' HIDE TOOLBAR;
delete(Object o) + {  DELETE o; } 
formDelete(Object o)  { 
    IF sessionOwners() THEN
        delete(o);
    ELSE 
        ASK '{form.instance.do.you.really.want.to.take.action} \'{logics.delete}\'' DO {
            delete(o);
            APPLY;
        }
}

// ------------------ GUI Preferences ---------------- //
dataLogicsName '{system.logics.name}' = DATA STRING[100]();
logicsName = OVERRIDE dataLogicsName(), 'default';
dataDisplayName '{system.logics.display.name}' = DATA STRING[100]();
logicsCaption '{system.logics.caption}' = DATA STRING[100]();
topModule '{system.logics.top.module}' = DATA STRING[100]();
displayName = OVERRIDE dataDisplayName(), logicsCaption(), topModule();

logicsLogo = DATA IMAGEFILE ();
loadLogicsLogo '{system.logics.logo.load}'()  { INPUT=logicsLogo() CHANGE; }
openLogicsLogo '{system.logics.logo.open}'()  { open(logicsLogo()); }
resetLogicsLogo '{system.logics.logo.reset}'()  { logicsLogo() <- NULL; }

logicsIcon = DATA IMAGEFILE ();
loadLogicsIcon '{system.logics.icon.load}'()  { INPUT=logicsIcon() CHANGE; }
openLogicsIcon '{system.logics.icon.open}'()  { open(logicsIcon()); }
resetLogicsIcon '{system.logics.icon.reset}'()  { logicsIcon() <- NULL; }

META applicationForm(sid, name)
    FORM sid name;
    
    DESIGN sid {
        OBJECTS {
            NEW pane {
                fill = 1;
                width = 0;
                type = TABBED;
                NEW commons {
                    caption = '{system.form.sid.name.caption.commons}';
                }
            }
        }
    }
END

@applicationForm(options, '{navigator.options}');
@applicationForm(integrationData, '{navigator.integration}');
@applicationForm(migrationData, '{navigator.migration}');

networkPath '{system.network.path}' = DATA LOCAL NESTED STRING[500] ();
loadNetworkPath '{system.load.network.path}' (BOOLEAN directory)  INTERNAL  'lsfusion.server.logics.form.interactive.action.input.LoadLinkAction';
loadNetworkPath '{system.load.network.path}' () { loadNetworkPath(NULL); }  
FORM networkPathForm '{system.form.network.path.form}'
    PROPERTIES() networkPath, loadNetworkPath;

META defineLinkDialog (object, class)
    dialog###object(class o)  { 
        networkPath() <- STRING[500] (object(o));
        DIALOG networkPathForm DO {
            object(o) <- IMAGELINK (networkPath()); 
        }
    } ASON CHANGE object[class];
END

META defineLinkDialog (object)
    dialog###object()  { 
        networkPath() <- STRING[500] (object());
        DIALOG networkPathForm DO {
            object() <- LINK (networkPath()); 
        }
    } ASON CHANGE object;
END

WINDOW logo TOOLBAR HORIZONTAL POSITION(0, 0, 10, 6) VALIGN (CENTER) HALIGN (START) HIDETITLE HIDESCROLLBARS CLASS 'bg-dark-subtle';
WINDOW root TOOLBAR HORIZONTAL POSITION(10, 0, 70, 6) VALIGN (CENTER) HALIGN (CENTER) HIDETITLE HIDESCROLLBARS CLASS 'bg-dark-subtle navbar-icon-large';
WINDOW system TOOLBAR HORIZONTAL POSITION(80, 0, 20, 6) VALIGN (CENTER) HALIGN (END) HIDETITLE HIDESCROLLBARS CLASS 'bg-dark-subtle navbar-desktop-icon-large navbar-desktop-text-hidden';

WINDOW toolbar TOOLBAR VERTICAL POSITION(0, 6, 20, 64) HIDETITLE CLASS 'bg-body-secondary';
WINDOW tree  TOOLBAR POSITION(0, 6, 20, 64) HIDETITLE CLASS 'bg-body-secondary';

NAVIGATOR {
    NEW FOLDER root '{navigator.forms}' WINDOW root {
        NEW FOLDER administration '{navigator.administration}' LAST WINDOW system PARENT IMAGE 'tools.png' {
            NEW FOLDER application '{navigator.application}' WINDOW toolbar PARENT {
                NEW options;
                NEW integrationData;
                NEW migrationData;
            }
            
            NEW FOLDER system '{navigator.system}' WINDOW toolbar PARENT {
                NEW FOLDER performance '{navigator.performance}';
                NEW FOLDER notification '{navigator.notification}';    
                NEW FOLDER scheduler '{navigator.scheduler}';    
                NEW FOLDER logs '{navigator.logs}';            
            }
            
            NEW FOLDER objects '{navigator.objects}' WINDOW tree; 
        }
    }
}

// Tests

randInt(INTEGER max) = INTEGER(random() * ((max AS INTEGER) - 1)) + 1;  

META defineRandom1(cls, name, fnc)
     randNumber###name###cls (prm1) = PARTITION SUM 1 IF fnc(prm1) ORDER prm1;
     cls###name###fromRandNumber (number) = GROUP NAGGR prm1 BY randNumber###name###cls(prm1);
     maxRand###name###cls = GROUP SUM 1 IF fnc(prm1);
     random###name###cls(max) = cls###name###fromRandNumber(MIN maxRand###name###cls(), max AS INTEGER);     
END;

META defineRandom2(cls1, cls2, name, fnc)
     randNumber (###cls1 prm1, ###cls2 prm2) = PARTITION SUM 1 IF prevCurrentBalance(prm1, prm2) ORDER prm1 BY prm2;
     cls1##FromRand (number, ###cls2 prm2) = GROUP NAGGR ###cls1 prm1 BY randNumber(prm1, prm2);
     maxRand###cls1(###cls2 prm2) = GROUP SUM 1 IF prevCurrentBalance(###cls1 prm1, prm2);
     random###cls1(INTEGER max, ###cls2 prm2) = cls1##FromRand((MIN maxRand###cls1(prm2), max AS INTEGER), prm2);     
END;

// Options
META defineOption(property, caption, container)
    @defineOption(property, caption, BOOLEAN, container);
END

META defineOption(property, caption, type, container)
    property caption = DATA type () COMPLEX;
    
    EXTEND FORM options PROPERTIES() property;
    DESIGN options { container { MOVE PROPERTY(property()); } }
END

// --------------------------- Form editable --------------------------------- //

isEditable '{system.is.editable}' = DATA LOCAL NESTED BOOLEAN();

isReadonly = NOT isEditable();

META extendFormEditable (form)
    EXTEND FORM form
        PROPERTIES() isEditable
    ;
    DESIGN form {
        TOOLBARBOX {
            MOVE PROPERTY(isEditable()) BEFORE TOOLBARRIGHT;
        }
    }
END

// --------------- Application logs deletion ------------------------ //

clearApplicationLog '{service.clear.application.log}'  ABSTRACT LIST ( ) ;

META defineLog (object, caption, container)
    countDaysClear##object '{service.define.log.count.days.clear.object} '##caption = DATA INTEGER (); 
    
    EXTEND FORM options PROPERTIES countDaysClear##object();
    DESIGN options { container { MOVE PROPERTY(countDaysClear##object());} }    
END
META defineLog (object, dateProp)
    clearApplicationLog () + { 
	NEWSESSION {
	        IF countDaysClear##object() THEN {
	            DELETE object d WHERE d IS object AND dateProp(d)<= subtract(currentDate(), countDaysClear##object());
	        }
	        apply();
	    }
}   
END
META defineLog (object, caption, container, dateProp)
    @defineLog (object, caption, container);
    @defineLog (object, dateProp);    
END

DESIGN options {
    pane {
        NEW log {
            caption = '{service.form.options.caption.logging}';
        }
    }
}