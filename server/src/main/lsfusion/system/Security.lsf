MODULE Security;

REQUIRE System, SystemEvents, Email, Utils;

CLASS UserRole '{security.user.role}';
TABLE userRole (UserRole);

// Copy user role
copy ABSTRACT LIST (UserRole, UserRole);

name '{security.name.user.role}' = DATA ISTRING[100](UserRole) CHARWIDTH 20;

sid '{security.sid.user.role}' = DATA STRING[30] (UserRole) CHARWIDTH 10;
userRoleSID = GROUP AGGR UserRole userRole WHERE userRole IS UserRole BY sid (userRole);

copy (UserRole from, UserRole to) + { 
    name(to) <- CONCAT '', name(from), '_copy';
    sid(to) <- CONCAT '', sid(from), '_copy'; 
}

// Main role
mainRole = DATA UserRole (User);
mainRole (CustomUser user) = mainRole[User](user) IF user IS CustomUser;
nameMainRole '{security.name.main.role.user}' (User user) = name(mainRole(user));
sidMainRole (CustomUser user) = sid(mainRole(user));

currentUserMainRoleName () = nameMainRole(currentUser());

overIn = ABSTRACT BOOLEAN (User, UserRole);
overIn(User user, UserRole role) += mainRole(user) == role; 

// Roles
TABLE customUserRole (CustomUser, UserRole);
in '{security.in}' = DATA BOOLEAN (CustomUser, UserRole);

TABLE userUserRole (User, UserRole);
has '{security.in}' (User user, UserRole role) = in(user, role) OR overIn(user, role) MATERIALIZED;
//firstRole need for Settings
firstRole(User user) = OVERRIDE (GROUP MIN UserRole role IF has(user, role) AND NOT sid(role) = 'default'), 
                                            userRoleSID('default') @@lazy;
userRoles '{security.user.roles}' (User user) = GROUP CONCAT name(UserRole role) IF has(user, role), ', ' ORDER name(role) CHARWIDTH 15 @@lazy;

rolesCount(User user) = GROUP SUM 1 IF has(user, UserRole role) MATERIALIZED;

CONSTRAINT DROPPED(UserRole r IS UserRole) AND PREV(has(User user, r))
    MESSAGE '{security.this.role.is.assigned.to.user}';
    
WHEN SETCHANGED (User u IS User) DO {
    in(u, userRoleSID('admin')) <- TRUE WHERE login(u) == 'admin';        
    in(u, userRoleSID('default')) <- TRUE;        
}

onUserRegister(User user) + {
    in(user, userRoleSID('selfRegister')) <- TRUE;
}

disableRole '{security.user.role.disable.role}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
disableRole(STRING roleSID) = disableRole(userRoleSID(roleSID));

// Forms
FORM userRolesDialog '{security.user.roles}'
    OBJECTS ur = UserRole
    PROPERTIES(ur) READONLY name, sid
    
    LIST UserRole OBJECT ur
;

EXTEND FORM customUser
    OBJECTS ur = UserRole
    PROPERTIES(ur) READONLY name, sid
    PROPERTIES(u, ur) in
;

DESIGN customUser {
    details {
        NEW roles {
            caption = '{security.user.roles}';
            MOVE BOX(ur);
        }
    }
}

EXTEND FORM customUsers
    PROPERTIES(u) READONLY userRoles AFTER login(u)
; 

// ------------------- User permissions ------------------ //

CLASS Permission {
    permit '{security.permit}',
    forbid '{security.forbid}',
    default '{security.default}'
}

parentPermissionForeground() = IF isDarkTheme() THEN RGB(167,167,167) ELSE RGB(109,109,109);
childPermissionBackground() = IF isDarkTheme() THEN RGB(128,128,128) ELSE RGB(203,203,203);

TABLE userRoleActionOrProperty (UserRole, ActionOrProperty);
TABLE userRolePropertyGroup (UserRole, PropertyGroup);

updatePermissionUserRoleNavigatorElement  INTERNAL 'lsfusion.server.logics.navigator.UpdatePermissionAction' (UserRole, STRING, STRING);
updatePermissionUserRoleActionOrProperty  INTERNAL 'lsfusion.server.logics.property.UpdatePermissionAction' (UserRole, STRING, BOOLEAN, STRING, STRING);
dropCachedSecurityPolicy  INTERNAL 'lsfusion.server.logics.DropCachedSecurityPolicyAction' (UserRole);

META initPropertyPermission (type, caption)
    dataPermission###type = DATA Permission (UserRole, PropertyGroup);
    nearestParentPermission###type (UserRole ur, PropertyGroup g) =
        GROUP LAST dataPermission###type(ur, PropertyGroup parent) IF dataPermission###type(ur, parent) ORDER DESC level(g, parent) MATERIALIZED;
    foregroundPermission###type (UserRole ur, PropertyGroup g) = parentPermissionForeground() IF NOT dataPermission###type(ur, g); 
    backgroundPermission###type(UserRole ur, PropertyGroup g) = childPermissionBackground() IF GROUP SUM 1 IF level(PropertyGroup child, g) AND dataPermission###type(ur, child) AND 
        (NOT dataPermission###type(ur, g) OR dataPermission###type(ur, child) != dataPermission###type(ur, g));     
    permission###type (UserRole ur, PropertyGroup g) = OVERRIDE dataPermission###type(ur, g), nearestParentPermission###type(ur, g);
    captionPermission###type caption (UserRole ur, PropertyGroup g) = staticCaption(OVERRIDE permission###type(ur, g), Permission.default) CHARWIDTH 10;
    
    dataPermission###type = DATA Permission (UserRole, ActionOrProperty);
    foregroundPermission###type (UserRole ur, ActionOrProperty p) = parentPermissionForeground() IF NOT dataPermission###type(ur, p);
    
    permission###type (UserRole ur, ActionOrProperty p) = OVERRIDE dataPermission###type(ur, p), nearestParentPermission###type(ur, parent(p));
    
    WHEN UserRole ur IS UserRole AND (GROUP SUM 1 IF CHANGED(permission###type(ur, ActionOrProperty p))) > 100 DO
        dropCachedSecurityPolicy(ur);
    WHEN UserRole ur IS UserRole AND (GROUP SUM 1 IF CHANGED(permission###type(ur, ActionOrProperty p))) <= 100 NOINLINE DO
        FOR CHANGED (permission###type(ur, ActionOrProperty p)) DO
            updatePermissionUserRoleActionOrProperty(ur, canonicalName(p), isProperty(p), staticName(permission###type(ur, p)), ''##type);
            
    namePermission###type (UserRole ur, ActionOrProperty p) = staticName(permission###type(ur, p));
    captionPermission###type caption (UserRole ur, ActionOrProperty p) = staticCaption(OVERRIDE permission###type(ur, p), Permission.default) CHARWIDTH 10;
    
    copy (UserRole from, UserRole to) +{
        dataPermission###type(to, ActionOrProperty property) <- dataPermission###type(from, property);
        dataPermission###type(to, PropertyGroup propertyGroup) <- dataPermission###type(from, propertyGroup);      
    }                     
END
    
@initPropertyPermission(view, '{security.view}');                

@initPropertyPermission(change, '{security.change}');         

@initPropertyPermission(editObjects, '{security.editObjects}');       

@initPropertyPermission(groupChange, '{security.groupChange}');

// ------- Navigator ------- //

TABLE userRoleNavigatorElement (UserRole, NavigatorElement);

dataPermission = DATA Permission (UserRole, NavigatorElement);
nearestParentPermission (UserRole ur, NavigatorElement e) = GROUP LAST dataPermission(ur, NavigatorElement parent) IF dataPermission(ur, parent) ORDER DESC level(e, parent) MATERIALIZED;
foregroundPermission (UserRole ur, NavigatorElement e) = parentPermissionForeground() IF NOT dataPermission(ur, e);    

permission (UserRole ur, NavigatorElement e) = OVERRIDE dataPermission(ur, e), nearestParentPermission(ur, e);
WHEN UserRole ur IS UserRole AND (GROUP SUM 1 IF CHANGED(permission(ur, NavigatorElement ne))) > 100 DO
    dropCachedSecurityPolicy(ur);
WHEN UserRole ur IS UserRole AND (GROUP SUM 1 IF CHANGED(permission(ur, NavigatorElement ne))) <= 100 NOINLINE DO
    FOR CHANGED (permission(ur, NavigatorElement ne)) DO
        updatePermissionUserRoleNavigatorElement(ur, canonicalName(ne), staticName(permission(ur, ne)));

namePermission (UserRole ur, NavigatorElement e) = staticName(permission(ur, e));
captionPermission '{security.access}' (UserRole ur, NavigatorElement e) = staticCaption(OVERRIDE permission(ur, e), Permission.default) CHARWIDTH 10;

permit (User u, NavigatorElement ne) = 
    (GROUP MAX has(u, UserRole ur) AND permission(ur, ne) == Permission.permit AND NOT disableRole(ur)) OR NOT 
    (GROUP MAX has(u, UserRole ur) AND permission(ur, ne) == Permission.forbid AND NOT disableRole(ur));              

backgroundPermission (UserRole ur, NavigatorElement e)= 
    childPermissionBackground() IF GROUP SUM 1 IF level(NavigatorElement child, e) AND dataPermission(ur, child) AND 
    (NOT dataPermission(ur, e) OR dataPermission(ur, child) != dataPermission(ur, e));

copy (UserRole from, UserRole to) +{
    dataPermission(to, NavigatorElement navigatorElement) <- dataPermission(from, navigatorElement);
}

// ----------------- Form policy ---------------------- //

// Duplicate forms
forbidDuplicateForms '{security.forbid.duplicate.forms}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
dataForbidDuplicateForms '{security.forbid.duplicate.forms}' = DATA BOOLEAN (CustomUser) CHARWIDTH 10;
abstractForbidDuplicateForms(CustomUser u) = ABSTRACT BOOLEAN (CustomUser);

autoReconnectOnConnectionLost '{security.auto.reconnect.on.connection.lost}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;

showDetailedInfo '{security.user.role.show.detailed.info}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;

// Default forms
defaultNumber '{security.default.forms.number}' = DATA INTEGER (UserRole, NavigatorElement);
defaultNumber (User user, NavigatorElement navigatorElement) = 
    GROUP MIN defaultNumber(UserRole userRole, navigatorElement) IF has(user, userRole);
defaultForms '{security.default.forms}' (UserRole userRole) = GROUP CONCAT caption(NavigatorElement e) IF defaultNumber(userRole, e), ', ' ORDER defaultNumber(userRole, e) CHARWIDTH 50;

mobileOnly = DATA YesNo (UserRole, NavigatorElement);
captionMobileOnly'{security.default.forms.mobile.only}' (UserRole ur, NavigatorElement e) = staticCaption(mobileOnly(ur, e)) CHARWIDTH 5; 
    
showMobileOnly (User u, NavigatorElement e) = GROUP MAX has(u, UserRole ur) AND mobileOnly(ur, e) == YesNo.yes;
showDesktopOnly (User u, NavigatorElement e) = GROUP MAX has(u, UserRole ur) AND mobileOnly(ur, e) == YesNo.no;
checkShowDefaultForm(User u, NavigatorElement e) = 
    (NOT showMobileOnly(u, e) AND NOT showDesktopOnly(u, e)) OR (isMobile() AND showMobileOnly(u, e)) OR (isDesktop() AND NOT showMobileOnly(u, e) AND showDesktopOnly(u, e));    

maximizeDefaultForms '{security.default.forms.maximize}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
maximizeDefaultFormsCurrentUser() = GROUP MAX maximizeDefaultForms(UserRole ur) IF has(currentUser(), ur);
maximizeForm  INTERNAL 'lsfusion.server.logics.form.interactive.action.MaximizeFormAction' ();

copy (UserRole from, UserRole to) + {
    forbidDuplicateForms(to) <- forbidDuplicateForms(from);
    showDetailedInfo(to) <- showDetailedInfo(from);
    defaultNumber(to, NavigatorElement navigatorElement) <- defaultNumber(from, navigatorElement);
    mobileOnly(to, NavigatorElement navigatorElement) <- mobileOnly(from, navigatorElement);
    maximizeDefaultForms(to) <- maximizeDefaultForms(from);
}

showDefaultForms()  { 
    LOCAL formFound = BOOLEAN ();
    
    FOR actionName = canonicalName(action(NavigatorAction e)) AND defaultNumber(currentUser(), e) AND checkShowDefaultForm(currentUser(), e) ORDER defaultNumber(currentUser(), e) DO {
        LOCAL NESTED action = TEXT ();
        LOCAL NESTED maximize = BOOLEAN();
        FOR formName = canonicalName(form(e)) DO { 
            IF NOT formFound() THEN {
                formFound() <- TRUE;
                maximize() <- TRUE;
            }
            action() <- 'SHOW ' + formName + ' NOWAIT';
        } ELSE
            action() <- actionName + '()';
            
        NEWSESSION EVAL 'run() \{ ' + action() + '; \};';
        IF maximize() AND maximizeDefaultFormsCurrentUser() THEN 
            maximizeForm();
    }
   
    IF NOT formFound() AND maximizeDefaultFormsCurrentUser() THEN
        maximizeForm();
}

onDesktopClientStarted() + {  showDefaultForms(); }
onWebClientStarted() + {  showDefaultForms(); }

createSystemUserRoles() {
    IF NOT propertyGroup('System_root') THEN
        NEW p = PropertyGroup { SID(p) <- 'System_root'; }

    IF NOT navigatorElementCanonicalName('System.root') THEN
        NEW f = NavigatorFolder { canonicalName(f) <- 'System.root'; }

    IF NOT userRoleSID('admin') THEN {
        NEW ur = UserRole {
            sid(ur) <- 'admin';
            name(ur) <- ISTRING[100] ('{security.user.role.admin}');
            showDetailedInfo(ur) <- TRUE;      
            dataPermission(ur, navigatorElementCanonicalName('System.root')) <- Permission.permit;        
            dataPermissionView(ur, propertyGroup('System_root')) <- Permission.permit;        
            dataPermissionChange(ur, propertyGroup('System_root')) <- Permission.permit;            
            dataPermissionEditObjects(ur, propertyGroup('System_root')) <- Permission.permit;            
        }
    }

    IF NOT userRoleSID('readonly') THEN {
        NEW ur = UserRole {
            sid(ur) <- 'readonly';
            name(ur) <- ISTRING[100] ('{security.user.role.readonly}');
            dataPermissionChange(ur, propertyGroup('System_root')) <- Permission.forbid;
        }
    }
    
     IF NOT userRoleSID('default') THEN {
        NEW ur = UserRole {
            sid(ur) <- 'default';
            name(ur) <- ISTRING[100] ('{security.user.role.default}');
        }
     }   
    
    IF NOT navigatorElementCanonicalName('Authentication.account') THEN
        NEW f = NavigatorFolder { canonicalName(f) <- 'Authentication.account'; }
    
     IF NOT userRoleSID('selfRegister') THEN {
        NEW ur = UserRole {
            sid(ur) <- 'selfRegister';
            name(ur) <- ISTRING[100] ('{security.user.role.new.user}');
            dataPermission(ur, navigatorElementCanonicalName('System.root')) <- Permission.forbid;        
            dataPermission(ur, navigatorElementCanonicalName('Authentication.account')) <- Permission.permit;          
        }
     }   
}

// ------------------ Security policy form ----------------------- //

FORM securityPolicy '{security.form.policy}'
 
    OBJECTS ur = UserRole
    PROPERTIES(ur) name, sid
    PROPERTIES(ur) NEW, DELETE
    
    PROPERTIES(ur) showDetailedInfo, forbidDuplicateForms, autoReconnectOnConnectionLost, defaultForms, maximizeDefaultForms, disableRole

    // Navigator elements
    TREE navigatorElements te = NavigatorElement PARENT parent(te)
    PROPERTIES(te) READONLY caption, canonicalName
    PROPERTIES(ur, te) captionPermission FOREGROUND foregroundPermission(ur, te) BACKGROUND backgroundPermission(ur, te)
    PROPERTIES(ur, te) defaultNumber, captionMobileOnly
    PROPERTIES(te) READONLY number
    ORDERS number(te)

    OBJECTS f = NavigatorElement
    PROPERTIES(f) READONLY caption, canonicalName
    PROPERTIES(ur, f) captionPermission FOREGROUND foregroundPermission(ur, f), defaultNumber, captionMobileOnly

    // Properties
    TREE properties tprs = PropertyGroup PARENT parent(tprs), prs = ActionOrProperty 
    PROPERTIES(tprs) READONLY caption, SID
    PROPERTIES(prs)  READONLY caption, canonicalName
    PROPERTIES(tprs) READONLY number
    PROPERTIES(prs) READONLY number
    ORDERS number(tprs), number(prs)
    FILTERS parent(prs) = tprs
    
    OBJECTS pr = ActionOrProperty
    PROPERTIES(pr) READONLY caption, canonicalName
    
    // Users
    OBJECTS u = CustomUser
    PROPERTIES(u) READONLY name, login
    PROPERTIES(u) dataForbidDuplicateForms
    FILTERS has(u, ur)
;

DESIGN securityPolicy {
    OBJECTS {
        NEW container {
            fill = 1;
            
            NEW roleHeader {
                fill = 1;
                MOVE BOX(ur) {
                    GRID(ur) { headerHeight = 60; }
                }
            }

            NEW rolePolicyContainer {
                fill = 1;
                tabbed = TRUE;

                NEW elementsContainer {
                    tabbed = TRUE;
                    caption = '{security.form.navigator}';
                    MOVE BOX(TREE navigatorElements) { caption = '{security.form.tree}'; }
                    MOVE BOX(f) { caption = '{security.form.table}'; }
                }

                NEW propertiesContainer {
                    tabbed = TRUE;
                    caption = '{security.form.properties}';
                    MOVE BOX(TREE properties) { caption = '{security.form.tree}'; }
                    MOVE BOX(pr) { caption = '{security.form.table}'; }
                }
                
                MOVE BOX(u) {
                    caption = '{authentication.users}';
                    GRID(u) { headerHeight = 60; }
                }
                
                NEW roleApplicationPane {
                    caption = '{security.form.application.settings}';
                    MOVE PANEL(ur);
                    NEW roleApplicationSettings {
                        lines = 3;
                    }
                }
            }
        }
    }
}

META addRoleApplicationSetting (name, caption, type)
    name caption = DATA type (UserRole) COMPLEX;
    
    EXTEND FORM securityPolicy PROPERTIES (ur) PANEL name;
    DESIGN securityPolicy { roleApplicationSettings { MOVE PROPERTY(name(ur)); }}

    copy (UserRole from, UserRole to) + {
        name(to) <- name(from);
    }
END

copy '{security.copy.role}' (UserRole from)  { 
    NEW to = UserRole {
        copy(from, to);
        SEEK securityPolicy.ur = to;
    }
}

EXTEND FORM securityPolicy
    PROPERTIES(ur) copy TOOLBAR
;

NAVIGATOR {
    security {
        NEW securityPolicy;
    }
}

// ----------------- Property and action policy forms ----------------- //

// - Property - //
FORM propertyPolicy '{security.form.policy}'
    OBJECTS p = Property PANEL
    PROPERTIES(p) READONLY caption, canonicalName
    PROPERTIES(p) userLoggable, isSetNotNull, disableInputList, staticCaptionSelect
    
    OBJECTS ur = UserRole
    PROPERTIES(ur) READONLY name, sid
;

DESIGN propertyPolicy {
    OBJECTS {
        NEW property {
            horizontal = TRUE;
            alignment = STRETCH;
            caption = '{security.form.property}';
            MOVE PROPERTY(caption(p));
            MOVE PROPERTY(canonicalName(p));
        }
        NEW permission {
            horizontal = TRUE;
            alignment = STRETCH;
            caption = '{security.form.parameters}';
            MOVE PROPERTY(userLoggable(p));
            MOVE PROPERTY(isSetNotNull(p));
            MOVE PROPERTY(disableInputList(p));
            MOVE PROPERTY(staticCaptionSelect(p));
        }
        MOVE BOX(ur);
    }
}

WHEN LOCAL FORMS propertyPolicy CHANGED(select(Property p)) DO {
    updateSelect(p, nameSelect(p));
}

checkCurrentDateDependsAction  INTERNAL  'lsfusion.server.physics.admin.authentication.action.CheckCurrentDateDependsAction' (Property);
WHEN FORMS propertyPolicy, properties SETCHANGED(userLoggable(Property p)) DO checkCurrentDateDependsAction(p);

// - Action - //
FORM actionPolicy '{security.form.policy}'
    OBJECTS p = Action PANEL
    PROPERTIES(p) READONLY caption, canonicalName
    
    OBJECTS ur = UserRole
    PROPERTIES(ur) READONLY name, sid
;

DESIGN actionPolicy {
    OBJECTS {
        NEW property {
            horizontal = TRUE;
            alignment = STRETCH;
            caption = '{security.form.action}';
            MOVE PROPERTY(caption(p));
            MOVE PROPERTY(canonicalName(p));
        }
        NEW permission {
            horizontal = TRUE;
            alignment = STRETCH;
            caption = '{security.form.access}';
        }
        MOVE BOX(ur);
    }
}

META designPropertyPermission (type)
    EXTEND FORM securityPolicy
        PROPERTIES(ur, tprs) captionPermission###type FOREGROUND foregroundPermission###type(ur, tprs) BACKGROUND backgroundPermission###type(ur, tprs)
        PROPERTIES(ur, prs) captionPermission###type FOREGROUND foregroundPermission###type(ur, prs)
        PROPERTIES(ur, pr) captionPermission###type FOREGROUND foregroundPermission###type(ur, pr)
    ;
    
    EXTEND FORM propertyPolicy
        PROPERTIES(ur, p) captionPermission###type FOREGROUND foregroundPermission###type(ur, p)
    ;
    
    EXTEND FORM actionPolicy
        PROPERTIES(ur, p) captionPermission###type FOREGROUND foregroundPermission###type(ur, p)
    ;        
END

@designPropertyPermission(view);
@designPropertyPermission(change);
@designPropertyPermission(editObjects);
@designPropertyPermission(groupChange);

initHeapSize '{security.client.init.heap.size}' = DATA STRING[100]();
maxHeapSize '{security.client.max.heap.size}' = DATA STRING[100]();
minHeapFreeRatio '{security.client.min.heap.free.ratio}' = DATA STRING[100]();
maxHeapFreeRatio '{security.client.max.heap.free.ratio}' = DATA STRING[100]();
vmargs '{security.client.vm.args}' = DATA STRING[100]();

generateJnlp INTERNAL 'lsfusion.server.logics.navigator.GenerateJNLPAction' (STRING[10], STRING[1000]) NULL @@noauth;

// ------------------ Memory limits ---------------- //
CLASS MemoryLimit '{security.memory.limit}';
TABLE memoryLimit (MemoryLimit);

name '{security.name.memory.limit}' = DATA STRING[100] (MemoryLimit);
maxHeapSize '{security.max.heap.size.memory.limit}' = DATA STRING[10] (MemoryLimit);
vmargs '{security.vm.args.memory.limit}' = DATA STRING[1000] (MemoryLimit);

generateJnlpUrls () {

    LOCAL execURL = STRING();
    //we use generateJnlp without params because linux mint cut from url '%5'
    execURL() <- CONCAT '', '\{contextPath\}/exec?', IF query() THEN query() + '&' ELSE '', 'action=Security.generateJnlp';

    FOR MemoryLimit ml IS MemoryLimit DO {
        exportText() <- CONCAT '', exportText(), '<a href="', execURL(), '&p=', IF maxHeapSize(ml) THEN maxHeapSize(ml) ELSE '';
        IF vmargs(ml) THEN {
            urlEncode(vmargs(ml), 'UTF-8');
            exportText() <- CONCAT '', exportText(), '&p=', urlEncoded();
        }
        exportText() <- CONCAT '', exportText(), '">\{run.desktop.client\} ', name(ml), '</a><br/>';   
    }
    
   IF(exportText()) THEN {  
        exportText() <- CONCAT '', '<details><summary>', '<a href="', execURL(), '">\{run.desktop.client\}</a>', '</summary>', exportText(), '</details>';
   } ELSE {
        exportText() <- CONCAT '', '<a href="', execURL(), '">\{run.desktop.client\}</a>';     
   }
}

// find forms

FORM findNavigator '{reflection.find.navigator}'
    TREE elements e = NavigatorElement PARENT parent(e)
    PROPERTIES(e) READONLY BACKGROUND NOT e IS NavigatorFolder caption
;

findText '{reflection.find.text}' = DATA LOCAL STRING[100] ();
changeFindText () {
    INPUT s = findText() CHANGE DO {
        EXPAND ALL TOP findNavigator.e;
    }
}

EXTEND FORM findNavigator
    PROPERTIES() findText ON CHANGE changeFindText()
    FILTERS (GROUP SUM 1 IF isISubstring(caption(NavigatorElement child), findText()) AND 
                            NOT child IS NavigatorFolder AND permit(currentUser(), child) AND
                            level(child, e)) 
;

openForm '{reflection.open.form}' (NavigatorElement e) {
    IF NOT e IS NavigatorFolder AND canonicalName(form(e)) THEN
        NEWSESSION EVAL 'run() \{ SHOW ' + canonicalName(form(e)) + ' NOWAIT; \};';
} TOOLBAR CHANGEMOUSE 'DBLCLK';

EXTEND FORM findNavigator
    PROPERTIES openForm(e);
;

DESIGN findNavigator {
    NEW params FIRST {
        alignment = STRETCH;
        MOVE PROPERTY(findText()) { fill = 1; fontSize = 20; }
    }
}

NAVIGATOR {
    NEW findNavigator LAST HEADER '{reflection.find.navigator}' IF NOT noSystemToolbarCaptions() IMAGE 'search.png' WINDOW system PARENT;
}

// extend reflection

countUserPreferences '{authentication.users.number}' (GroupObject g, UserRole r) =
    GROUP SUM 1 IF hasUserPreferences(g, CustomUser u) AND has(u, r);

countUser (PropertyDraw pr, UserRole r, PropertyDrawShowStatus s) =
    GROUP SUM 1 IF show(pr, CustomUser u) = s AND has(u, r);
captionShow '{reflection.show.property.draw}' (PropertyDraw pr, UserRole r) =
    GROUP CONCAT staticCaption(PropertyDrawShowStatus s) + ' : ' + countUser(pr, r, s), ', ' ORDER s;
hide '{reflection.property.draw.status.hide}' (PropertyDraw pr, UserRole r) {
    show(pr, CustomUser u) <- PropertyDrawShowStatus.Hide WHERE has(u, r) AND show(pr, u) = PropertyDrawShowStatus.Show;
}

columnSort '{reflection.column.sort.property.draw.custom.user}' (PropertyDraw pr, UserRole r) =
    GROUP SUM 1 IF columnSort(pr, CustomUser u) AND has(u, r);
dropSort '{logics.property.actions.drop}' (PropertyDraw pr, UserRole r) {
    columnSort(pr, CustomUser u) <- NULL WHERE has(u, r);
}

EXTEND FORM forms
    PROPERTIES(u) READONLY AFTER login(u) userRoles, lastActivity
    PROPERTIES(up) READONLY AFTER login(up) userRoles, lastActivity

    OBJECTS r = UserRole
    PROPERTIES(r) READONLY name, sid
    PROPERTIES(g, r) countUserPreferences READONLY
    FILTERS countUserPreferences(g, r)

    OBJECTS pr = PropertyDraw
    PROPERTIES(pr) READONLY canonicalNameActionOrProperty, sid, caption
    PROPERTIES(pr, r) BACKGROUND RGB(224,224,255) captionShow, hide GRID, columnSort, dropSort GRID
    PROPERTIES(pr, r) BACKGROUND RGB(224,224,255) DRAW r rps = captionShow, rcs = columnSort
    FILTERS groupObject(pr) = g

    OBJECTS ur = CustomUser
    PROPERTIES(ur) READONLY firstName, lastName, login, userRoles, lastActivity
    PROPERTIES(pr, ur) BACKGROUND RGB(224,224,255) captionShow, columnCaption, columnPattern, columnWidth, columnOrder, columnSort, columnAscendingSort
    FILTERS has(ur, r)
    FILTERGROUP roleShow
        FILTER '{reflection.show.property.draw.custom.user}' show(pr, ur) = PropertyDrawShowStatus.Show DEFAULT

;
DESIGN forms {
    rightPane {
        NEW role {
            caption = '{security.user.roles}';
            MOVE BOX(r);
            MOVE BOX(pr) { fill = 2; }
            MOVE BOX(ur);
        }
    }
}