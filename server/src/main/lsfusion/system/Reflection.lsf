MODULE Reflection;

REQUIRE System, Authentication;

CLASS PropertyGroup '{reflection.property.group}';
TABLE propertyGroup (PropertyGroup);

TABLE propertyGroupPropertyGroup (PropertyGroup, PropertyGroup);
parent '{reflection.parent.property.group}' = DATA PropertyGroup (PropertyGroup);
level '{reflection.level}' (PropertyGroup child, PropertyGroup parent) = RECURSION 1l IF child IS PropertyGroup AND parent == child
                                                                      STEP 2l IF parent == parent($parent) MATERIALIZED;

caption '{reflection.caption.property.group}' = DATA STRING[250] (PropertyGroup);
number '{reflection.number.property.group}' = DATA INTEGER (PropertyGroup) CHARWIDTH 8;
SID '{reflection.sid.property.group}' = DATA STRING[100] (PropertyGroup);
propertyGroup '{reflection.property.group.sid}' (sID) = GROUP AGGR PropertyGroup propertyGroup WHERE propertyGroup IS PropertyGroup BY SID(propertyGroup);


CLASS NavigatorElement '{reflection.navigator.element}';
CLASS NavigatorAction '{reflection.navigator.action}' : NavigatorElement;
CLASS NavigatorFolder '{reflection.navigator.folder}' : NavigatorElement;    


TABLE navigatorElement (NavigatorElement);
TABLE navigatorElementNavigatorElement(NavigatorElement, NavigatorElement);

caption '{reflection.caption.navigator.element}' = DATA STRING[250] (NavigatorElement);
canonicalName '{reflection.canonical.name.navigator.element}' = DATA STRING[100] (NavigatorElement);
number '{reflection.number.navigator.element}' = DATA INTEGER (NavigatorElement) CHARWIDTH 8;
navigatorElementCanonicalName '{reflection.navigator.element}' (sid) = GROUP AGGR NavigatorElement navigatorElement WHERE navigatorElement IS NavigatorElement BY canonicalName(navigatorElement);

parent '{reflection.parent.navigator.element}' = DATA NavigatorElement (NavigatorElement);
level '{reflection.level}' (NavigatorElement child, NavigatorElement parent) = RECURSION 1l IF child IS NavigatorElement AND parent == child
                                                              STEP 2l IF parent == parent($parent) MATERIALIZED;

isNavigatorFolder (NavigatorElement element) = element IS NavigatorFolder;
isNavigatorAction (NavigatorElement element) = element IS NavigatorAction;

CLASS Form '{reflection.form}';

TABLE form (Form);
TABLE formNames (STRING[100]);

caption '{reflection.caption.form}' = DATA STRING[250] (Form);
canonicalName '{reflection.canonical.name.form}' = DATA STRING[100] (Form);
form '{reflection.form}' (sid) = GROUP AGGR Form form WHERE form IS Form BY canonicalName(form) MATERIALIZED TABLE formNames; // for profiler
is (Form form) = form IS Form;

// need this for profiler
CLASS NoForm { // do it with inheritance, because it is impossible to use Form.noForm (for example SET(f = Form.noForm) or even SET(f IS Form) AND form = Form.noForm), because compiler always thinks that Form.noForm is the constant of the constant class 
    instance '{reflection.form.no.form}'
} : Form;
WHEN SET(NoForm f IS NoForm) DO { // need this for forms synchronization (for this object not to be deleted)
    canonicalName(f) <- '_NOFORM';
}

currentForm = NATIVE STRING[100] (); // canonical name

CLASS ABSTRACT ActionOrProperty '{reflection.action.or.property}';
TABLE actionOrProperty(ActionOrProperty);

CLASS Property '{reflection.property}' : ActionOrProperty;
TABLE property (Property);

CLASS Action '{reflection.action}' : ActionOrProperty;
TABLE action (Action);

parent '{reflection.parent.action.or.property}' = DATA PropertyGroup (ActionOrProperty);
number '{reflection.number.action.or.property}' = DATA INTEGER (ActionOrProperty) CHARWIDTH 8;
canonicalName '{reflection.canonical.name.property}' = DATA BPSTRING (Property) IN id;
canonicalName '{reflection.canonical.name.action}' = DATA BPSTRING (Action) IN id;
canonicalName '{reflection.canonical.name.action.or.property}' (ActionOrProperty p) = MULTI canonicalName[Property](p), canonicalName[Action](p);
caption '{reflection.caption.action.or.property}' = DATA ISTRING[250] (ActionOrProperty) IN base;
annotation '{reflection.annotation.action.or.property}' = DATA STRING[100] (ActionOrProperty);
class '{reflection.class.action.or.property}' = DATA STRING[100] (ActionOrProperty);

dbName '{reflection.db.name.property}' = DATA STRING[100] (Property) IN base;
leftTo = FORMULA PG 'left($1, strpos($1, $2) - 1)', MS 'LEFT($1, CHARINDEX($2, $1) - 1)';
loggable '{reflection.loggable.property}' = DATA BOOLEAN (Property);
userLoggable '{reflection.user.loggable.property}' = DATA BOOLEAN (Property);
stored '{reflection.stored.property}' = DATA BOOLEAN (Property);
isSetNotNull '{reflection.is.set.not.null.property}' = DATA BOOLEAN (Property);
disableInputList '{reflection.disable.input.list}' = DATA BOOLEAN (Property);
return '{reflection.return.property}' = DATA STRING[100] (Property);
complexity '{reflection.complexity.property}' = DATA LONG (Property);
tableSID '{reflection.table.sid.property}' = DATA STRING[100] (Property);

stats '{reflection.stats.property}' = DATA INTEGER (Property);
maxStatsProperty '{reflection.max.stats.property}' = DATA INTEGER ();
overMaxStatsProperty = OVERRIDE maxStatsProperty(), 2000000000;
CONSTRAINT SET (userLoggable(Property p)) AND overMaxStatsProperty() AND stats(p) > overMaxStatsProperty() 
           MESSAGE '{reflection.constraint.max.stats.property} ' + overMaxStatsProperty();
           
webServerUrl '{reflection.web.server.url}' = DATA BPSTRING[100]();

form '{reflection.form.navigator.element}' = DATA Form (NavigatorElement);
action '{reflection.action.navigator.element}' = DATA Action (NavigatorAction);

EXTEND FORM options PROPERTIES maxStatsProperty(), webServerUrl();
DESIGN options { 
    commons { 
        MOVE PROPERTY(maxStatsProperty());
        MOVE PROPERTY(webServerUrl());   
    } 
}

propertyCanonicalName '{reflection.property}' (cn) = GROUP AGGR Property property WHERE property IS Property BY canonicalName(property);
actionCanonicalName '{reflection.action}' (cn) = GROUP AGGR Action property WHERE property IS Action BY canonicalName(property);
propertyTable '{reflection.property}' (string, sID) = GROUP AGGR Property property WHERE stored(property) BY tableSID(property), dbName(property);

quantity '{reflection.quantity.property}' = DATA INTEGER (Property);
quantityTop '{reflection.quantity.top.property}' = DATA INTEGER (Property);
notNullQuantity '{reflection.not.null.quantity.property}' = DATA INTEGER (Property);
overStats '{reflection.stats.property}' (Property property) = OVERRIDE notNullQuantity(property), stats(property);

hasNotNullQuantity() = GROUP SUM 1 IF notNullQuantity(Property property);

propertyDependencies = DATA LOCAL Property (INTEGER);
propertyDependents = DATA LOCAL Property (INTEGER);
getPropertyDependents (Property property, BOOLEAN dependencies)  INTERNAL  'lsfusion.server.physics.admin.service.action.GetPropertyDependentsAction';
getPropertyDependencies '{reflection.get.property.dependencies}' (Property property) { getPropertyDependents(property, TRUE); }
getPropertyDependents '{reflection.get.property.dependents}' (Property property) { getPropertyDependents(property, NULL); }

lastRecalculate '{reflection.last.recalculate.property}' = DATA DATETIME (Property);

CLASS PropertyDraw '{reflection.property.draw}';

CLASS PropertyDrawShowStatus '{reflection.property.draw.status}' {
    Show '{reflection.property.draw.status.show}',
    Hide '{reflection.property.draw.status.hide}'
}
TABLE propertyDrawShowStatus(PropertyDrawShowStatus);

FORM propertyDrawShowStatuses
    OBJECTS s = PropertyDrawShowStatus
    PROPERTIES(s) staticCaption
    LIST PropertyDrawShowStatus OBJECT s
;

TABLE formPropertyDraw (Form, PropertyDraw);
TABLE propertyDraw (PropertyDraw);
TABLE propertyDrawCustomUser (PropertyDraw, CustomUser);

sid '{reflection.sid.property.draw}' = DATA STRING[100] (PropertyDraw) IN id;
caption '{reflection.caption.property.draw}' = DATA STRING[250] (PropertyDraw);
form '{reflection.form.property.draw}' = DATA Form (PropertyDraw) INDEXED;
nameForm '{reflection.form.property.draw}' (PropertyDraw pd) = canonicalName(form(pd)) IN id;
groupObject '{reflection.group.object.property.draw}' = DATA GroupObject (PropertyDraw);
propertyDraw '{reflection.property.draw}' (form, sID) = GROUP AGGR PropertyDraw propertyDraw WHERE propertyDraw IS PropertyDraw BY form (propertyDraw), sid (propertyDraw);
propertyDrawByFormNameAndPropertyDrawSid '{reflection.property.draw.by.form.name.and.property.draw.sid}' (STRING[100] str1, STRING[100] str2) = propertyDraw (form(str1), str2);

show '{reflection.show.property.draw}' = DATA PropertyDrawShowStatus (PropertyDraw);
show '{reflection.show.property.draw.custom.user}' = DATA PropertyDrawShowStatus (PropertyDraw, CustomUser);

nameShow '{reflection.show.property.draw}' (PropertyDraw propertyDraw) = staticName(show (propertyDraw)) CHARWIDTH 50;
nameShow '{reflection.show.property.draw.custom.user}' (PropertyDraw propertyDraw, CustomUser customUser) = staticName(show(propertyDraw, customUser)) CHARWIDTH 50;

captionShow '{reflection.show.property.draw}' (PropertyDraw propertyDraw) = staticCaption(show (propertyDraw)) CHARWIDTH 20;
captionShow '{reflection.show.property.draw.custom.user}' (PropertyDraw propertyDraw, CustomUser customUser) = staticCaption(show(propertyDraw, customUser)) CHARWIDTH 20;

columnCaption '{reflection.column.caption.property.draw.custom.user}' = DATA STRING[100] (PropertyDraw, CustomUser);
columnCaption '{reflection.column.caption.property.draw}' = DATA STRING[100] (PropertyDraw);

columnPattern '{reflection.column.pattern.property.draw.custom.user}' = DATA STRING[100] (PropertyDraw, CustomUser);
columnPattern '{reflection.column.pattern.property.draw}' = DATA STRING[100] (PropertyDraw);

columnWidth '{reflection.column.width.property.draw.custom.user}' = DATA INTEGER (PropertyDraw, CustomUser);
columnWidth '{reflection.column.width.property.draw}' = DATA INTEGER (PropertyDraw);

columnOrder '{reflection.column.order.property.draw.custom.user}' = DATA INTEGER (PropertyDraw, CustomUser);
columnOrder '{reflection.column.order.property.draw}' = DATA INTEGER (PropertyDraw);

columnSort '{reflection.column.sort.property.draw.custom.user}' = DATA INTEGER (PropertyDraw, CustomUser);
columnSort '{reflection.column.sort.property.draw}' = DATA INTEGER (PropertyDraw);

columnAscendingSort '{reflection.column.ascending.sort.property.draw.custom.user}' = DATA BOOLEAN (PropertyDraw, CustomUser);
columnAscendingSort '{reflection.column.ascending.sort.property.draw}' = DATA BOOLEAN (PropertyDraw);

hasUserPreferences '{reflection.has.user.preferences.group.object.custom.user}'= DATA BOOLEAN (GroupObject, CustomUser);
countShowPropertyDraw(g, CustomUser u) = GROUP SUM 1 IF show(PropertyDraw property, u) == PropertyDrawShowStatus.Show BY groupObject(property);
CONSTRAINT hasUserPreferences(GroupObject g, CustomUser u) AND NOT countShowPropertyDraw(g, u) MESSAGE '{reflection.constraint.has.user.preferences}';
hasUserPreferences '{reflection.has.user.preferences.group.object}' = DATA BOOLEAN (GroupObject);
countShowPropertyDraw(g) = GROUP SUM 1 IF show(PropertyDraw property) == PropertyDrawShowStatus.Show BY groupObject(property);
CONSTRAINT hasUserPreferences(GroupObject g) AND NOT countShowPropertyDraw(g) MESSAGE '{reflection.constraint.has.user.preferences}';
hasUserPreferencesOverride '{reflection.has.user.preferences.group.object}' (GroupObject groupObject, CustomUser customUser) = OVERRIDE hasUserPreferences(groupObject, customUser), hasUserPreferences(groupObject) IF customUser IS CustomUser;

WHEN SET(PropertyDraw p IS PropertyDraw) AND hasUserPreferences(groupObject(p)) DO
    show(p) <- PropertyDrawShowStatus.Hide;
    
WHEN SET(PropertyDraw p IS PropertyDraw) AND hasUserPreferences(groupObject(p), CustomUser u) DO
    show(p, u) <- PropertyDrawShowStatus.Hide;    

fontSize '{reflection.font.size.group.object.custom.user}'= DATA INTEGER (GroupObject, CustomUser);
fontSize '{reflection.font.size.group.object}' = DATA INTEGER (GroupObject);

isFontBold '{reflection.is.font.bold.group.object.custom.user}'= DATA BOOLEAN (GroupObject, CustomUser);
isFontBold '{reflection.is.font.bold.group.object}' = DATA BOOLEAN (GroupObject);

isFontItalic '{reflection.is.font.italic.group.object.custom.object}'= DATA BOOLEAN (GroupObject, CustomUser);
isFontItalic '{reflection.is.font.italic.group.object}' = DATA BOOLEAN (GroupObject);

pageSize '{reflection.page.size.group.object.custom.object}'= DATA INTEGER (GroupObject, CustomUser);
pageSize '{reflection.page.size.group.object}' = DATA INTEGER (GroupObject);

headerHeight '{reflection.header.height.group.object.custom.object}'= DATA INTEGER (GroupObject, CustomUser);
headerHeight '{reflection.header.height.group.object}' = DATA INTEGER (GroupObject);

CLASS Table '{reflection.table}';
TABLE tables (Table);

sid '{reflection.sid.table}' = DATA ISTRING[100] (Table);
table '{reflection.table}' (sID) = GROUP AGGR Table table WHERE table IS Table BY sid (table);
rows '{reflection.row.table}' = DATA INTEGER (Table);
skipVacuum '{reflection.skip.vacuum.table}' = DATA BOOLEAN (Table);
table '{reflection.table}' = DATA Table (TableKey) NONULL DELETE;
sidTable (TableKey tableKey) = sid(table(tableKey));

CLASS TableKey '{reflection.table.key}';
TABLE tableKey (TableKey);

sid '{reflection.sid.table.key}' = DATA ISTRING[100] (TableKey);
tableKey '{reflection.table.key}' (sID) = GROUP AGGR TableKey tableKey WHERE tableKey IS TableKey BY sid (tableKey);
class '{reflection.class.table.key}' = DATA ISTRING[40] (TableKey);
classSID '{reflection.class.sid.table.key}' = DATA STRING[100] (TableKey);
name '{reflection.name.table.key}' = DATA ISTRING[20] (TableKey);
quantity '{reflection.quantity.table.key}' = DATA INTEGER (TableKey);
quantityTop '{reflection.quantity.top.table.key}' = DATA INTEGER (TableKey);
overQuantity '{reflection.quantity.table.key}' (TableKey tableKey) = OVERRIDE quantityTop(tableKey), quantity(tableKey);

CLASS TableColumn '{reflection.table.column}';
TABLE tableColumn (TableColumn);

table '{reflection.table.table.column}' = DATA Table(TableColumn) NONULL DELETE;
sid '{reflection.sid.table.column}' = DATA ISTRING[100] (TableColumn);
tableSID (sid) = GROUP MAX Table table BY sid(table);

longSID(TableColumn tableColumn) = sid(table(tableColumn)) + '.' + sid(tableColumn);
tableColumnLong '{reflection.table.column}' (sID) = GROUP AGGR TableColumn tableColumn WHERE tableColumn IS TableColumn BY longSID(tableColumn); 
tableColumnSID (sid) = GROUP MAX TableColumn tableColumn BY sid(tableColumn);
property '{reflection.property}' (TableColumn tableColumn) = propertyTable(sid(table(tableColumn)), sid(tableColumn));
lastRecalculateProperty '{reflection.last.recalculate.property}' (TableColumn tableColumn) = lastRecalculate(property(tableColumn));
caption '{reflection.caption.table.column}' (TableColumn tableColumn) = caption(property(tableColumn));
canonicalName '{reflection.canonical.name.table.column}' (TableColumn tableColumn) = canonicalName(property(tableColumn));
quantity '{reflection.quantity.property}' (TableColumn tableColumn) = quantity(property(tableColumn));
quantityTop '{reflection.quantity.top.property}' (TableColumn tableColumn) = quantityTop(property(tableColumn));
overQuantity (TableColumn tableColumn) = OVERRIDE quantityTop(tableColumn), quantity(tableColumn);
notNullQuantity '{reflection.not.null.quantity.property}' (TableColumn tableColumn) = notNullQuantity(property(tableColumn));
tableColumn(Property property) = tableColumnLong(tableSID(property) + '.' + dbName(property));
annotation '{reflection.annotation.action.or.property}' (TableColumn tableColumn) = annotation(property(tableColumn));
return '{reflection.return.table.column}' (TableColumn tableColumn) = return(property(tableColumn));

percentNotNull '{reflection.percent.not.null}' (TableColumn tableColumn) = IF rows (table(tableColumn)) == 0
                                                          THEN 100.00
                                                          ELSE NUMERIC[15,2](notNullQuantity(tableColumn)) / rows (table(tableColumn)) * 100;
sparseColumns '{reflection.sparse.columns}' (table) = GROUP SUM 1 BY table(TableColumn tableColumn) IF percentNotNull(tableColumn) < 50;

notRecalculate '{reflection.not.recalculate}' = DATA BOOLEAN (TableColumn);

recalculateAggregation '{reflection.recalculate.aggregation}'  INTERNAL  'lsfusion.server.physics.admin.service.action.RecalculateTableColumnAction' (TableColumn);
recalculateAggregationWithDependencies '{reflection.recalculate.aggregation.with.dependencies}'  INTERNAL  'lsfusion.server.physics.admin.service.action.RecalculateTableColumnWithDependenciesAction' (TableColumn);
recalculateAggregationWithDependents '{reflection.recalculate.aggregation.with.dependents}'  INTERNAL  'lsfusion.server.physics.admin.service.action.RecalculateTableColumnWithDependentsAction' (TableColumn);
checkAggregation '{reflection.check.aggregation}'  INTERNAL  'lsfusion.server.physics.admin.service.action.CheckTableColumnAction' (TableColumn);
checkAggregation(ISTRING[100] string)  { checkAggregation(tableColumnSID(string)); }
dropDB  INTERNAL  'lsfusion.server.physics.admin.service.action.DropColumnAction' (DropColumn);
drop '{reflection.drop.drop.column}' (DropColumn cl)  { 
    dropDB(cl);
    DELETE cl;
}

recalculateColumnsAggregations '{reflection.recalculate.column.aggregations}' (Table table)  { 
    FOR table == table(TableColumn tableColumn) AND tableColumn IS TableColumn DO {
        recalculateAggregation(tableColumn);    
    }
}
checkClasses '{reflection.check.classes}'  INTERNAL  'lsfusion.server.physics.admin.service.action.CheckTableClassesAction' (Table);
checkClasses(ISTRING[100] string)  { checkClasses(table(string)); }
recalculateClasses '{reflection.recalculate.classes}'  INTERNAL  'lsfusion.server.physics.admin.service.action.RecalculateTableClassesAction' (Table);
notRecalculateStats '{reflection.not.recalculate.stats}' = DATA BOOLEAN (Table);
notRecalculateStats '{reflection.not.recalculate.stats}' (ISTRING[100] sid) = notRecalculateStats(tableSID(sid));
recalculateStats '{reflection.recalculate.stats}'  INTERNAL  'lsfusion.server.physics.admin.service.action.RecalculateTableStatsAction' (Table);
pack '{reflection.pack.table}'  INTERNAL  'lsfusion.server.physics.admin.service.action.PackTableAction' (Table);

disableClasses '{reflection.disable.classes}' = DATA BOOLEAN (Table);
disableStatsTable '{reflection.disable.stats}' (Table t) = notRecalculateStats(t);
disableAggregations '{reflection.disable.aggregations}' (TableColumn tc) = notRecalculate(tc);
disableClasses '{reflection.disable.classes}' = DATA BOOLEAN (TableColumn);
disableStatsTableColumn '{reflection.disable.stats}' = DATA BOOLEAN (TableColumn);

disableClasses '{reflection.disable.classes}' (ISTRING[100] sid) = disableClasses(tableSID(sid));
disableStatsTable '{reflection.disable.stats}' (ISTRING[100] sid) = disableStatsTable(tableSID(sid));
disableAggregations (ISTRING[100] sid) = disableAggregations(tableColumnSID(sid));
disableStatsTableColumn '{reflection.disable.stats}' (ISTRING[100] sid) = disableStatsTableColumn(tableColumnSID(sid));

CLASS DropColumn '{reflection.drop.column}';
TABLE dropColumn (DropColumn);

sid '{reflection.sid.drop.column}' = DATA STRING[100] (DropColumn);
dropColumn '{reflection.drop.column}' (sID) = GROUP NAGGR DropColumn dropColumn WHERE dropColumn IS DropColumn BY sid (dropColumn);
sidTable '{reflection.sid.table.drop.column}' = DATA STRING[100] (DropColumn);
time '{reflection.time.drop.column}' = DATA DATETIME (DropColumn);
revision '{reflection.revision.drop.column}' = DATA STRING[10] (DropColumn);

CLASS GroupObject '{reflection.group.object}';
TABLE groupObjectCustomUser (GroupObject, CustomUser);
TABLE groupObject (GroupObject);

sid '{reflection.sid.group.object}' = DATA STRING[100] (GroupObject) IN id;
form '{reflection.form.group.object}' = DATA Form (GroupObject);
canonicalNameForm (GroupObject groupObject) = canonicalName (form(groupObject)) IN id;
captionForm (GroupObject groupObject) = caption (form(groupObject)) IN id; 
groupSIDFormGroupObject '{reflection.group.object}' (sidGroupObject, canonicalNameNavigatorElement) = GROUP AGGR GroupObject groupObject WHERE groupObject IS GroupObject BY sid (groupObject), canonicalNameForm (groupObject);

CLASS FormGrouping '{reflection.form.grouping}';
TABLE formGrouping (FormGrouping); 

name '{reflection.name.form.grouping}' = DATA STRING[100] (FormGrouping);
groupObject = DATA GroupObject (FormGrouping);
itemQuantity '{reflection.item.quantity.form.grouping}' = DATA BOOLEAN (FormGrouping);
formGrouping '{reflection.form.grouping}' (nameFormGrouping, groupObject) = GROUP AGGR FormGrouping formGrouping WHERE formGrouping IS FormGrouping BY name(formGrouping), groupObject(formGrouping);

TABLE formGroupingPropertyDraw (FormGrouping, PropertyDraw);
groupOrder '{reflection.group.order.form.grouping}' = DATA INTEGER (FormGrouping, PropertyDraw);
sum '{reflection.sum.form.grouping}' = DATA BOOLEAN (FormGrouping, PropertyDraw);
max '{reflection.max.form.grouping}' = DATA BOOLEAN (FormGrouping, PropertyDraw);
pivot '{reflection.pivot.form.grouping}' = DATA BOOLEAN (FormGrouping, PropertyDraw);

changeQuantity(Property p, INTEGER q)  { 
    quantity(p) <- q;
}

changeQuantity(TableColumn tc)  { 
    INPUT int = INTEGER DO
        IF int THEN {
            changeQuantity(property(tc), int);
        }      
}

changeNotNullQuantity(Property p, INTEGER q)  { 
    notNullQuantity(p) <- q;
}

changeNotNullQuantity(TableColumn tc)  { 
    INPUT int = INTEGER DO
        IF int THEN {
            changeNotNullQuantity(property(tc), int);
        }      
}

FORM physicalModel '{reflection.form.physical.model}'
    OBJECTS t=Table
    PROPERTIES(t) READONLY sid, rows, sparseColumns
    PROPERTIES(t) GRID disableClasses, checkClasses, recalculateClasses,
                       disableStatsTable, notRecalculateStats, recalculateStats, 
                       recalculateColumnsAggregations, pack, skipVacuum

    OBJECTS tk=TableKey
    PROPERTIES(tk) READONLY class, classSID, name, quantity CHANGEABLE, quantityTop

    OBJECTS tc=TableColumn
    PROPERTIES(tc) READONLY sid, caption, canonicalName, annotation, property, return, quantity CHANGEABLE ON CHANGE changeQuantity(tc), quantityTop,
                   notNullQuantity CHANGEABLE ON CHANGE changeNotNullQuantity(tc), percentNotNull, lastRecalculateProperty
    PROPERTIES(tc) GRID disableAggregations, disableClasses, disableStatsTableColumn, recalculateAggregation, recalculateAggregationWithDependencies, 
            recalculateAggregationWithDependents, checkAggregation

    OBJECTS dc=DropColumn
    PROPERTIES(dc) READONLY sidTable, sid, time, revision
    PROPERTIES(dc) drop GRID

    FILTERGROUP filtersForm
        FILTER '{reflection.form.physical.model.filter.table}' table(tc)==t 'F8' DEFAULT

    FILTERS
        table(tk)==t
;

DESIGN physicalModel {
    BOX {
        NEW container BEFORE TOOLBARBOX{
            fill = 1;
            type = TABBED;
            NEW modelContainer {
                fill = 1;
                caption = '{reflection.form.physical.model.caption.tables}';
                MOVE BOX(t) {
                    caption = '{reflection.form.physical.model.caption.tables}';
                    fill = 1;
                };
                MOVE BOX(tk) {
                    caption = '{reflection.form.physical.model.caption.keys}';
                    fill = 0.5;
                }
                MOVE BOX(tc) {
                    caption = '{reflection.form.physical.model.caption.columns}';
                    fill = 1;
                }
            }

            NEW dropColumnsContainer {
                fill = 1;
                caption = '{reflection.form.physical.model.caption.deleted.columns}';
                MOVE BOX(dc);
            }
        }
    }
}

FORM navigatorElements '{reflection.form.navigator.elements}'
    TREE neTree ne=NavigatorElement PARENT parent(ne)
    PROPERTIES(ne) READONLY caption, canonicalName, number
    ORDERS number(ne)   
;

FORM forms '{reflection.form.forms}'

    OBJECTS tf=Form
    PROPERTIES(tf) READONLY canonicalName, caption

    OBJECTS u=CustomUser PANEL
    PROPERTIES(u) SELECTOR firstName, lastName, login

    OBJECTS g=GroupObject
    PROPERTIES(g) sid READONLY, fontSize, isFontBold, isFontItalic, pageSize, headerHeight, hasUserPreferences
    PROPERTIES(g,u) fontSize, isFontBold, isFontItalic, pageSize, headerHeight, hasUserPreferences
    
    OBJECTS fg=FormGrouping
    PROPERTIES(fg) name, itemQuantity

    OBJECTS p=PropertyDraw
    PROPERTIES(p) READONLY sid, caption

    PROPERTIES(p) captionShow
    PROPERTIES(p,u) captionShow
    PROPERTIES(p) columnCaption
    PROPERTIES(p,u) columnCaption
    PROPERTIES(p) columnPattern
    PROPERTIES(p,u) columnPattern
    PROPERTIES(p) columnWidth
    PROPERTIES(p,u) columnWidth
    PROPERTIES(p) columnOrder
    PROPERTIES(p,u) columnOrder
    PROPERTIES(p) columnSort
    PROPERTIES(p) columnAscendingSort
    PROPERTIES(p,u) columnSort
    PROPERTIES(p,u) columnAscendingSort
    PROPERTIES(fg,p) groupOrder, sum, max, pivot 

    FILTERS
        form(g) == tf,
        form(p) == tf,
        groupObject(fg)==g 

    FILTERGROUP filtersForm
        FILTER '{reflection.form.forms.filter.group.object}' groupObject(p)==g 'F8'
;

DESIGN forms {
    OBJECTS {
        NEW groupingContainer BEFORE BOX(p) {
            type = CONTAINERH;
            fill = 1;
            MOVE BOX(g) {
                fill = 2;
            }
            MOVE BOX(fg) {
                fill = 1;
            }
        }
    }
}

dumb (PropertyGroup pg) = ' ' IF pg IS PropertyGroup;

FORM properties '{reflection.form.properties}'
    OBJECTS p=Property
    PROPERTIES(p) READONLY caption, canonicalName, dbName, annotation, tableSID, return, class, complexity, parent, number,
        quantity, notNullQuantity, userLoggable CHANGEABLE, loggable, stored CHANGEABLE, isSetNotNull CHANGEABLE, 
        disableInputList CHANGEABLE, lastRecalculate

    TREE treePropertiesObject tps=PropertyGroup PARENT parent(tps), ps=Property
    PROPERTIES(tps) READONLY caption, SID, d1=dumb, d2=dumb, d3=dumb, d4=dumb, d5=dumb, parent, number, d6=dumb, d7=dumb, d8=dumb, d9=dumb
    PROPERTIES(ps) READONLY caption, canonicalName, dbName, return, class, complexity, parent, number, quantity, notNullQuantity, userLoggable CHANGEABLE, loggable, stored CHANGEABLE, isSetNotNull CHANGEABLE

    ORDERS number(p)
    ORDERS number(tps)

    FILTERS
        parent(ps)==tps
;

DESIGN properties {
    BOX {
        NEW container BEFORE TOOLBARBOX {
            fill = 1;
            type = TABBED;

            NEW treeContainer {
                fill = 1;
                caption = '{reflection.form.properties.caption.tree}';
                MOVE BOX(TREE treePropertiesObject);
            }

            NEW tableContainer {
                fill = 1;
                caption = '{reflection.form.properties.caption.table}';
                MOVE BOX(p);
            }
        }
    }
}

FORM actions '{reflection.form.actions}'
    OBJECTS p=Action
    PROPERTIES(p) GRID READONLY caption, canonicalName, annotation, class, parent, number

    TREE treeActionsObject tps=PropertyGroup PARENT parent(tps), ps=Action
    PROPERTIES(tps) READONLY caption, SID, d1=dumb, d2=dumb, number
    PROPERTIES(ps) GRID READONLY caption, canonicalName, class, parent, number

    ORDERS number(p)
    ORDERS number(tps)

    FILTERS
        parent(ps)==tps
;

DESIGN actions {
    BOX {
        NEW container BEFORE TOOLBARBOX {
            fill = 1;
            type = TABBED;

            NEW treeContainer {
                fill = 1;
                caption = '{reflection.form.actions.caption.tree}';
                MOVE BOX(TREE treeActionsObject);
            }

            NEW tableContainer {
                fill = 1;
                caption = '{reflection.form.actions.caption.table}';
                MOVE BOX(p);
            }
        }
    }
}

NAVIGATOR {
    system {
        NEW FOLDER metadata '{navigator.metadata}' AFTER logs {
            NEW Reflection.physicalModel;
            NEW Reflection.navigatorElements;
            NEW Reflection.forms;
            NEW Reflection.properties;
            NEW Reflection.actions;
        }
    }
}
