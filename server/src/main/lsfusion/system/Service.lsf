MODULE Service;

REQUIRE System, Security, SystemEvents;

NAMESPACE Service;

serviceDBAction '{service.db.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.ServiceDBAction' ();
//todo: rename to checkMaterializationsAction
checkAggregationsAction '{service.check.materializations.action}'  INTERNAL 'lsfusion.server.physics.admin.service.action.CheckMaterializationsAction' ();
checkClassesAction '{service.check.classes.action}'   INTERNAL  'lsfusion.server.physics.admin.service.action.CheckClassesAction' ();
checkIndicesAction '{service.check.indexes.action}'  INTERNAL 'lsfusion.server.physics.admin.service.action.CheckIndexesAction' ();
recalculateClassesAction '{service.recalculate.classes.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.RecalculateClassesAction' ();
recalculateAction '{service.recalculate.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.RecalculateAction' ();
recalculateFollowsAction '{service.recalculate.follow.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.RecalculateFollowsAction' ();
recalculateStatsAction '{service.recalculate.stats.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.RecalculateStatsAction' ();
overCalculateStatsAction '{service.over.calculate.stats.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.OverCalculateStatsAction' ();
maxQuantityOverCalculate '{service.max.quantity.over.calculate}' = DATA INTEGER ();

makeProcessDumpAction '{service.make.process.dump.action}'  INTERNAL  'lsfusion.server.physics.admin.monitor.action.MakeProcessDumpAction' ();

serviceDBMultiThreadAction '{service.service.db.multi.thread.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.ServiceDBMultiThreadAction' (INTEGER, INTEGER) NULL;
//todo: rename to checkMaterializationsMultiThreadAction
checkAggregationsMultiThreadAction '{service.check.materializations.multi.thread.action}'  INTERNAL 'lsfusion.server.physics.admin.service.action.CheckMaterializationsMultiThreadAction' (INTEGER, INTEGER) NULL;
checkClassesMultiThreadAction '{service.check.classes.multi.thread.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.CheckClassesMultiThreadAction' (INTEGER, INTEGER) NULL;
recalculateClassesMultiThreadAction '{service.recalculate.classes.multi.thread.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.RecalculateClassesMultiThreadAction' (INTEGER, INTEGER) NULL;
recalculateMultiThreadAction '{service.recalculate.multi.thread.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.RecalculateMultiThreadAction' (INTEGER, INTEGER) NULL;
recalculateFollowsMultiThreadAction '{service.recalculate.follows.multi.thread.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.RecalculateFollowsMultiThreadAction' (INTEGER, INTEGER) NULL;
recalculateStatsMultiThreadAction '{service.recalculate.stats.thread.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.RecalculateStatsMultiThreadAction' (INTEGER, INTEGER) NULL;
overCalculateStatsMultiThreadAction '{service.over.calculate.stats.multi.thread.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.OverCalculateStatsMultiThreadAction' (INTEGER, INTEGER) NULL;

serviceDBMultiThreadAction '{service.service.db.multi.thread.action.timeout}' (INTEGER propertyTimeout)  { serviceDBMultiThreadAction (NULL, propertyTimeout); }
//todo: rename to checkMaterializationsMultiThreadAction
checkAggregationsMultiThreadAction '{service.check.materializations.multi.thread.action.timeout}' (INTEGER propertyTimeout) { checkAggregationsMultiThreadAction (NULL, propertyTimeout); }
checkClassesMultiThreadAction '{service.check.classes.multi.thread.action.timeout}' (INTEGER propertyTimeout) { checkClassesMultiThreadAction (NULL, propertyTimeout); }
recalculateClassesMultiThreadAction '{service.recalculate.classes.multi.thread.action.timeout}' (INTEGER propertyTimeout) { recalculateClassesMultiThreadAction (NULL, propertyTimeout); }
recalculateMultiThreadAction '{service.recalculate.multi.thread.action.timeout}' (INTEGER propertyTimeout) { recalculateMultiThreadAction (NULL, propertyTimeout); }
recalculateFollowsMultiThreadAction '{service.recalculate.follows.multi.thread.action.timeout}' (INTEGER propertyTimeout) { recalculateFollowsMultiThreadAction (NULL, propertyTimeout); }
recalculateStatsMultiThreadAction '{service.recalculate.stats.thread.action.timeout}' (INTEGER propertyTimeout) { recalculateStatsMultiThreadAction (NULL, propertyTimeout); }
overCalculateStatsMultiThreadAction '{service.over.calculate.stats.multi.thread.action.timeout}' (INTEGER propertyTimeout) { overCalculateStatsMultiThreadAction (NULL, propertyTimeout); }

threadCountMultiThread '{service.thread.count.multi.thread}' = DATA LOCAL INTEGER (); 
serviceDBMultiThreadAction '{service.service.db.multi.thread.action.thread.count}'  { serviceDBMultiThreadAction(threadCountMultiThread(), NULL); }
//todo: rename to checkMaterializationsMultiThreadAction
checkAggregationsMultiThreadAction '{service.check.materializations.multi.thread.action.thread.count}'  { checkAggregationsMultiThreadAction(threadCountMultiThread(), NULL); }
checkClassesMultiThreadAction '{service.check.classes.multi.thread.action.thread.count}'  { checkClassesMultiThreadAction(threadCountMultiThread(), NULL); }
recalculateClassesMultiThreadAction '{service.recalculate.classes.multi.thread.action.thread.count}'  { recalculateClassesMultiThreadAction(threadCountMultiThread(), NULL); }
recalculateMultiThreadAction '{service.recalculate.multi.thread.action.thread.count}'  { recalculateMultiThreadAction(threadCountMultiThread(), NULL); }
recalculateFollowsMultiThreadAction '{service.recalculate.follows.multi.thread.action.thread.count}'  { recalculateFollowsMultiThreadAction (threadCountMultiThread(), NULL); }
recalculateStatsMultiThreadAction '{service.recalculate.stats.thread.action.thread.count}'  { recalculateStatsMultiThreadAction (threadCountMultiThread(), NULL); }
overCalculateStatsMultiThreadAction '{service.over.calculate.stats.multi.thread.action.thread.count}'  { overCalculateStatsMultiThreadAction (threadCountMultiThread(), NULL); }

analyzeDBAction '{service.analyze.db.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.AnalyzeDBAction' ();
vacuumDBAction '{service.vacuum.db.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.VacuumDBAction' ();
packAction '{service.pack.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.PackAction' ();
getVMInfo '{service.get.vm.info}'  INTERNAL  'lsfusion.server.physics.admin.service.action.GetVMInfoAction' ();

singleTransaction '{service.single.transaction}' = DATA BOOLEAN ();

CLASS DBType {
    POSTGRE 'Postgre',
    MSSQL 'MS SQL'
}
TABLE DBType(DBType);
uploadType '{service.upload.type}' = DATA DBType ();
uploadStaticNameType = staticName(uploadType()); 
uploadStaticCaptionType '{service.upload.type}' = staticCaption(uploadType()); 
uploadHost '{service.upload.host}' = DATA STRING[100] ();
uploadUser '{service.upload.user}' = DATA STRING[100] ();
uploadPassword '{service.upload.password}' = DATA STRING[100] ();
uploadInstance '{service.upload.instance}' = DATA STRING[100] ();
onStarted() + { 
    uploadType() <- DBType.MSSQL;
    uploadHost() <- 'localhost';
    uploadUser() <- 'sa';
    uploadPassword() <- '11111';
    uploadInstance() <- 'SQLEXPRESS';
}
uploadDB '{service.upload.db}' = DATA STRING[100] (); 
uploadToDBAction '{service.upload.to.db.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.UploadToDBAction' ();

META defineMode(property, action, type, caption1, caption2)
    setRepeatableRead###property caption1  INTERNAL  action (type);
    refreshRepeatableRead###property caption2()  { 
        setRepeatableRead###property(property());
    }
    WHEN CHANGED(property()) DO {
        refreshRepeatableRead###property();
    }
    onStarted() + { 
        refreshRepeatableRead###property();
    } 
END

disableTILMode '{service.disable.til.mode}' = DATA BOOLEAN ();
serverComputer '{service.server.computer}' = DATA Computer();
hostnameServerComputer '{service.server.computer}' () = hostname(serverComputer());

@defineMode(disableTILMode, 'lsfusion.server.physics.admin.service.action.SetRepeatableReadDisableTILModeAction', BOOLEAN, '{service.define.mode.set.repeatable.read.disable.til.mode}', '{service.define.mode.refresh.repeatable.read.disable.til.mode}');

@defineMode(hostnameServerComputer, 'lsfusion.server.physics.admin.service.action.SetHostnameServerComputerAction', STRING[100], '{service.define.mode.set.repeatable.read.hostname.server.computer}', '{service.define.mode.refresh.repeatable.read.hostname.server.computer}');

@defineLog (Email, '{service.define.log.of.incoming.email}', log, dateSent);

countDaysClearFusionTempFiles '{service.count.days.clear.fusion.temp.files}' = DATA INTEGER (); 
clearFusionTempFiles  INTERNAL  'lsfusion.server.physics.admin.service.action.ClearFusionTempFilesAction' ();
EXTEND FORM options PROPERTIES countDaysClearFusionTempFiles();
    DESIGN options { log { MOVE PROPERTY(countDaysClearFusionTempFiles());} }    

setReupdateMode '{service.set.reupdate.mode}'  INTERNAL  'lsfusion.server.physics.admin.service.action.SetReupdateModeAction' (BOOLEAN);
reupdateMode '{service.reupdate.mode}' = DATA BOOLEAN ();
refreshReupdateMode '{service.refresh.reupdate.mode}'()  { 
    setReupdateMode(reupdateMode());
}
WHEN CHANGED(reupdateMode()) DO {
    refreshReupdateMode();
}
onStarted() + { 
    refreshReupdateMode();
} 

restartPushed = DATA BOOLEAN ();
notRestartPushed = NOT restartPushed();

scheduledRestart '{service.scheduled.restart}' = DATA BOOLEAN ();
restartServerAction '{service.restart.server.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.RestartAction' ();
cancelRestartServerAction '{service.cancel.restart.server.action}'  INTERNAL  'lsfusion.server.physics.admin.service.action.CancelRestartAction' ();

forbidLogin '{service.forbid.login}' = DATA BOOLEAN ();
setPendingRestartAction '{service.set.pending.restart.action}'  INTERNAL  <{ context.getRestartManager().setPendingRestart(true); }>;
resetPendingRestartAction '{service.reset.pending.restart.action}'  INTERNAL  <{ context.getRestartManager().setPendingRestart(false); }>;


restartServer '{service.restart.server}'  ABSTRACT LIST ( );
restartServer() + { 
    IF scheduledRestart() THEN restartServerAction();
    IF forbidLogin() THEN setPendingRestartAction();
    restartPushed() <- TRUE;
    apply();
}

cancelRestartServer '{service.cancel.restart.server}'  ABSTRACT LIST ( );
cancelRestartServer() + {  
    cancelRestartServerAction();
    resetPendingRestartAction();
    restartPushed() <- NULL;
    apply();
}

onStarted() + { 
    restartPushed() <- NULL;
} 

runGarbageCollector '{service.run.garbage.collector}'  INTERNAL  'lsfusion.server.physics.admin.service.action.GarbageCollectorAction' ();
dropLRUPercent '{service.drop.lru.percent}' = DATA DOUBLE ();
randomDropLRU '{service.random.drop.lru}' = DATA BOOLEAN ();
dropLRUCustom '{service.drop.lru}'  INTERNAL  'lsfusion.server.physics.admin.service.action.DropLRUAction' (DOUBLE, BOOLEAN);
dropLRU '{service.drop.lru}' ()  { dropLRUCustom(dropLRUPercent(), randomDropLRU()); }
makeHeapDump '{service.make.heap.dump}'  INTERNAL  'lsfusion.server.physics.admin.service.action.MakeHeapDumpAction' ();
isServerRestarting = NATIVE BOOLEAN ();
isNotServerRestarting () = NOT isServerRestarting();

// maintenance

FORM maintenance '{service.form.maintenance}'
    PROPERTIES() scheduledRestart, forbidLogin, restartServer SHOWIF notRestartPushed(), cancelRestartServer SHOWIF restartPushed(),
                 //uploadStaticCaptionType, uploadHost, uploadUser, uploadPassword, uploadInstance, uploadDB, uploadToDBAction,
                 clearApplicationLog, 
                 serviceDBAction, recalculateClassesAction, recalculateAction, recalculateFollowsAction, maxQuantityOverCalculate,
                 checkClassesAction, checkAggregationsAction, checkIndicesAction,  
                 recalculateStatsAction, overCalculateStatsAction,
                 packAction, analyzeDBAction, vacuumDBAction, disableTILMode, reupdateMode, singleTransaction, threadCountMultiThread, serviceDBMultiThreadAction,
                 recalculateClassesMultiThreadAction, recalculateMultiThreadAction, recalculateFollowsMultiThreadAction,
                 recalculateStatsMultiThreadAction, overCalculateStatsMultiThreadAction, checkClassesMultiThreadAction, checkAggregationsMultiThreadAction,      
                 runGarbageCollector, getVMInfo, dropLRUPercent, randomDropLRU, dropLRU, makeHeapDump           
;

DESIGN maintenance {        
    NEW pane {
        fill = 1;
        lines = 3;
        NEW leftColumn {               
            NEW administration {
                caption = '{service.form.maintenance.caption.administration}';
                MOVE PROPERTY(scheduledRestart());
                MOVE PROPERTY(forbidLogin()); 
                MOVE PROPERTY(restartServer());
                MOVE PROPERTY(cancelRestartServer());
            }    
//            NEW upload {
//                caption = '{service.form.maintenance.caption.upload}';
//                MOVE PROPERTY(uploadStaticCaptionType());
//                MOVE PROPERTY(uploadHost());
//                MOVE PROPERTY(uploadUser());
//                MOVE PROPERTY(uploadPassword());
//                MOVE PROPERTY(uploadInstance());
//                MOVE PROPERTY(uploadDB());
//                MOVE PROPERTY(uploadToDBAction());
//            }
            NEW log {
                caption = '{service.form.maintenance.caption.logging}';
                MOVE PROPERTY(clearApplicationLog());
            }                                                          
        }
        NEW centralColumn {
            NEW oneThread {
                caption = '{service.form.maintenance.caption.one.thread}';
                MOVE PROPERTY(serviceDBAction());
                NEW recalculateOneThread {
                    caption = '{service.form.maintenance.caption.recalculate.one.thread}';
                    MOVE PROPERTY(recalculateClassesAction());
                    MOVE PROPERTY(recalculateAction());
                    MOVE PROPERTY(recalculateFollowsAction());
                    MOVE PROPERTY(recalculateStatsAction());
                    MOVE PROPERTY(overCalculateStatsAction());             
                    MOVE PROPERTY(maxQuantityOverCalculate());
                }
                NEW checkOneThread {
                    caption = '{service.form.maintenance.caption.check.one.thread}';
                    MOVE PROPERTY(checkClassesAction());
                    MOVE PROPERTY(checkAggregationsAction());
                    MOVE PROPERTY(checkIndicesAction());
                }
            NEW database {
                caption = '{service.form.maintenance.caption.database}';
                MOVE PROPERTY(packAction());
                MOVE PROPERTY(analyzeDBAction());
                MOVE PROPERTY(vacuumDBAction());
                MOVE PROPERTY(disableTILMode());
                MOVE PROPERTY(reupdateMode());
                MOVE PROPERTY(singleTransaction());
            }                            
            }        
        }
        NEW rightColumn {
             NEW multiThread {
                 caption = '{service.form.maintenance.caption.multi.thread}';
                 MOVE PROPERTY(threadCountMultiThread());
                 MOVE PROPERTY(serviceDBMultiThreadAction());
                 NEW recalculateMultiThread {
                     caption = '{service.form.maintenance.caption.recalculate.multi.thread}';
                     MOVE PROPERTY(recalculateClassesMultiThreadAction());
                     MOVE PROPERTY(recalculateMultiThreadAction());
                     MOVE PROPERTY(recalculateFollowsMultiThreadAction());
                     MOVE PROPERTY(recalculateStatsMultiThreadAction());  
                     MOVE PROPERTY(overCalculateStatsMultiThreadAction());
                 }
                 NEW checkMultiThread {
                     caption = '{service.form.maintenance.caption.check.multi.thread}';
                     MOVE PROPERTY(checkClassesMultiThreadAction());
                     MOVE PROPERTY(checkAggregationsMultiThreadAction());
                 }                  
             }  
            NEW virtualMachine {
                caption = '{service.form.maintenance.caption.virtual.machine}';
                MOVE PROPERTY(runGarbageCollector());
                MOVE PROPERTY(getVMInfo());
                MOVE PROPERTY(dropLRUPercent());
                MOVE PROPERTY(randomDropLRU());
                MOVE PROPERTY(dropLRU());
                MOVE PROPERTY(makeHeapDump());
            }                      
        }
    }       
    MOVE TOOLBARBOX; 
}

NAVIGATOR { 
    system {
        NEW maintenance AFTER performance;
    }
}

// settings form

FORM settings '{service.form.settings}'
    PROPERTIES() currentDate, currentDateTime, currentDateTimeSnapshot, defaultBackgroundColor, defaultForegroundColor, 
                 reportCharWidth, reportRowHeight, reportNotToStretch, hostnameServerComputer, 
                 dataLogicsName, dataDisplayName, loadLogicsLogo, openLogicsLogo, resetLogicsLogo, loadLogicsIcon, openLogicsIcon, resetLogicsIcon
;

DESIGN settings {
    OBJECTS {
        NEW tabs {
            tabbed = TRUE;
            fill = 1;
            NEW pane {
                caption = '{service.form.settings.caption.general}';
                lines = 3;
                NEW leftColumn {
                    NEW current {
                        caption = '{service.form.settings.caption.current}';
                        MOVE PROPERTY(currentDate());
                        MOVE PROPERTY(currentDateTime());
                        MOVE PROPERTY(currentDateTimeSnapshot());
                        MOVE PROPERTY(hostnameServerComputer());
                    }
                    NEW report {
                        caption = '{service.form.settings.caption.reports}';
                        MOVE PROPERTY(reportCharWidth());
                        MOVE PROPERTY(reportRowHeight());
                        MOVE PROPERTY(reportNotToStretch());
                    }        
                    NEW logoContainer {
                        caption = '{system.logics.gui.preferences}';
                        MOVE PROPERTY(dataLogicsName());
                        MOVE PROPERTY(dataDisplayName());
                        MOVE PROPERTY(loadLogicsLogo());
                        MOVE PROPERTY(openLogicsLogo());
                        MOVE PROPERTY(resetLogicsLogo());
                        MOVE PROPERTY(loadLogicsIcon());
                        MOVE PROPERTY(openLogicsIcon());
                        MOVE PROPERTY(resetLogicsIcon());
                    }                                       
                }
            }
        }
    }
}

NAVIGATOR { 
    system {
        NEW Service.settings FIRST;
    }
}

// memory

EXTEND FORM settings
    PROPERTIES() initHeapSize, maxHeapSize, minHeapFreeRatio, maxHeapFreeRatio, vmargs

    OBJECTS m = MemoryLimit
    PROPERTIES(m) name, maxHeapSize, vmargs
    PROPERTIES(m) TOOLBAR NEW, DELETE 
;

DESIGN settings {
    tabs {
        NEW clientVMOptions {
            caption = '{service.form.settings.caption.client.vm.options}';
            MOVE PROPERTY(initHeapSize());
            MOVE PROPERTY(maxHeapSize());
            MOVE PROPERTY(minHeapFreeRatio());
            MOVE PROPERTY(maxHeapFreeRatio());
            MOVE PROPERTY(vmargs());
            
            MOVE BOX(m);
        }
    }
}

// settings

CLASS Setting '{service.setting}';
TABLE setting (Setting);

name '{service.name.setting}' = DATA ISTRING[100] (Setting);
setting (name) = GROUP AGGR Setting setting BY name(setting);
baseValue '{service.base.value.setting}' = DATA STRING[100] (Setting);

TABLE settingUserRole(Setting, UserRole);
baseValue '{service.base.value.setting.user.role}' = DATA STRING[100] (Setting, UserRole);
overBaseValue '{service.over.base.value.setting.user}' (Setting p, UserRole ur) = OVERRIDE baseValue(p, ur), baseValue(p);
defaultValue '{service.default.value.setting}' = DATA STRING[100] (Setting);
value '{service.value.setting.user.role}' (Setting p, UserRole ur) = OVERRIDE baseValue(p, ur), baseValue(p), defaultValue(p);
value (Setting p) = OVERRIDE baseValue(p), defaultValue(p);
valueSetting (ISTRING[100] name) = value(setting(name)); 
valueSettingBoolean (ISTRING[100] name) = value(setting(name)) == 'true';

pushSetting '{service.push.setting}'  INTERNAL  'lsfusion.server.physics.admin.service.action.PushSettingAction' (STRING[100], STRING[100]);
popSetting '{service.pop.setting}'  INTERNAL  'lsfusion.server.physics.admin.service.action.PopSettingAction' (STRING[100]);

writeDefaultSettings '{service.write.default.settings}'  INTERNAL  'lsfusion.server.physics.admin.service.action.WriteDefaultSettingsAction' ();
updateSetting '{service.update.setting}'  INTERNAL  'lsfusion.server.physics.admin.service.action.UpdateSettingAction' (Setting, UserRole, BOOLEAN);

resetServerSettingsCacheAction '{reset.server.settings.cache}' INTERNAL 'lsfusion.server.physics.admin.service.action.ResetServerSettingsCacheAction'();

updateGlobalSetting(Setting r) {
    updateSetting(r, NULL, TRUE); // system user and users without role
    FOR UserRole ur IS UserRole DO // need this even in onStarted, because onStarted is executed after initializing RMI Manager, that's why roleSettings can be already clone, and we need to update it too
        updateSetting(r, ur, NULL);    
}

onInit() + {
    writeDefaultSettings();

    FOR baseValue(Setting r) DO
        updateGlobalSetting(r);

    FOR baseValue(Setting r, UserRole ur) DO
        updateSetting(r, ur, TRUE);
}

WHEN CHANGED (baseValue(Setting r)) DO
    updateGlobalSetting(r);
    
WHEN CHANGED (baseValue(Setting r, UserRole ur)) 
    DO updateSetting(r, ur, TRUE);

EXTEND FORM settings
    OBJECTS r = Setting
    PROPERTIES(r) READONLY name, defaultValue, baseValue CHANGEABLE
    
    OBJECTS ur = UserRole
    PROPERTIES(ur) READONLY name, sid 
    PROPERTIES(r, ur) value READONLY, baseValue
    
    FILTERGROUP override FILTER '{service.form.settings.only.override}' baseValue(r) OR baseValue(r, ur) 'F9'
;

DESIGN settings {
    tabs {
        NEW parameters {
            caption = '{service.form.settings.caption.parameters}';
            MOVE BOX(r);
            MOVE BOX(ur);
        }
    }
}

inDevMode = NATIVE BOOLEAN ();
isLightStart = NATIVE BOOLEAN ();

resetConnections() + {
    connectionStatus(Connection c) <- ConnectionStatus.disconnectedConnection
        WHERE (connectionStatus(c) = ConnectionStatus.connectedConnection OR connectionStatus(c) = ConnectionStatus.disconnectingConnection)
        AND currentLaunch() != launch(c) AND ((NOT isLightStart()) OR connectTime(c) < subtractSeconds(currentDateTime(), 60));
}

WHEN CHANGED (lsfParams(STRING s)) DO {
    resetServerSettingsCacheAction();
}

WHEN CHANGED (logicsName()) OR CHANGED (displayName()) OR CHANGED (logicsLogo()) OR CHANGED (logicsIcon()) DO {
    resetServerSettingsCacheAction();
}
getServerSettings() ABSTRACT CASE @@noauth;

getServerSettings() + WHEN TRUE THEN {
    LOCAL noAuthResources = RAWFILE(STRING);
    LOCAL noAuthResourcesOrder = INTEGER(STRING);
    onLoginInit();
    FOR INTEGER order = onLoginInit(STRING s) ORDER order DO {
        readResource(s);
        noAuthResources(resourcePath()) <- RAWFILE (resource());
        noAuthResourcesOrder(resourcePath()) <- order;
    }
    
    generateJnlpUrls();
    EXPORT JSON FROM logicsName(), displayName(), logicsLogo = FILE(logicsLogo()), logicsIcon = FILE(logicsIcon()), platformVersion(), apiVersion(), inDevMode(),
    sessionConfigTimeout=INTEGER(valueSetting('sessionConfigTimeout')), anonymousUI=(valueSetting('enableUI')='2'),
    jnlpUrls=exportText(),
    disableRegistration=disableRole('selfRegister'),
    lsfParams= (JSON FROM key = STRING s, value = lsfParams(s) WHERE lsfParams(s)),
    noAuthResourcesBeforeSystem = (JSON FROM key = STRING s, value = noAuthResources(s) WHERE noAuthResourcesOrder(s) < 0 ORDER noAuthResourcesOrder(s)),
    noAuthResourcesAfterSystem = (JSON FROM key = STRING s, value = noAuthResources(s) WHERE noAuthResourcesOrder(s) >= 0 ORDER noAuthResourcesOrder(s));
};

// logging for user

setExplainAnalyzeMode '{service.set.explain.analyze.mode}'  INTERNAL  'lsfusion.server.physics.admin.service.action.SetExplainAnalyzeModeUserAction' (BOOLEAN, User);
explainAnalyzeMode '{service.explain.analyze.mode}' = DATA BOOLEAN (User);
refreshExplainAnalyzeMode '{service.refresh.explain.analyze.mode}'(User user)  { 
    setExplainAnalyzeMode(explainAnalyzeMode(user), user);  
}
WHEN CHANGED(explainAnalyzeMode(User user)) DO {
    refreshExplainAnalyzeMode(user);
}

turnExplainAnalizeOnCurrentUser '{service.turn.explain.analyze.on.current.user}' ()  { 
    explainAnalyzeMode(User user) <- TRUE WHERE user == currentUser();     
}

setLoggerDebugEnabled '{service.set.logger.debug.enabled}'  INTERNAL  'lsfusion.server.physics.admin.service.action.SetLoggerDebugEnabledUserAction' (BOOLEAN, User);
loggerDebugEnabled '{service.logger.debug.enabled}' = DATA BOOLEAN (User);
refreshLoggerDebugEnabled ''(User user)  { 
    setLoggerDebugEnabled(loggerDebugEnabled(user), user);
}
WHEN CHANGED(loggerDebugEnabled(User user)) DO {
    refreshLoggerDebugEnabled(user);
}

setExplainTemporaryTablesEnabled '{service.set.explain.temporary.tables.enabled}'  INTERNAL  'lsfusion.server.physics.admin.service.action.SetExplainTemporaryTablesEnabledUserAction' (BOOLEAN, User);
explainTemporaryTablesEnabled '{service.explain.temporary.tables.enabled}' = DATA BOOLEAN (User);
refreshExplainTemporaryTablesEnabled '' (User user)  { 
    setExplainTemporaryTablesEnabled(explainTemporaryTablesEnabled(user), user);
}
WHEN CHANGED(explainTemporaryTablesEnabled(User user)) DO {
    refreshExplainTemporaryTablesEnabled(user);
}

setRemoteLoggerDebugEnabled '{service.set.remote.logger.debug.enabled}'  INTERNAL  'lsfusion.server.physics.admin.service.action.SetRemoteLoggerDebugEnabledUserAction' (BOOLEAN, User);
remoteLoggerDebugEnabled '{service.remote.logger.debug.enabled}' = DATA BOOLEAN (User);
refreshRemoteLoggerDebugEnabled ''(User user)  { 
    setRemoteLoggerDebugEnabled(remoteLoggerDebugEnabled(user), user);
}
WHEN CHANGED(remoteLoggerDebugEnabled(User user)) DO {
    refreshRemoteLoggerDebugEnabled(user);
}

setExLogEnabled '{service.set.ex.log.enabled}'  INTERNAL  'lsfusion.server.physics.admin.service.action.SetExLogUserAction' (BOOLEAN, User);
remoteExLogEnabled '{service.remote.ex.log.enabled}' = DATA BOOLEAN (User);
refreshExLogEnabled ''(User user)  { 
    setExLogEnabled(remoteExLogEnabled(user), user);
}
WHEN CHANGED(remoteExLogEnabled(User user)) DO {
    refreshExLogEnabled(user);
}

setPausableLogEnabled '{service.set.pausable.log.enabled}'  INTERNAL  'lsfusion.server.physics.admin.service.action.SetPausableLogUserAction' (BOOLEAN, User);
remotePausableLogEnabled '{service.remote.pausable.log.enabled}' = DATA BOOLEAN (User);
refreshPausableLogEnabled ''(User user)  { 
    setPausableLogEnabled(remotePausableLogEnabled(user), user);
}
WHEN CHANGED(remotePausableLogEnabled(User user)) DO {
    refreshPausableLogEnabled(user);
}

setExplainAllocationEnabled '{service.set.explain.app.enabled}' INTERNAL 'lsfusion.server.physics.admin.service.action.SetExplainAppEnabledUserAction' (BOOLEAN, User);
explainAppEnabled '{service.explain.app.enabled}' = DATA BOOLEAN (User);
refreshExplainAllocationEnabled '' (User user) {
    setExplainAllocationEnabled(explainAppEnabled(user), user);
}
WHEN CHANGED(explainAppEnabled(User user)) DO {
    refreshExplainAllocationEnabled(user);
}

onStarted() + {
    FOR explainAnalyzeMode(User u) DO 
        refreshExplainAnalyzeMode(u);
    FOR loggerDebugEnabled(User u) DO 
        refreshLoggerDebugEnabled(u);
    FOR explainTemporaryTablesEnabled(User u) DO 
        refreshExplainTemporaryTablesEnabled(u);
    FOR remoteLoggerDebugEnabled(User u) DO 
        refreshRemoteLoggerDebugEnabled(u);
    FOR remoteExLogEnabled(User u) DO 
        refreshExLogEnabled(u);
    FOR remotePausableLogEnabled(User u) DO 
        refreshPausableLogEnabled(u);
    FOR explainAppEnabled(User u) DO
        refreshExplainAllocationEnabled(u);
}

// client logs

fileUserLogs = DATA FILE (Connection);
userLogs ()  INTERNAL  'lsfusion.server.physics.admin.monitor.action.UserLogsAction' ();
requestUserLogs '{system.events.request.user.logs.custom.user}' (CustomUser user)  {
    IF hasConnectedConnections(user) THEN { 
        FOR user(Connection conn) == user AND connectionStatus(conn) == ConnectionStatus.connectedConnection DO {
            NEWSESSION { fileUserLogs(conn) <- NULL; apply(); } 
            NEWSESSION NEWTHREAD userLogs(); CONNECTION conn;
        }
    } ELSE {
        MESSAGE '{system.events.user.not.connected}';
    }
}
openUserLogs '{system.events.open.user.logs.custom.user}' (CustomUser user)  { 
    IF hasConnectedConnections(user) THEN {
        FOR user(Connection conn) == user AND connectionStatus(conn) == ConnectionStatus.connectedConnection AND fileUserLogs(conn) DO {
            open(fileUserLogs(conn), userLogin(conn) + '-log');
        } ELSE {
            MESSAGE '{system.events.open.user.logs.message}';
        }
    } ELSE {
        MESSAGE '{system.events.user.not.connected}';
    }
}

fileThreadDump = DATA FILE (Connection);
threadDump ()  INTERNAL  'lsfusion.server.physics.admin.monitor.action.ThreadDumpAction' ();
requestThreadDump '{system.events.request.thread.dump.custom.user}' (CustomUser user)  { 
    FOR user(Connection conn) == user AND connectionStatus(conn) == ConnectionStatus.connectedConnection DO {
        NEWSESSION { fileThreadDump(conn) <- NULL; apply(); } 
        NEWSESSION NEWTHREAD threadDump(); CONNECTION conn;
    }
}
openThreadDump '{system.events.open.thread.dump.custom.user}' (CustomUser user)  { 
    IF hasConnectedConnections(user) THEN {
        FOR user(Connection conn) == user AND connectionStatus(conn) == ConnectionStatus.connectedConnection AND fileThreadDump(conn) DO {
            open(fileThreadDump(conn), userLogin(conn) + '-dump');
        } ELSE {
            MESSAGE '{system.events.open.thread.dump.message}';
        }
    }
}

EXTEND FORM settings
    OBJECTS ul = User
    PROPERTIES(ul) READONLY name, login, userRoles
    PROPERTIES(ul) explainAnalyzeMode, explainAppEnabled, loggerDebugEnabled, explainTemporaryTablesEnabled, remoteLoggerDebugEnabled, remoteExLogEnabled, remotePausableLogEnabled
    PROPERTIES(ul) GRID requestUserLogs, openUserLogs, requestThreadDump, openThreadDump
;

DESIGN settings {
    tabs {
        MOVE BOX(ul) {
            caption = '{service.settings.logging}';
        } 
    }
}

// runtime settings for user

CLASS TypeExecEnv {
    materialize '{service.type.exec.env.materialize}', 
    disablenestloop '{service.type.exec.env.disablenestloop}', 
    none '{service.type.exec.env.none}'
}
TABLE typeExecEnv(TypeExecEnv);

captionExecEnv '{service.caption.exec.env}' (Object type) = staticCaption (type);
id (TypeExecEnv type) = CASE EXCLUSIVE
                        WHEN type == TypeExecEnv.materialize THEN 2
                        WHEN type == TypeExecEnv.disablenestloop THEN 1
                        WHEN type == TypeExecEnv.none THEN 0 IN base;

setExecEnv '{service.set.exec.env}'  INTERNAL  'lsfusion.server.physics.admin.service.action.SetExecEnvUserAction' (INTEGER, User);
execEnv '{service.exec.env.user}' = DATA TypeExecEnv (User);
refreshExecEnv '{service.refresh.exec.env.user}'(User user)  { 
    setExecEnv(id(execEnv(user)), user);  
}
WHEN CHANGED(execEnv(User user)) DO {
    refreshExecEnv(user);
}
nameExecEnv '{service.exec.env.user}' (User user) = captionExecEnv(execEnv(user)) IN base;

setVolatileStatsEnabled '{service.set.volatile.stats.enabled}'  INTERNAL  'lsfusion.server.physics.admin.service.action.SetVolatileStatsEnabledUserAction' (BOOLEAN, User);
volatileStatsEnabled '{service.volatile.stats.enabled}' = DATA BOOLEAN (User);
refreshVolatileStatsEnabled ''(User user)  { 
    setVolatileStatsEnabled(volatileStatsEnabled(user), user);
}
WHEN CHANGED(volatileStatsEnabled(User user)) DO {
    refreshVolatileStatsEnabled(user);
}

onStarted() + { 
    FOR volatileStatsEnabled(User u) DO 
        refreshVolatileStatsEnabled(u);
    FOR execEnv(User u) DO 
        refreshExecEnv(u);
} 

useBusyDialogCustom '{service.use.busy.dialog.user}' = DATA BOOLEAN (CustomUser);

allowExcessAllocatedBytes '{service.allow.excess.allocated.bytes.user}' = DATA BOOLEAN (CustomUser);

useRequestTimeout '{service.use.request.timeout.user}' = DATA BOOLEAN (CustomUser);

devMode '{service.dev.mode.user}' = DATA BOOLEAN (CustomUser); // for debug purposes

transactTimeout '{service.transact.timeout}' (User user) = DATA INTEGER (CustomUser);

turnCacheStatsOff '{service.turn.cache.stats.off}'  INTERNAL  'lsfusion.server.physics.admin.service.action.TurnCacheStatsOffAction' ();

EXTEND FORM settings
    PROPERTIES() turnCacheStatsOff
    OBJECTS u = User
    PROPERTIES(u) READONLY name, login, userRoles
    PROPERTIES(u) nameExecEnv, volatileStatsEnabled
    PROPERTIES(u) GRID useBusyDialogCustom, useRequestTimeout, devMode, allowExcessAllocatedBytes, transactTimeout
;

DESIGN settings {
    tabs {
        NEW execution {
            caption = '{service.settings.runtime}';
            MOVE PROPERTY(turnCacheStatsOff());
            MOVE BOX(u);
        }
    }
}

// GUI for user

selectedRowBackgroundColor '{service.selected.row.background.color}' = DATA COLOR (User);
selectedCellBackgroundColor '{service.selected.cell.background.color}' = DATA COLOR (User);
focusedCellBackgroundColor '{service.focused.cell.background.color}' = DATA COLOR (User);
focusedCellBorderColor '{service.focused.cell.border.color}' = DATA COLOR (User);
overrideFocusedCellBorderColor '{service.focused.cell.border.color}' = OVERRIDE focusedCellBorderColor(currentUser()), focusedCellBorderColor();
tableGridColor '{service.table.grid.color}' = DATA COLOR (User);
overrideTableGridColor '{service.table.grid.color}' = OVERRIDE tableGridColor(currentUser()), tableGridColor();  

resetWindowsLayout '{service.reset.windows.layout}' INTERNAL 'lsfusion.server.logics.navigator.ResetWindowsLayoutAction';

EXTEND FORM settings
    PROPERTIES() storeNavigatorSettingsForComputer
    PROPERTIES() READONLY captionServerTheme, captionServerSize, captionServerNavbar, serverNavigatorPinMode 

    OBJECTS de = DesignEnv
    PROPERTIES(de) name READONLY,
        captionTheme, captionSize, captionNavbar, useClientNavigatorPinMode, 
        navigatorPinMode READONLYIF NOT useClientNavigatorPinMode(de), colorThemeName
    FILTERS IF storeNavigatorSettingsForComputer() THEN de IS Computer ELSE de IS CustomUser

    PROPERTIES() selectedRowBackgroundColor, selectedCellBackgroundColor, focusedCellBackgroundColor, focusedCellBorderColor,
        tableGridColor
    
    OBJECTS uc = CustomUser
    PROPERTIES(uc) READONLY name, login, userRoles
    PROPERTIES(uc) fontSize, selectedRowBackgroundColor, selectedCellBackgroundColor, focusedCellBackgroundColor,
        focusedCellBorderColor, tableGridColor
;

DESIGN settings {
    tabs {
        NEW designPane {
            caption = '{service.form.settings.caption.design}';
            tabbed = TRUE;
            NEW navigator {
                caption = '{service.form.settings.caption.navigator}';
                MOVE PROPERTY(storeNavigatorSettingsForComputer());
                MOVE PROPERTY (captionServerTheme());
                MOVE PROPERTY (captionServerSize());
                MOVE PROPERTY (captionServerNavbar());
                MOVE PROPERTY (serverNavigatorPinMode());
                MOVE BOX(de) {
                    caption = IF storeNavigatorSettingsForComputer() THEN '{authentication.computers}' ELSE '{authentication.users}';
                }
            }
            NEW colors {
                caption = '{service.form.settings.caption.colors}';
                NEW colorsHeaderPane {
                    horizontal = TRUE;
                    NEW defaultColors {
                        lines = 2;
                        caption = '{service.form.settings.caption.default.colors}';
                        MOVE PROPERTY(selectedRowBackgroundColor());
                        MOVE PROPERTY(selectedCellBackgroundColor());
                        MOVE PROPERTY(focusedCellBackgroundColor());
                        MOVE PROPERTY(focusedCellBorderColor());
                        MOVE PROPERTY(tableGridColor());
                    }
                    NEW generalColors {
                        caption = '{service.form.settings.caption.general.colors}';
                        MOVE PROPERTY(defaultBackgroundColor());
                        MOVE PROPERTY(defaultForegroundColor());
                    }
                }
                MOVE BOX(uc);
            }
        }
    }
}

EXTEND FORM editProfile
    PROPERTIES()  resetWindowsLayout
    PROPERTIES(u) fontSize, colorThemeName,
                  selectedRowBackgroundColor, selectedCellBackgroundColor, focusedCellBackgroundColor, focusedCellBorderColor, 
                  tableGridColor, dontShowCloseButtonOnInactiveTab, userFiltersManualApplyMode
    OBJECTS r = DateTimePickerRanges
    PROPERTIES dateTimeRange(r) READONLY, isDateTimeRangeSelected(r, u)
    
    OBJECTS ir = DateTimeIntervalPickerRanges
    PROPERTIES intervalRange(ir) READONLY, isIntervalRangeSelected(ir, u)
;

DESIGN editProfile {
    OBJECTS {
        NEW design {
            caption = '{navigator.account.edit.profile.design}';
            
            MOVE PROPERTY(fontSize(u)) { fontSize = 24; }
            MOVE PROPERTY(colorThemeName(u)) { fontSize = 24; }
            
            MOVE PROPERTY(resetWindowsLayout());
            
            NEW colors {
                lines = 2;
                MOVE PROPERTY(selectedRowBackgroundColor(u)) { fontSize = 24; }
                MOVE PROPERTY(selectedCellBackgroundColor(u)) { fontSize = 24; }
                MOVE PROPERTY(focusedCellBackgroundColor(u)) { fontSize = 24; }
                MOVE PROPERTY(focusedCellBorderColor(u)) { fontSize = 24; }
                MOVE PROPERTY(tableGridColor(u)) { fontSize = 24; }
            }
            NEW closeButton {
                MOVE PROPERTY(dontShowCloseButtonOnInactiveTab(u));
                MOVE PROPERTY(userFiltersManualApplyMode(u));
            }
            NEW predefinedRanges {
                horizontal = TRUE;
                MOVE BOX(r);
                MOVE BOX(ir);   
                REMOVE TOOLBARSYSTEM(r);
                REMOVE TOOLBARSYSTEM(ir);
            }
        }
    }
}

inTestMode = NATIVE BOOLEAN ();
projectLSFDir = NATIVE STRING();

getClientSettings(User user) ABSTRACT CASE;
getClientSettings(User user) + WHEN TRUE AND user IS User THEN {
    LOCAL webClientLoadedResources = RAWFILE(STRING);
    LOCAL webClientLoadedResourcesOrder = INTEGER(STRING);
    IF isWeb() THEN {
        onWebClientInit();
        FOR INTEGER order = onWebClientInit(STRING s) ORDER order DO {
            readResource(s);
            webClientLoadedResources(resourcePath()) <- RAWFILE (resource());
            webClientLoadedResourcesOrder(resourcePath()) <- order;
        }
    }
    
    LOCAL colorThemeStaticName = STRING();
    colorThemeStaticName() <- staticName(colorTheme(currentDesignEnv()));
    
    EXPORT JSON FROM
        currentUserName = (OVERRIDE currentUserName(), '(без имени)'),
        fontSize = fontSize(user),
        useBusyDialog = (valueSettingBoolean('busyDialog') OR inTestMode() OR useBusyDialogCustom(user)),
        useRequestTimeout = (valueSettingBoolean('useRequestTimeout') OR useRequestTimeout(user)),
        forbidDuplicateForms = (OVERRIDE dataForbidDuplicateForms(user), abstractForbidDuplicateForms(user), GROUP MAX forbidDuplicateForms(UserRole ur) IF has(user, ur)),
        autoReconnectOnConnectionLost = (GROUP MAX autoReconnectOnConnectionLost(UserRole ur) IF has(user, ur)),
        showDetailedInfo = (GROUP MAX showDetailedInfo(UserRole ur) IF has(user, ur)),
        showDetailedInfoDelay = valueSetting('tooltipDelay'),
        suppressOnFocusChange = IF suppressOnFocusChange(user) THEN (IF suppressOnFocusChange(user) == TTRUE THEN TRUE ELSE NULL) ELSE valueSettingBoolean('suppressOnFocusChange'),
        contentWordWrap = IF contentWordWrap(user) THEN (IF contentWordWrap(user) == TTRUE THEN TRUE ELSE NULL) ELSE valueSettingBoolean('contentWordWrap'),
        devMode = inDevMode() OR (devMode(user)),
        projectLSFDir = projectLSFDir(),
        colorThemeString = IF (colorThemeStaticName()) THEN substrFrom(colorThemeStaticName(), strpos(colorThemeStaticName(), '.') + 1),
        useBootstrap = useBootstrap(),
        selectedRowBackground = (OVERRIDE selectedRowBackgroundColor(user), selectedRowBackgroundColor()),
        selectedCellBackground = (OVERRIDE selectedCellBackgroundColor(user), selectedCellBackgroundColor()),
        focusedCellBackground = (OVERRIDE focusedCellBackgroundColor(user), focusedCellBackgroundColor()),
        focusedCellBorder = (OVERRIDE focusedCellBorderColor(user), focusedCellBorderColor()),
        tableGridColor = overrideTableGridColor(),
        dateTimePickerRanges = JSON FROM range = getWord(staticName(DateTimePickerRanges r), '.', 2) WHERE isDateTimeRangeSelected(r, user),
        intervalPickerRanges = JSON FROM range = getWord(staticName(DateTimeIntervalPickerRanges ir), '.', 2) WHERE isIntervalRangeSelected(ir, user),
        mainResourcesBeforeSystem =(JSON FROM key = STRING s, value = webClientLoadedResources(s) WHERE webClientLoadedResourcesOrder(s) < 0 ORDER webClientLoadedResourcesOrder(s)),
        mainResourcesAfterSystem = (JSON FROM key = STRING s, value = webClientLoadedResources(s) WHERE webClientLoadedResourcesOrder(s) >= 0 ORDER webClientLoadedResourcesOrder(s)),
        language = language(user),
        country = country(user),
        timeZone = timeZone(user),
        twoDigitYearStart = twoDigitYearStart(user),
        dateFormat = dateFormat(user),
        timeFormat = timeFormat(user),
        busyDialogTimeout = valueSetting('busyDialogTimeout'),
        showNotDefinedStrings = valueSettingBoolean('showNotDefinedStrings'),
        pivotOnlySelectedColumn = valueSettingBoolean('pivotOnlySelectedColumn'),
        matchSearchSeparator = valueSetting('matchSearchSeparator'),
        useTextAsFilterSeparator = valueSettingBoolean('useTextAsFilterSeparator'),
        userFiltersManualApplyMode = IF userFiltersManualApplyMode() THEN (IF userFiltersManualApplyMode() == TTRUE THEN TRUE ELSE NULL) ELSE valueSettingBoolean('userFiltersManualApplyMode'),
        maxRequestQueueSize = valueSetting('maxRequestQueueSize'),
        verticalNavbar = verticalNavbar(),
        navigatorPinMode = navigatorPinMode();
}

getClientSettings() {
    getClientSettings(currentUser());
} @@noauth;

//Temporary. For migration. Can be deleted later. Need to fill in fields for existing users
migratedRanges = DATA BOOLEAN();
onStarted() + {
    IF NOT migratedRanges() THEN {
        FOR CustomUser cu IF cu IS CustomUser DO {
            setDefaultRanges(cu);
        }
        migratedRanges() <- TRUE;
    }
}

EXTEND FORM customUser
    PROPERTIES(u) fontSize, colorThemeName, selectedRowBackgroundColor, selectedCellBackgroundColor, 
        focusedCellBackgroundColor, focusedCellBorderColor, tableGridColor, dontShowCloseButtonOnInactiveTab, userFiltersManualApplyMode
;

DESIGN customUser {
    header {
        NEW design AFTER security {
            caption = '{navigator.account.edit.profile.design}';
            MOVE PROPERTY(fontSize(u));
            MOVE PROPERTY(colorThemeName(u));
            NEW colors { 
                MOVE PROPERTY(selectedRowBackgroundColor(u));
                MOVE PROPERTY(selectedCellBackgroundColor(u));
                MOVE PROPERTY(focusedCellBackgroundColor(u));
                MOVE PROPERTY(focusedCellBorderColor(u));
                MOVE PROPERTY(tableGridColor(u));
            }
            NEW closeButton {
                MOVE PROPERTY(dontShowCloseButtonOnInactiveTab(u));
                MOVE PROPERTY(userFiltersManualApplyMode(u));
            }
        }
    }
} 
