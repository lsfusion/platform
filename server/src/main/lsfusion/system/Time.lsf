MODULE Time;

REQUIRE System;

currentDateTime '{logics.date.current.datetime}' = FORMULA DATETIME PG 'DATE_TRUNC(\'second\', LOCALTIMESTAMP)', MS 'DATEADD(second, DATEDIFF(second, 0, GETDATE()), 0)';
currentDateTime '{logics.date.current.datetime}' (INTEGER millisLength) = FORMULA DATETIME PG 'LOCALTIMESTAMP($1)';
currentDateTimeMillis = FORMULA DATETIME PG 'DATE_TRUNC(\'milliseconds\', LOCALTIMESTAMP)', MS 'DATEADD(millisecond, DATEDIFF(millisecond, 0, GETDATE()), 0)';
currentZDateTime '{logics.date.current.datetime}' = FORMULA ZDATETIME PG 'DATE_TRUNC(\'second\', CURRENT_TIMESTAMP)', MS 'GETDATE()';
currentZDateTime '{logics.date.current.datetime}' (INTEGER millisLength) = FORMULA ZDATETIME PG 'CURRENT_TIMESTAMP($1)';

toDate(DATETIME dateTime) = DATE(dateTime AS DATETIME);
toTime(DATETIME dateTime) = TIME(dateTime AS DATETIME);
toDateTime(DATE date) = DATETIME(date AS DATE);
toZDateTime(DATE date) = ZDATETIME(date AS DATE);

toDateTime(LONG millis) = FORMULA DATETIME PG 'to_timestamp(CAST($1 AS NUMERIC),\'UTC\')::timestamp';
toZDateTime(LONG millis) = FORMULA ZDATETIME PG 'to_timestamp(CAST($1 AS NUMERIC))';

currentTime '{time.current.time}' = toTime(currentDateTime());
currentTime '{time.current.time}' (INTEGER millisLength) = FORMULA TIME PG 'LOCALTIME($1)';

extractHour = FORMULA INTEGER PG '(extract(hour from ($1)))', MS 'datepart(hh, $1)'; 
extractMinute = FORMULA INTEGER PG '(extract(minute from ($1)))', MS 'datepart(mi, $1)';
extractSecond = FORMULA INTEGER PG '(extract(second from ($1)))', MS 'datepart(ss, $1)';

currentHour = extractHour(currentTime()); 
currentMinute = extractMinute(currentTime());
currentSecond = extractSecond(currentTime());

currentDate '{time.current.date}' = DATA DATE () PREREAD; // actually it is a snapshot, but since it's okay to change it once a day, we'll make no difference between current and snapshot
currentDateTimeSnapshot '{logics.date.current.datetime.snapshot}' = DATA DATETIME ();
currentZDateTimeSnapshot '{logics.date.current.datetime.snapshot}' = DATA ZDATETIME ();

extractYear = FORMULA INTEGER PG '(extract(year from ($1)))', MS 'datepart(yy, $1)';
extractMonthNumber = FORMULA INTEGER PG '(extract(month from ($1)))', MS 'datepart(mm, $1)';
extractDay = FORMULA INTEGER PG '(extract(day from ($1)))', MS 'datepart(dd, $1)';
extractDOY = FORMULA INTEGER PG '(extract(doy from ($1)))', MS 'datepart(dy, $1)';

currentDay = extractDay(currentDate());
currentMonth  = extractMonthNumber(currentDate());
currentYear = extractYear(currentDate());
dateDiffersCurrent(DATE date) = date IS DATE AND date != currentDate();

currentTimeText() =  [FORMULA TEXT 'to_char(now(),($1))']('YYYYMMDDHH24MISSMS'); 

toDateFormat = FORMULA DATE 'to_date($1,$2)';
toDateTimeFormat = FORMULA DATETIME PG 'to_timestamp($1,$2)';

toDateISO = FORMULA STRING[10] 'to_char(($1),\'YYYY-MM-DD\')';

toDateDDMMYY = FORMULA STRING[8] 'to_char(($1),\'DD.MM.YY\')';
toDateDDMMYYYY = FORMULA STRING[10] 'to_char(($1),\'DD.MM.YYYY\')';

sum(DATE date, INTEGER days) = [ FORMULA DATE PG '(($1)+($2))', MS 'DATEADD(dd, $2, $1)'](date AS DATE, days AS INTEGER);
sumMonth (date, months) = FORMULA DATE PG 'CAST((CAST(($1) AS date) + ($2)*(interval \'1 month\')) AS date)', MS 'DATEADD(mm, $2, $1)';
sumYear (date, months) = FORMULA DATE PG 'CAST((CAST(($1) AS date) + ($2)*(interval \'1 year\')) AS date)', MS 'DATEADD(yy, $2, $1)';

iterate(DATE dt, DATE from, DATE to) = RECURSION dt==from AND from IS DATE AND to IS DATE STEP dt==sum($dt, 1) AND dt<=to CYCLES IMPOSSIBLE;

firstDayOfMonth (DATE date) = [ FORMULA DATE PG '(date_trunc(\'MONTH\', $1)::date)', MS 'DATEADD(month, DATEDIFF(month, 0, $1), 0)'](date AS DATE);
lastDayOfMonth (DATE date) = [ FORMULA DATE PG '((date_trunc(\'MONTH\', $1) + INTERVAL \'1 MONTH - 1 day\')::date)', MS 'DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,$1)+1,0))'](date AS DATE);

subtract(DATE date, LONG days) = [ FORMULA DATE PG '(($1)-($2))', MS 'DATEADD(dd, -($2), $1)'](date AS DATE, days AS LONG);

sumSeconds(TIME time, LONG secs) = [ FORMULA TIME PG '(($1)+($2)*CAST(\'1 seconds\' AS INTERVAL))', MS 'DATEADD(ss, $2, $1)'](time AS TIME, secs AS LONG);
sumMinutes(TIME time, LONG mins) = [ FORMULA TIME PG '(($1)+($2)*CAST(\'1 minutes\' AS INTERVAL))', MS 'DATEADD(mm, $2, $1)'](time AS TIME, mins AS LONG);

sumDay(DATETIME dateTime, LONG days) = [ FORMULA DATETIME PG '(($1)+($2)*CAST(\'1 days\' AS INTERVAL))', MS 'DATEADD(dd, $2, $1)'](dateTime AS DATETIME, days AS LONG);
subtractDay(DATETIME dateTime, LONG days) = [ FORMULA DATETIME PG '(($1)-($2)*CAST(\'1 days\' AS INTERVAL))', MS 'DATEADD(dd, -($2), $1)'](dateTime AS DATETIME, days AS LONG);
sumMinutes(DATETIME dateTime, LONG mins) = [ FORMULA DATETIME PG '(($1)+($2)*CAST(\'1 minutes\' AS INTERVAL))', MS 'DATEADD(mm, $2, $1)'](dateTime AS DATETIME, mins AS LONG);
sumSeconds(DATETIME dateTime, LONG secs) = [ FORMULA DATETIME PG '(($1)+($2)*CAST(\'1 seconds\' AS INTERVAL))', MS 'DATEADD(ss, $2, $1)'](dateTime AS DATETIME, secs AS LONG);
subtractSeconds(DATETIME dateTime, LONG secs) = [ FORMULA DATETIME PG '(($1)-($2)*CAST(\'1 seconds\' AS INTERVAL))', MS 'DATEADD(ss, -($2), $1)'](dateTime AS DATETIME, secs AS LONG);
subtractSeconds(DATETIME dateTimeFrom, DATETIME dateTimeTo) = [ FORMULA INTEGER PG 'extract (\'epoch\' from (($1)-($2)))', MS 'DATEDIFF(s, $2, $1)'](dateTimeTo AS DATETIME, dateTimeFrom AS DATETIME);

getMilliSeconds(ZDATETIME dateTime) = [ FORMULA LONG PG 'extract (\'epoch\' from ($1)) * 1000'](dateTime AS ZDATETIME);
getSeconds(ZDATETIME dateTime) = getMilliSeconds(dateTime) / 1000;

resultMilliseconds '{utils.result.milliseconds}' = DATA LOCAL LONG();
toMilliseconds '{utils.to.milliseconds}' INTERNAL 'lsfusion.server.logics.classes.data.utils.time.ToMillisecondsAction' (DATETIME);

sumDay(ZDATETIME dateTime, LONG days) = [ FORMULA ZDATETIME PG '(($1)+($2)*CAST(\'1 days\' AS INTERVAL))', MS 'DATEADD(dd, $2, $1)'](dateTime AS ZDATETIME, days AS LONG);
subtractDay(ZDATETIME dateTime, LONG days) = [ FORMULA ZDATETIME PG '(($1)-($2)*CAST(\'1 days\' AS INTERVAL))', MS 'DATEADD(dd, -($2), $1)'](dateTime AS ZDATETIME, days AS LONG);
sumMinutes(ZDATETIME dateTime, LONG mins) = [ FORMULA ZDATETIME PG '(($1)+($2)*CAST(\'1 minutes\' AS INTERVAL))', MS 'DATEADD(mm, $2, $1)'](dateTime AS ZDATETIME, mins AS LONG);
sumSeconds(ZDATETIME dateTime, LONG secs) = [ FORMULA ZDATETIME PG '(($1)+($2)*CAST(\'1 seconds\' AS INTERVAL))', MS 'DATEADD(ss, $2, $1)'](dateTime AS ZDATETIME, secs AS LONG);
subtractSeconds(ZDATETIME dateTime, LONG secs) = [ FORMULA ZDATETIME PG '(($1)-($2)*CAST(\'1 seconds\' AS INTERVAL))', MS 'DATEADD(ss, -($2), $1)'](dateTime AS ZDATETIME, secs AS LONG);
subtractSeconds(ZDATETIME dateTimeFrom, ZDATETIME dateTimeTo) = [ FORMULA INTEGER PG 'extract (\'epoch\' from (($1)-($2)))', MS 'DATEDIFF(s, $2, $1)'](dateTimeTo AS ZDATETIME, dateTimeFrom AS ZDATETIME);

dateTimeToDateTime = FORMULA DATETIME PG 'to_timestamp(CAST($1 as char(10)) || CAST($2 as char(12)), \'YYYY-MM-DDHH24:MI:SS.MS\')::timestamp',
                                      MS 'CAST($1 AS DATETIME) + CAST($2 AS DATETIME)';

secondsBetweenDates(DATETIME dateTo, DATETIME dateFrom) = [ FORMULA INTEGER PG '(extract(epoch from ($1)) - extract(epoch from ($2)))', MS 'DATEDIFF(ss, $2, $1)'](dateTo AS DATETIME, dateFrom AS DATETIME);
daysBetweenDates(DATE dateFrom, DATE dateTo) = [ FORMULA INTEGER PG '(($1)-($2))', MS 'DATEDIFF(dd, $2, $1)'](dateFrom AS DATE, dateTo AS DATE);
daysInclBetweenDates (DATE date1, DATE date2) = daysBetweenDates(date2, date1) + 1;

sumWeekFrom (DATE date, INTEGER int) = sum(date, int * 7) IF date IS DATE AND int IS INTEGER;
sumWeekTo (DATE date, INTEGER int) = sum(date, int * 7 + 6) IF date IS DATE AND int IS INTEGER;

//because to_timestamp() takes unix times in seconds we need to divide by 1000
//because in db we store intervals as numeric we must cast result of merging two dates(times / dateTimes / zDateTimes) to numeric to avoid errors when sorting or filtering
// datetime interval
interval(DATETIME dateTimeFrom, DATETIME dateTimeTo) = [FORMULA INTERVAL[DATETIME] PG '(EXTRACT (EPOCH FROM $1) * 1000  || \'.\' || EXTRACT (EPOCH FROM $2) * 1000)::numeric'](dateTimeFrom AS DATETIME, dateTimeTo AS DATETIME);
from(INTERVAL[DATETIME] dateTimeInterval) = [FORMULA DATETIME PG 'to_timestamp((trunc ($1::NUMERIC)) / 1000) AT TIME ZONE \'UTC\''](dateTimeInterval AS INTERVAL[DATETIME]);
to(INTERVAL[DATETIME] dateTimeInterval) = [FORMULA DATETIME PG 'to_timestamp((SPLIT_PART($1::TEXT, \'.\', 2)::NUMERIC) / 1000) AT TIME ZONE \'UTC\''](dateTimeInterval AS INTERVAL[DATETIME]);

// date interval 
interval(DATE dateFrom, DATE dateTo) = [FORMULA INTERVAL[DATE] PG '(EXTRACT (EPOCH FROM $1) * 1000  || \'.\' || EXTRACT (EPOCH FROM $2) * 1000)::numeric'](dateFrom AS DATE, dateTo AS DATE);
from(INTERVAL[DATE] dateInterval) = [FORMULA DATE PG '(to_timestamp((trunc ($1::NUMERIC)) / 1000) AT TIME ZONE \'UTC\')::date'](dateInterval AS INTERVAL[DATE]);
to(INTERVAL[DATE] dateInterval) = [FORMULA DATE PG '(to_timestamp((SPLIT_PART($1::TEXT, \'.\', 2)::NUMERIC) / 1000) AT TIME ZONE \'UTC\')::date'](dateInterval AS INTERVAL[DATE]);

iterate(DATE d, INTERVAL[DATE] i) = iterate(d, from(i), to(i));

// time interval
interval(TIME timeFrom, TIME timeTo) = [FORMULA INTERVAL[TIME] PG '(EXTRACT (EPOCH FROM $1) * 1000  || \'.\' || EXTRACT (EPOCH FROM $2) * 1000)::numeric'](timeFrom AS TIME, timeTo AS TIME);
from(INTERVAL[TIME] timeInterval) = [FORMULA TIME PG '(to_timestamp((trunc ($1::NUMERIC) / 1000)) AT TIME ZONE \'UTC\')::time'](timeInterval AS INTERVAL[TIME]);
to(INTERVAL[TIME] timeInterval) = [FORMULA TIME PG '(to_timestamp((SPLIT_PART($1::TEXT, \'.\', 2)::NUMERIC) / 1000) AT TIME ZONE \'UTC\')::time'](timeInterval AS INTERVAL[TIME]);

// zDatetime interval
interval(ZDATETIME zDateTimeFrom, ZDATETIME zDateTimeTo) = [FORMULA INTERVAL[ZDATETIME] PG '(EXTRACT (EPOCH FROM $1) * 1000  || \'.\' || EXTRACT (EPOCH FROM $2) * 1000)::numeric'](zDateTimeFrom AS ZDATETIME, zDateTimeTo AS ZDATETIME);
from(INTERVAL[ZDATETIME] zDateTimeInterval) = [FORMULA ZDATETIME PG 'to_timestamp((trunc ($1::NUMERIC)) / 1000)'](zDateTimeInterval AS INTERVAL[ZDATETIME]);
to(INTERVAL[ZDATETIME] zDateTimeInterval) = [FORMULA ZDATETIME PG 'to_timestamp((SPLIT_PART($1::TEXT, \'.\', 2)::NUMERIC) / 1000)'](zDateTimeInterval AS INTERVAL[ZDATETIME]);

// --------------------------------- Month ------------------------ //

CLASS Month '{time.month}' {
    january '{time.month.january}',
    february '{time.month.february}',
    march '{time.month.march}',
    april '{time.month.april}',
    may '{time.month.may}',
    june '{time.month.june}',
    july '{time.month.july}',
    august '{time.month.august}',
    september '{time.month.september}',
    october '{time.month.october}',
    november '{time.month.november}',
    december '{time.month.december}'
}

TABLE month (Month);

number '{time.number.month}' (Month m) = CASE EXCLUSIVE 
    WHEN m == Month.january THEN 1
    WHEN m == Month.february THEN 2
    WHEN m == Month.march THEN 3
    WHEN m == Month.april THEN 4
    WHEN m == Month.may THEN 5
    WHEN m == Month.june THEN 6
    WHEN m == Month.july THEN 7
    WHEN m == Month.august THEN 8
    WHEN m == Month.september THEN 9
    WHEN m == Month.october THEN 10
    WHEN m == Month.november THEN 11
    WHEN m == Month.december THEN 12
    MATERIALIZED;

name '{master.data.name}' (Month m) = staticCaption(m) IF m IS Month MATERIALIZED CHARWIDTH 10;

month '{time.month.number}' (number) = GROUP AGGR Month month BY number(month);

extractMonth '{time.extract.month}' (DATE date) = month(extractMonthNumber(date));
extractMonthName '{time.extract.month.name}' (DATE date) = name(extractMonth(date)) CHARWIDTH 12;

FORM months '{time.form.months}'
    OBJECTS m = Month
    PROPERTIES(m) READONLY name, number
    ORDERS number(m)
    LIST Month OBJECT m
;

// --------------------------------- Day of weeks ------------------------ //
CLASS DOW '{time.dow}' {
    sunday '{time.dow.sunday}',
    monday '{time.dow.monday}',
    tuesday '{time.dow.tuesday}',
    wednesday '{time.dow.wednesday}',
    thursday '{time.dow.thursday}',
    friday '{time.dow.friday}',
    saturday '{time.dow.saturday}'
}
TABLE dow (DOW);

number '{time.number.dow}' (DOW d) = CASE EXCLUSIVE
    WHEN d == DOW.sunday THEN 0 
    WHEN d == DOW.monday THEN 1 
    WHEN d == DOW.tuesday THEN 2 
    WHEN d == DOW.wednesday THEN 3 
    WHEN d == DOW.thursday THEN 4 
    WHEN d == DOW.friday THEN 5 
    WHEN d == DOW.saturday THEN 6
    MATERIALIZED;

numberM '{time.number.dow}' (DOW d) = CASE EXCLUSIVE 
    WHEN d == DOW.monday THEN 0 
    WHEN d == DOW.tuesday THEN 1 
    WHEN d == DOW.wednesday THEN 2 
    WHEN d == DOW.thursday THEN 3 
    WHEN d == DOW.friday THEN 4 
    WHEN d == DOW.saturday THEN 5 
    WHEN d == DOW.sunday THEN 6
    MATERIALIZED;

name '{master.data.name}' (DOW d) = staticCaption(d) IF d IS DOW MATERIALIZED CHARWIDTH 10;

FORM DOWs '{time.form.dows}'
    OBJECTS d = DOW
    PROPERTIES(d) READONLY name, numberM
    ORDERS numberM(d)
    LIST DOW OBJECT d
;

DOW '{time.dow.number}' (number) = GROUP AGGR DOW dow BY number(dow);

extractDOWNumber = [ FORMULA INTEGER PG '(extract(dow from ($1)))', MS '(DATEPART(dw, $1)-1)'](DATE date AS DATE);
extractDOW '{time.extract.dow}' (DATE date) = DOW(extractDOWNumber(date));
extractDOWName '{time.extract.dow.name}' (DATE date) = name(extractDOW(date)) CHARWIDTH 12;

distanceDOWDOW (DOW d1, DOW d2) = (number(d2) - number(d1)) + (IF number(d2) < number(d1) THEN 7 ELSE 0);     

// uses ISO 8601, where first week of the year contains January, 4th
extractWeek = FORMULA INTEGER PG '(extract(week from ($1)))', MS 'datepart(isoww, $1)'; 
// changes extractWeek return value for first days of the year    
extractWeekZeroBased(DATE date) = IF extractWeek(date) > 50 AND extractMonthNumber(date) == 1 THEN 0 ELSE extractWeek(date);

CLASS DateTimePickerRanges '{date.time.picker.range.predefined.date}' {
    rangeToday '{date.time.picker.range.today}',
    rangeYesterday '{date.time.picker.range.yesterday}',
    rangeSevenDaysAgo '{date.time.picker.range.seven.days.ago}',
    rangeThirtyDaysAgo '{date.time.picker.range.thirty.days.ago}',
    rangeMonthStart '{date.time.picker.range.month.start}',
    rangeMonthEnd '{date.time.picker.range.month.end}',
    rangePreviousMonthStart '{date.time.picker.range.previous.month.start}',
    rangePreviousMonthEnd '{date.time.picker.range.previous.month.end}',
    rangeThisYearStart '{date.time.picker.range.this.year.start}',
    rangeThisYearEnd '{date.time.picker.range.this.year.end}'
}

CLASS DateTimeIntervalPickerRanges '{date.time.picker.interval.range}' {
    rangeIntervalToday '{date.time.picker.range.today}',
    rangeIntervalYesterday '{date.time.picker.range.yesterday}',
    rangeLast7Days '{date.time.picker.range.last.seven.days}',
    rangeLast30Days '{date.time.picker.range.last.thirty.days}',
    rangeThisMonth '{date.time.picker.range.this.month}',
    rangeToMonthEnd '{date.time.picker.range.to.month.end}',
    rangePreviousMonth '{date.time.picker.range.previous.month}',
    rangeMonthStartToCurrentDate '{date.time.picker.range.month.start.to.current.date}',
    rangeThisYear '{date.time.picker.range.this.year}',
    rangeToYearEnd '{date.time.picker.range.to.year.end}'
}