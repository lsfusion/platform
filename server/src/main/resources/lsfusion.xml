<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
       default-lazy-init="true">

    <context:property-placeholder ignore-resource-not-found="true" location="classpath:lsfusion.properties,file:conf/settings.properties" system-properties-mode="OVERRIDE"/>

    <bean id="settings" class="lsfusion.server.physics.admin.Settings">
        <property name="properties">
            <map>
                <entry key="innerGroupExprs" value="${settings.innerGroupExprs:}"/>
                <entry key="packOnCacheComplexity" value="${settings.packOnCacheComplexity:}"/>
                <entry key="backwardCompatibilityVersion" value="${settings.backwardCompatibilityVersion:}"/>
                <entry key="LRUOftenCleanPeriod" value="${settings.LRUOftenCleanPeriod:}"/>
                <entry key="LRUOftenExpireSecond" value="${settings.LRUOftenExpireSecond:}"/>
                <entry key="LRUOftenProceedBucket" value="${settings.LRUOftenProceedBucket:}"/>
                <entry key="LRURareCleanPeriod" value="${settings.LRURareCleanPeriod:}"/>
                <entry key="LRURareExpireSecond" value="${settings.LRURareExpireSecond:}"/>
                <entry key="LRURareProceedBucket" value="${settings.LRURareProceedBucket:}"/>
                <entry key="cacheInnerHashes" value="${settings.cacheInnerHashes:}"/>
                <entry key="mapInnerMaxIterations" value="${settings.mapInnerMaxIterations:}"/>
                <entry key="enableApplySingleStored" value="${settings.enableApplySingleStored:}"/>
                <entry key="pushOrderWhere" value="${settings.pushOrderWhere:}"/>
                <entry key="splitSelectGroupInnerJoins" value="${settings.splitSelectGroupInnerJoins:}"/>
                <entry key="splitGroupStatInnerJoins" value="${settings.splitGroupStatInnerJoins:}"/>
                <entry key="useFJInsteadOfUnion" value="${settings.useFJInsteadOfUnion:}"/>
                <entry key="simpleCheckCompare" value="${settings.simpleCheckCompare:}"/>
                <entry key="editLogicalOnSingleClick" value="${settings.editLogicalOnSingleClick:}"/>
                <entry key="editActionOnSingleClick" value="${settings.editActionOnSingleClick:}"/>
                <entry key="checkFollowsWhenObjects" value="${settings.checkFollowsWhenObjects:}"/>
                <entry key="restructWhereOnMeans" value="${settings.restructWhereOnMeans:}"/>
                <entry key="splitGroupSelectExprcases" value="${settings.splitGroupSelectExprcases:}"/>
                <entry key="calculateGroupDataChanged" value="${settings.calculateGroupDataChanged:}"/>
                <entry key="noIncrementMaxGroupProperty" value="${settings.noIncrementMaxGroupProperty:}"/>
                <entry key="compileMeans" value="${settings.compileMeans:}"/>
                <entry key="freeConnections" value="${settings.freeConnections:}"/>
                <entry key="commonUnique" value="${settings.commonUnique:}"/>
                <entry key="disablePoolConnections" value="${settings.disablePoolConnections:}"/>
                <entry key="disablePoolPreparedStatements" value="${settings.disablePoolPreparedStatements:}"/>
                <entry key="disableWhenCalcDo" value="${settings.disableWhenCalcDo:}"/>
                <entry key="disablePrereadValues" value="${settings.disablePrereadValues:}"/>
                <entry key="disableSumGroupNotZero" value="${settings.disableSumGroupNotZero:}"/>
                <entry key="usedChangesCacheLimit" value="${settings.usedChangesCacheLimit:}"/>
                <entry key="splitIncrementApply" value="${settings.splitIncrementApply:}"/>
                <entry key="statDegree" value="${settings.statDegree:}"/>
                <entry key="barcodeLength" value="${settings.barcodeLength:}"/>
                <entry key="useSingleJoins" value="${settings.useSingleJoins:}"/>
                <entry key="useQueryExpr" value="${settings.useQueryExpr:}"/>
                <entry key="noExclusiveCompile" value="${settings.noExclusiveCompile:}"/>
                <entry key="limitWhereJoinsCount" value="${settings.limitWhereJoinsCount:}"/>
                <entry key="limitWhereJoinsComplexity" value="${settings.limitWhereJoinsComplexity:}"/>
                <entry key="limitClassWhereCount" value="${settings.limitClassWhereCount:}"/>
                <entry key="limitClassWhereComplexity" value="${settings.limitClassWhereComplexity:}"/>
                <entry key="limitWhereJoinPack" value="${settings.limitWhereJoinPack:}"/>
                <entry key="limitHintIncrementComplexity" value="${settings.limitHintIncrementComplexity:}"/>
                <entry key="limitHintIncrementValueComplexity" value="${settings.limitHintIncrementValueComplexity:}"/>
                <entry key="noApplyIncrement" value="${settings.noApplyIncrement:}"/>
                <entry key="limitApplyHintIncrementComplexity" value="${settings.limitApplyHintIncrementComplexity:}"/>
                <entry key="limitHintIncrementStat" value="${settings.limitHintIncrementStat:}"/>
                <entry key="limitApplyHintIncrementStat" value="${settings.limitApplyHintIncrementStat:}"/>
                <entry key="limitHintNoUpdateComplexity" value="${settings.limitHintNoUpdateComplexity:}"/>
                <entry key="limitWrapComplexity" value="${settings.limitWrapComplexity:}"/>
                <entry key="limitComplexityGrowthCoeff" value="${settings.limitComplexityGrowthCoeff:}"/>
                <entry key="limitExclusiveCount" value="${settings.limitExclusiveCount:}"/>
                <entry key="limitExclusiveSimpleCount" value="${settings.limitExclusiveSimpleCount:}"/>
                <entry key="limitExclusiveSimpleComplexity" value="${settings.limitExclusiveSimpleComplexity:}"/>
                <entry key="limitExclusiveComplexity" value="${settings.limitExclusiveComplexity:}"/>
                <entry key="limitMaterializeComplexity" value="${settings.limitMaterializeComplexity:}"/>
                <entry key="updateFormCountPeriod" value="${settings.updateFormCountPeriod:}"/>
                <entry key="autoAnalyzeTempStats" value="${settings.autoAnalyzeTempStats:}"/>
                <entry key="useGreaterEquals" value="${settings.useGreaterEquals:}"/>
                <entry key="disableAutoHints" value="${settings.disableAutoHints:}"/>
                <entry key="disableAutoHintCaches" value="${settings.disableAutoHintCaches:}"/>
                <entry key="disableWrapComplexity" value="${settings.disableWrapComplexity:}"/>
                <entry key="enablePrevWrapComplexity" value="${settings.enablePrevWrapComplexity:}"/>
                <entry key="groupJoinLevel" value="${settings.groupJoinLevel:}"/>
                <entry key="applyVolatileStats" value="${settings.applyVolatileStats:}"/>
                <entry key="useEventValuePrevHeuristic" value="${settings.useEventValuePrevHeuristic:}"/>
                <entry key="disableTabbedOptimization" value="${settings.disableTabbedOptimization:}"/>
                <entry key="checkUniqueEvent" value="${settings.checkUniqueEvent:}"/>
                <entry key="disableChangeModifierAllHints" value="${settings.disableChangeModifierAllHints:}"/>
                <entry key="disableValueAllHints" value="${settings.disableValueAllHints:}"/>
                <entry key="defaultOrdersNotNull" value="${settings.defaultOrdersNotNull:}"/>
                <entry key="commandLengthVolatileStats" value="${settings.commandLengthVolatileStats:}"/>
                <entry key="disableReadSingleValues" value="${settings.disableReadSingleValues:}"/>
                <entry key="reserveIDStep" value="${settings.reserveIDStep:}"/>
                <entry key="mergeUpClassSets" value="${settings.mergeUpClassSets:}"/>
                <entry key="queryPrepareLength" value="${settings.queryPrepareLength:}"/>
                <entry key="queryPrepareRunTime" value="${settings.queryPrepareRunTime:}"/>
                <entry key="disableSimpleAddRemoveInNonExclCase" value="${settings.disableSimpleAddRemoveInNonExclCase:}"/>
                <entry key="modifySessionTableInsteadOfRewrite" value="${settings.modifySessionTableInsteadOfRewrite:}"/>
                <entry key="checkAlwaysNull" value="${settings.checkAlwaysNull:}"/>
                <entry key="checkClassWhere" value="${settings.checkClassWhere:}"/>
                <entry key="dialogTransactionTimeout" value="${settings.dialogTransactionTimeout:}"/>
                <entry key="queryLengthTimeout" value="${settings.queryLengthTimeout:}"/>
                <entry key="queryRowCountPessLimit" value="${settings.queryRowCountPessLimit:}"/>
                <entry key="timeoutDegree" value="${settings.timeoutDegree:}"/>
                <entry key="timeoutStart" value="${settings.timeoutStart:}"/>
                <entry key="applyAutoAttemptCountLimit" value="${settings.applyAutoAttemptCountLimit:}"/>
                <entry key="useMaxDivisionLength" value="${settings.useMaxDivisionLength:}"/>
                <entry key="noTransSyncDB" value="${settings.noTransSyncDB:}"/>
                <entry key="useUserChangesSync" value="${settings.useUserChangesSync:}"/>
                <entry key="averageIntervalStat" value="${settings.averageIntervalStat:}"/>
                <entry key="startServerAnyWay" value="${settings.startServerAnyWay:}"/>
                <entry key="singleInstance" value="${jnlp.singleInstance:}"/>
                <entry key="busyDialog" value="${settings.busyDialog:}"/>
                <entry key="profilerBatchSize" value="${settings.profilerBatchSize:}"/>
                <entry key="enableAPI" value="${settings.enableAPI:}"/>
                <entry key="enableUI" value="${settings.enableUI:}"/>
                <entry key="excessThreadAllocatedBytes" value="${settings.excessThreadAllocatedBytes:}"/>
                <entry key="excessInterruptCount" value="${settings.excessInterruptCount:}"/>
                <entry key="tempTablesTimeThreshold" value="${settings.tempTablesTimeThreshold:}"/>
                <entry key="tempTablesCountThreshold" value="${settings.tempTablesCountThreshold:}"/>
                <entry key="queryRowCountOptDivider" value="${settings.queryRowCountOptDivider:}"/>
                <entry key="queryLengthLimit" value="${settings.queryLengthLimit:}"/>
                <entry key="remoteLogTime" value="${settings.remoteLogTime:}"/>
                <entry key="explainThreshold" value="${settings.explainThreshold:}"/>
                <entry key="explainJavaStack" value="${settings.explainJavaStack:}"/>
                <entry key="explainCompile" value="${settings.explainCompile:}"/>
                <entry key="conflictSleepThreshold" value="${settings.conflictSleepThreshold:}"/>
                <entry key="conflictSleepTimeDegree" value="${settings.conflictSleepTimeDegree:}"/>
                <entry key="deadLockThreshold" value="${settings.deadLockThreshold:}"/>
                <entry key="periodRestartConnections" value="${settings.periodRestartConnections:}"/>
                <entry key="percentRestartConnections" value="${settings.percentRestartConnections:}"/>
                <entry key="closeFormDelay" value="${settings.closeFormDelay:}"/>
                <entry key="constraintRowsLimit" value="${settings.constraintRowsLimit:}"/>
                <entry key="defaultCompareForStringContains" value="${settings.defaultCompareForStringContains:}"/>
                <entry key="useSavePointsThreshold" value="${settings.useSavePointsThreshold:}"/>
                <entry key="authTokenExpiration" value="${settings.authTokenExpiration:}"/>
                <entry key="connectTimeout" value="${settings.connectTimeout:}"/>
                <entry key="editBooleanOnSingleClick" value="${settings.editBooleanOnSingleClick:}"/>
                <entry key="editActionOnSingleClick" value="${settings.editActionOnSingleClick:}"/>
                <entry key="pivotOnlySelectedColumn" value="${settings.pivotOnlySelectedColumn:}"/>
                <entry key="filterMatchLanguage" value="${settings.filterMatchLanguage:}"/>
                <entry key="tsVectorDictionaryLanguage" value="${settings.tsVectorDictionaryLanguage:}"/>
                <entry key="verticalColumnsFiltersContainer" value="${settings.verticalColumnsFiltersContainer:}"/>
                <entry key="userFiltersManualApplyMode" value="${settings.userFiltersManualApplyMode:}"/>
                <entry key="defaultAutoImageRankingThreshold" value="${settings.defaultAutoImageRankingThreshold:}"/>
                <entry key="defaultNavigatorImageRankingThreshold" value="${settings.defaultNavigatorImageRankingThreshold:}"/>
                <entry key="defaultFormImageRankingThreshold" value="${settings.defaultFormImageRankingThreshold:}"/>
                <entry key="defaultContainerImageRankingThreshold" value="${settings.defaultContainerImageRankingThreshold:}"/>
                <entry key="defaultPropertyImageRankingThreshold" value="${settings.defaultPropertyImageRankingThreshold:}"/>
                <entry key="minInterfaceStatForValueUnique" value="${settings.minInterfaceStatForValueUnique:}"/>
                <entry key="maxInterfaceStatForValueList" value="${settings.maxInterfaceStatForValueList:}"/>
                <entry key="maxInterfaceStatForValueDropdown" value="${settings.maxInterfaceStatForValueDropdown:}"/>
                <entry key="maxLengthForValueButton" value="${settings.maxLengthForValueButton:}"/>
            </map>
        </property>
        </bean>

    <bean id="dataAdapter" class="lsfusion.server.data.sql.adapter.PostgreDataAdapter">
        <constructor-arg value="${db.name:lsfusion}"/>
        <constructor-arg value="${db.server:localhost}"/>
        <constructor-arg value="${db.user:postgres}"/>
        <constructor-arg value="${db.password:}"/>
        <constructor-arg value="${db.connectTimeout:1000}"/>
        <constructor-arg value="${backup.binPath:}"/>
        <constructor-arg value="${backup.dumpDir:}"/>
    </bean>

    <!--<bean id="dataAdapter" class="lsfusion.server.data.sql.MSSQLDataAdapter">-->
        <!--<constructor-arg value="${db.name}"/>-->
        <!--<constructor-arg value="${db.server}"/>-->
        <!--<constructor-arg value="${db.user}"/>-->
        <!--<constructor-arg value="${db.password}"/>-->
        <!--<constructor-arg value="${db.instance}"/>-->
    <!--</bean>-->

    <!--<bean id="dataAdapter" class="lsfusion.server.data.sql.OracleDataAdapter">-->
        <!--<constructor-arg value="${db.name}"/>-->
        <!--<constructor-arg value="${db.server}"/>-->
        <!--<constructor-arg value="${db.user}"/>-->
        <!--<constructor-arg value="${db.password}"/>-->
        <!--<constructor-arg value="${db.instance}"/>-->
    <!--</bean>-->


    <bean id="dbManager" class="lsfusion.server.physics.exec.db.controller.manager.DBManager">
        <property name="adapter" ref="dataAdapter"/>
        <property name="businessLogics" ref="businessLogics"/>
        <property name="restartManager" ref="restartManager"/>
        <property name="denyDropModules" value="${db.denyDropModules:false}"/>
        <property name="denyDropTables" value="${db.denyDropTables:false}"/>
        <property name="dbNamingPolicy" value="${db.namingPolicy:lsfusion.server.physics.dev.id.name.FullDBNamingPolicy}"/>
        <property name="dbMaxIdLength" value="${db.maxIdLength:63}"/>
        <property name="defaultUserLanguage" value="${user.defaultLanguage:#{null}}"/>
        <property name="defaultUserCountry" value="${user.defaultCountry:#{null}}"/>
        <property name="defaultUserTimezone" value="${user.defaultTimezone:#{null}}"/>
        <property name="defaultUserTwoDigitYearStart" value="${user.defaultTwoDigitYearStart:#{null}}"/>
        <property name="defaultUserDateFormat" value="${user.defaultDateFormat:#{null}}"/>
        <property name="defaultUserTimeFormat" value="${user.defaultTimeFormat:#{null}}"/>

        <property name="initTask" ref="initDBTask"/>
    </bean>

    <bean id="reflectionManager" class="lsfusion.server.physics.admin.reflection.controller.manager.ReflectionManager">
        <property name="businessLogics" ref="businessLogics"/>
        <property name="dbManager" ref="dbManager"/>
        
        <property name="initTask" ref="initReflectionTask"/>
    </bean>

    <bean id="restartManager" class="lsfusion.server.logics.controller.manager.RestartManager">
        <property name="businessLogics" ref="businessLogics"/>
        <property name="navigatorsManager" ref="navigatorsManager"/>
    </bean>

    <bean id="navigatorsManager" class="lsfusion.server.logics.navigator.controller.manager.NavigatorsManager">
        <property name="businessLogics" ref="businessLogics"/>
        <property name="logicsInstance" ref="logicsInstance"/>
        <property name="restartManager" ref="restartManager"/>
        <property name="securityManager" ref="securityManager"/>
        <property name="rmiManager" ref="rmiManager"/>
        <property name="dbManager" ref="dbManager"/>
    </bean>

    <bean id="securityManager" class="lsfusion.server.physics.admin.authentication.security.controller.manager.SecurityManager">
        <property name="businessLogics" ref="businessLogics"/>
        <property name="dbManager" ref="dbManager"/>
        <property name="initialAdminPassword" value="${logics.initialAdminPassword:}"/>
    </bean>

    <bean id="logicsInstance" class="lsfusion.server.logics.LogicsInstance">
        <property name="lifecycle" ref="lifecycleManager"/>
        <property name="businessLogics" ref="businessLogics"/>
        <property name="rmiManager" ref="rmiManager"/>
        <property name="navigatorsManager" ref="navigatorsManager"/>
        <property name="restartManager" ref="restartManager"/>
        <property name="securityManager" ref="securityManager"/>
        <property name="dbManager" ref="dbManager"/>
        <property name="reflectionManager" ref="reflectionManager"/>
        <property name="settings" ref="settings"/>
        <property name="customObjects" ref="instanceCustomObjects"/>
    </bean>

    <!-- Задачи инициализации логики -->

    <bean id="createModulesTask" class="lsfusion.server.physics.dev.module.controller.init.CreateModulesTask">
        <property name="dependencies">
            <set>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="initLocalizerTask" class="lsfusion.server.physics.dev.i18n.controller.init.InitLocalizerTask">
        <property name="dependencies">
            <set>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="initReversedI18NDictionaryTask" class="lsfusion.server.physics.dev.i18n.controller.init.InitReversedI18NDictionaryTask">
        <property name="dependencies">
            <set>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>
    
    
    <bean id="initModuleDependenciesTask" class="lsfusion.server.physics.dev.module.controller.init.InitModuleDependenciesTask">
        <property name="dependencies">
            <set>
                <ref bean="createModulesTask"/>
                <ref bean="initLocalizerTask"/>
                <ref bean="initReversedI18NDictionaryTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="initModuleOrderTask" class="lsfusion.server.physics.dev.module.controller.init.InitModuleOrderTask">
        <property name="dependencies">
            <set>
                <ref bean="initModuleDependenciesTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="initMetaAndClassesTask" class="lsfusion.server.logics.controller.init.InitMetaAndClassesTask">
        <property name="dependencies">
            <set>
                <ref bean="initModuleOrderTask"/> <!-- потому как parser не thread safe, поэтому initModuleRestTask -->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="initObjectClassTask" class="lsfusion.server.logics.classes.controller.init.InitObjectClassTask">
        <property name="dependencies">
            <set>
                <ref bean="initMetaAndClassesTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="initTablesTask" class="lsfusion.server.physics.exec.db.controller.init.InitTablesTask">
        <property name="dependencies">
            <set>
                <ref bean="initObjectClassTask"/> <!-- нужны все классы, в том числе reflection -->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="initClassDataPropsTask" class="lsfusion.server.logics.classes.controller.init.InitClassDataPropsTask">
        <property name="dependencies">
            <set>
                <ref bean="initTablesTask"/> <!-- нужны таблицы, чтобы знать куда раскладывать признаки классов -->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="initFullSingleTablesTask" class="lsfusion.server.physics.exec.db.controller.init.InitFullSingleTablesTask">
        <property name="dependencies">
            <set>
                <ref bean="initClassDataPropsTask"/> <!-- нужны все классы, в том числе reflection -->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="initMainLogicTask" class="lsfusion.server.logics.controller.init.InitMainLogicTask">
        <property name="dependencies">
            <set>
                <ref bean="initFullSingleTablesTask"/> <!-- так как влияет на работу с expr'ами и учавствует в большом количестве кэшей  -->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>
    
    <bean id="checkDuplicateSystemElements" class="lsfusion.server.logics.controller.init.CheckDuplicateSystemElementsTask">
        <property name="dependencies">
            <set>
                <ref bean="initMainLogicTask"/> 
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>
    
    <bean id="fillImplicitCasesTask" class="lsfusion.server.logics.property.controller.init.FillImplicitCasesTask">
        <property name="dependencies">
            <set>
                <ref bean="checkDuplicateSystemElements"/> <!-- так как влияет на работу с expr'ами и учавствует в большом количестве кэшей  -->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="finalizeCalcAbstractTask" class="lsfusion.server.logics.property.controller.init.FinalizeCalcAbstractTask">
        <property name="dependencies">
            <set>
                <ref bean="fillImplicitCasesTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="finalizeActionAbstractTask" class="lsfusion.server.logics.action.controller.init.FinalizeActionAbstractTask">
        <property name="dependencies">
            <set>
                <ref bean="fillImplicitCasesTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <!-- we need to execute it after synchronizeDB because updateStat is done there (and thus statProps are filled), and finalizeLazyInit -> form usage -> PropertyDrawEntity.getValue/DrawProperty is used which uses / caches statProps  -->
    <bean id="finalizeLazyTask" class="lsfusion.server.logics.property.controller.init.FinalizeLazyTask">
        <property name="dependencies">
            <set>
                <ref bean="prereadFormEventsTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="checkRecursionsTask" class="lsfusion.server.logics.property.controller.init.CheckRecursionsTask">
        <property name="dependencies">
            <set>
                <ref bean="finalizeLazyTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="markRecursionsTask" class="lsfusion.server.logics.property.controller.init.MarkRecursionsTask">
        <property name="dependencies">
            <set>
                <ref bean="checkDuplicateSystemElements"/>
                <ref bean="finalizeActionAbstractTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="checkAbstractTask" class="lsfusion.server.logics.property.controller.init.CheckAbstractTask">
        <property name="dependencies">
            <set>
                <ref bean="finalizeCalcAbstractTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="initClassAggrPropsTask" class="lsfusion.server.logics.classes.controller.init.InitClassAggrPropsTask">
        <property name="dependencies">
            <set>
                <ref bean="finalizeCalcAbstractTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>


    <bean id="finalizeTask" class="lsfusion.server.base.task.GroupTask">
        <property name="dependencies">
            <set>
                <ref bean="finalizeCalcAbstractTask"/>
                <ref bean="markRecursionsTask"/> <!-- since JoinAction.isRecursive is used in a lot of methods -->
            </set>
        </property>
    </bean>

    <bean id="initReflectionEventsTask" class="lsfusion.server.physics.admin.reflection.controller.init.InitReflectionEventsTask">
        <property name="dependencies">
            <set>
                <ref bean="finalizeTask"/>
                <ref bean="initIndicesTask"/> <!-- reading from db so need stored+indices initialized-->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="initStoredTask" class="lsfusion.server.physics.exec.db.controller.init.InitStoredTask">
        <property name="dependencies">
            <set>
                <ref bean="finalizeCalcAbstractTask"/>
                <ref bean="initFullSingleTablesTask"/> <!-- has markStored inside-->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="initClassDataIndicesTask" class="lsfusion.server.logics.classes.controller.init.InitClassDataIndicesTask">
        <property name="dependencies">
            <set>
                <ref bean="initReflectionEventsTask"/>  <!-- because of initStats hack-->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="finishLogInitTask" class="lsfusion.server.physics.admin.log.controller.init.FinishLogInitTask">
        <property name="dependencies">
            <set>
                <ref bean="initReflectionEventsTask"/> <!-- так как логи - часть reflection'а-->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="setupDrillDownTask" class="lsfusion.server.physics.admin.drilldown.controller.init.SetupDrillDownTask">
        <property name="dependencies">
            <set>
                <ref bean="finalizeTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="setupResetFileTask" class="lsfusion.server.physics.admin.systemevents.SetupResetFileTask">
        <property name="dependencies">
            <set>
                <ref bean="finalizeTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="setupPropertyPolicyFormsTask" class="lsfusion.server.physics.admin.authentication.security.controller.init.policy.SetupPropertyPolicyFormsTask">
        <property name="dependencies">
            <set>
                <ref bean="finalizeTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="setupActionPolicyFormsTask" class="lsfusion.server.physics.admin.authentication.security.controller.init.policy.SetupActionPolicyFormsTask">
        <property name="dependencies">
            <set>
                <ref bean="setupDrillDownTask"/> <!-- т.к. нужна возможность настройки policy и для drilldown action'ов -->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <!-- we want to execute getting property list after synchronizeDB because updateStat is done there (and thus statProps are filled) because usePrevHeur / noUsePrevHeur are used in the calculating links methods, and they call getExpr, which eventually call getStatProps  -->
    <bean id="prereadApplyLinksTask" class="lsfusion.server.logics.event.init.PrereadApplyLinksTask">
    <property name="dependencies">
            <set>
                <!-- getDepends is used which needs lazy props to be finalized  -->
                <ref bean="finalizeLazyTask"/>
                <!-- we don't need this dependencies since we're moving all getList to the DBManager   -->
<!--                <ref bean="initReflectionEventsTask"/> &lt;!&ndash; так как в этом задании добавляются события &ndash;&gt;-->
<!--                <ref bean="initIndicesTask"/> &lt;!&ndash; hideOlds -> STAT calculation -> getIndices cache  &ndash;&gt;-->
<!--                <ref bean="setupDrillDownTask"/>-->
<!--                <ref bean="setupResetFileTask"/>-->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="getApplyPropertyListTask" class="lsfusion.server.logics.event.init.GetApplyPropertyListTask">
        <property name="dependencies">
            <set>
                <ref bean="prereadApplyLinksTask"/> <!-- not in parallel because in the end of getPropertyList links caches are dropped-->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="prereadSessionLinksTask" class="lsfusion.server.logics.event.init.PrereadSessionLinksTask">
        <property name="dependencies">
            <set>
                <ref bean="getApplyPropertyListTask"/> <!-- because actionChangeProps is not thread safe -->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="getSessionPropertyListTask" class="lsfusion.server.logics.event.init.GetSessionPropertyListTask">
        <property name="dependencies">
            <set>
                <ref bean="prereadSessionLinksTask"/> <!-- not in parallel because in the end of getPropertyList links caches are dropped-->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="finalizeTablesTask" class="lsfusion.server.physics.exec.db.controller.init.FinalizeTablesTask">
        <property name="dependencies">
            <set>
                <ref bean="initStoredTask"/> <!-- in init stored task auto tables are generated-->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="finalizeClassesTask" class="lsfusion.server.logics.classes.controller.init.FinalizeClassesTask">
        <property name="dependencies">
            <set>
                <ref bean="initMainLogicTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="finalizeGroupsTask" class="lsfusion.server.logics.form.controller.init.FinalizeGroupsTask">
        <property name="dependencies">
            <set>
                <ref bean="initMainLogicTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="finalizePropsTask" class="lsfusion.server.logics.property.controller.init.FinalizePropsTask">
        <property name="dependencies">
            <set>
                <!-- должно быть после всего, что может поменять editAction, contextMenu, etc.-->
                <ref bean="finishLogInitTask"/>
                <ref bean="setupDrillDownTask"/>
                <ref bean="setupPropertyPolicyFormsTask"/>
                <ref bean="setupActionPolicyFormsTask"/>
                <ref bean="initIndicesTask"/> <!-- hideOlds -> STAT calculation -> getIndices cache  -->
                <ref bean="finalizeGroupsTask"/> <!-- so that all props created after that task will be finalized (see Group.finalized usages) -->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="finalizeNavigatorElementsTask" class="lsfusion.server.logics.navigator.controller.init.FinalizeNavigatorElementsTask">
        <property name="dependencies">
            <set>
                <ref bean="finalizeTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="initClassDialogFormsTask" class="lsfusion.server.logics.classes.controller.init.InitClassDialogFormsTask">
        <property name="dependencies">
            <set>
<!--                <ref bean="finalizeClassesTask"/>-->
                <ref bean="checkDuplicateSystemElements"/> <!-- otherwise concurrent modification would occur -->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="finalizeFormsTask" class="lsfusion.server.logics.form.controller.init.FinalizeFormsTask">
        <property name="dependencies">
            <set>
                <ref bean="setupDrillDownTask"/> <!-- drilldown forms-->
                <ref bean="initReflectionEventsTask"/> <!-- log forms-->
                <ref bean="initClassDialogFormsTask"/> <!-- to avoid dead locks in auto dialog forms (see comment in CustomClass.initDialogForm) -->
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>
    
    <bean id="initIndicesTask" class="lsfusion.server.physics.exec.db.controller.init.InitIndicesTask">
        <property name="dependencies">
            <set>
                <ref bean="finalizeTask"/>
                <ref bean="initStoredTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="initDebugTask" class="lsfusion.server.physics.dev.debug.controller.init.InitActionDebuggerTask">
        <property name="logicsInstance" ref="logicsInstance"/>
        <property name="dependencies">
            <set>
            </set>
        </property>
    </bean>

    <bean id="executeOnStartedTask" class="lsfusion.server.logics.controller.init.ExecuteOnStartedTask">
        <property name="BL" ref="businessLogics"/>
        <property name="dependencies">
            <set>
                <ref bean="initDebugTask"/> <!-- we want the debugger to work in executing actions -->
            </set>
        </property>
    </bean>

    <bean id="executeImportIconsTask" class="lsfusion.server.logics.controller.init.ExecuteImportIconsTask">
        <property name="BL" ref="businessLogics"/>
        <property name="dependencies">
            <set>
<!--                <ref bean="initDebugTask"/> &lt;!&ndash; we want the debugger to work in executing actions &ndash;&gt;-->
            </set>
        </property>
    </bean>

    <bean id="prereadIconsTask" class="lsfusion.server.logics.form.controller.init.PrereadIconsTask">
        <property name="BL" ref="businessLogics"/>
        <property name="securityManager" ref="securityManager"/>
        <property name="dependencies">
            <set>
                <ref bean="executeImportIconsTask"/> <!-- icons should be synchronized first -->
            </set>
        </property>
    </bean>

    <bean id="exportRmiObjectTask" class="lsfusion.server.logics.navigator.controller.init.ExportRmiObjectTask">
        <property name="BL" ref="businessLogics"/>
        <property name="remoteLogicsLoader" ref="remoteLogicsLoader"/>
        <property name="initDevTask" ref="initDevRLTask"/>
        <property name="dependencies">
            <set>
                <ref bean="executeImportIconsTask"/> <!-- icons should be synchronized first -->
            </set>
        </property>
    </bean>

    <!-- Самый верхний task -->
    <bean id="initBLTask" class="lsfusion.server.base.task.GroupTask">
        <property name="dependencies">
            <set>
                <ref bean="checkAbstractTask"/>
                <ref bean="initClassAggrPropsTask"/>
                <ref bean="finalizePropsTask"/>
                <ref bean="initIndicesTask"/>
                <ref bean="initClassDataIndicesTask"/>
                <ref bean="finalizeFormsTask"/>
                <ref bean="finalizeClassesTask"/>
                <ref bean="finalizeTablesTask"/>
                <ref bean="finalizeNavigatorElementsTask"/>
            </set>
        </property>
    </bean>

    <!-- we need to execute it after synchronizeDB because updateStat is done there (and thus statProps are filled), and in the prereadEventActions -> getDefaultEventAction -> isValueUnique is used which uses / caches statProps  -->
    <bean id="prereadFormEventsTask" class="lsfusion.server.logics.form.controller.init.PrereadFormEventsTask">
        <property name="dependencies">
            <set>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="initDBTask" class="lsfusion.server.base.task.GroupTask">
        <property name="dependencies">
            <set>
                <ref bean="getSessionPropertyListTask"/>
                <ref bean="prereadFormEventsTask"/>
                <ref bean="checkRecursionsTask"/>
            </set>
        </property>
    </bean>

    <bean id="initDevRLTask" class="lsfusion.server.base.task.GroupTask">
        <property name="dependencies">
            <set>
                <ref bean="executeOnStartedTask"/>
                <ref bean="prereadIconsTask"/>
            </set>
        </property>
    </bean>

    <bean id="initRLTask" class="lsfusion.server.base.task.GroupTask">
        <property name="dependencies">
            <set>
                <ref bean="initDevRLTask"/>
                <ref bean="exportRmiObjectTask"/>
            </set>
        </property>
    </bean>

    <!-- Задачи инициализации reflection manager'а -->

    <bean id="syncTablesTask" class="lsfusion.server.physics.admin.reflection.controller.init.SyncTablesTask">
        <property name="dependencies">
            <set>
                <ref bean="syncPropertyEntitiesTask"/>
            </set>
        </property>
        <property name="reflectionManager" ref="reflectionManager"/>
    </bean>

    <bean id="syncPropertyEntitiesTask" class="lsfusion.server.physics.admin.reflection.controller.init.SyncPropertyEntitiesTask">
        <property name="dependencies">
            <set>
                <ref bean="readModulesHashTask"/> <!--sync tasks need isSourceHashChanged -->
            </set>
        </property>
        <property name="reflectionManager" ref="reflectionManager"/>
    </bean>

    <bean id="syncPropertyParentsTask" class="lsfusion.server.physics.admin.reflection.controller.init.SyncPropertyParentsTask">
        <property name="dependencies">
            <set>
                <ref bean="syncPropertyEntitiesTask"/>
                <ref bean="syncGroupPropertiesTask"/>
            </set>
        </property>
        <property name="reflectionManager" ref="reflectionManager"/>
    </bean>

    <bean id="syncPropertyDrawsTask" class="lsfusion.server.physics.admin.reflection.controller.init.SyncPropertyDrawsTask">
        <property name="dependencies">
            <set>
                <ref bean="syncFormsTask"/> <!--> так как ссылка на живой объект, а не varstring <-->
                <ref bean="syncGroupObjectsTask"/>
            </set>
        </property>
        <property name="reflectionManager" ref="reflectionManager"/>
    </bean>

    <bean id="syncParentsTask" class="lsfusion.server.physics.admin.reflection.controller.init.SyncParentsTask">
        <property name="dependencies">
            <set>
                <ref bean="syncNavigatorElementsTask"/> <!--> так как ссылка на живой объект, а не varstring <-->
            </set>
        </property>
        <property name="reflectionManager" ref="reflectionManager"/>
    </bean>

    <bean id="syncNavigatorElementsTask" class="lsfusion.server.physics.admin.reflection.controller.init.SyncNavigatorElementsTask">
        <property name="dependencies">
            <set>
                <ref bean="syncPropertyEntitiesTask"/> <!--> так как ссылка на живой объект, а не varstring, вообще конечно нужны action'ы но они пока вместе синхронизируются <-->
                <ref bean="syncFormsTask"/> <!--> так как ссылка на живой объект, а не varstring <-->
            </set>
        </property>
        <property name="reflectionManager" ref="reflectionManager"/>
    </bean>

    <bean id="syncFormsTask" class="lsfusion.server.physics.admin.reflection.controller.init.SyncFormsTask">
        <property name="dependencies">
            <set>
                <ref bean="readModulesHashTask"/> <!--sync tasks need isSourceHashChanged -->
            </set>
        </property>
        <property name="reflectionManager" ref="reflectionManager"/>
    </bean>
    
    <bean id="syncGroupPropertiesTask" class="lsfusion.server.physics.admin.reflection.controller.init.SyncGroupPropertiesTask">
        <property name="dependencies">
            <set>
                <ref bean="readModulesHashTask"/> <!--sync tasks need isSourceHashChanged -->
            </set>
        </property>
        <property name="reflectionManager" ref="reflectionManager"/>
    </bean>

    <bean id="syncGroupObjectsTask" class="lsfusion.server.physics.admin.reflection.controller.init.SyncGroupObjectsTask">
        <property name="dependencies">
            <set>
                <ref bean="syncFormsTask"/> <!--> так как ссылка на живой объект, а не varstring <-->
            </set>
        </property>
        <property name="reflectionManager" ref="reflectionManager"/>
    </bean>

    <bean id="prereadSecurityPoliciesTask" class="lsfusion.server.logics.controller.init.PrereadSecurityPoliciesTask">
        <property name="dependencies">
            <set>
                <ref bean="syncPropertyParentsTask"/>
                <ref bean="syncParentsTask"/>
            </set>
        </property>
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Не имеет отношения к reflection manager'у, но желательно чтобы выполнялся после export'а remote объекта -->
    <bean id="prereadCachesTask" class="lsfusion.server.logics.controller.init.PrereadCachesTask">
        <property name="dependencies">
            <set>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="prereadPropertyCachesTask" class="lsfusion.server.logics.property.controller.init.PrereadPropertyCachesTask">
        <property name="dependencies">
            <set>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="firstRecalculateStatsTask" class="lsfusion.server.physics.exec.db.controller.init.FirstRecalculateStatsTask">
        <property name="dependencies">
            <set>
                <ref bean="syncReflectionTask"/>
            </set>
        </property>
        <property name="BL" ref="businessLogics"/>
    </bean>

    <bean id="syncReflectionTask" class="lsfusion.server.base.task.GroupTask">
        <property name="dependencies">
            <set>
                <ref bean="syncTablesTask"/>
                <ref bean="syncPropertyParentsTask"/>
                <ref bean="syncPropertyEntitiesTask"/>
                <ref bean="syncPropertyDrawsTask"/>
                <ref bean="syncParentsTask"/>
                <ref bean="syncNavigatorElementsTask"/>
                <ref bean="syncGroupPropertiesTask"/>
                <ref bean="syncGroupObjectsTask"/>
            </set>
        </property>
    </bean>

    <bean id="initReflectionTask" class="lsfusion.server.base.task.GroupTask">
        <property name="dependencies">
            <set>
                <ref bean="prereadSecurityPoliciesTask"/>
                <ref bean="prereadCachesTask"/>
                <ref bean="prereadPropertyCachesTask"/>
                <ref bean="writeModulesHashTask"/>
            </set>
        </property>
    </bean>

    <bean id="readModulesHashTask" class="lsfusion.server.physics.admin.reflection.controller.init.ReadModulesHashTask">
        <property name="dependencies">
            <set>
            </set>
        </property>
        <property name="reflectionManager" ref="reflectionManager"/>
    </bean>

    <bean id="writeModulesHashTask" class="lsfusion.server.physics.admin.reflection.controller.init.WriteModulesHashTask">
        <property name="dependencies">
            <set>
                <ref bean="firstRecalculateStatsTask"/>
            </set>
        </property>
        <property name="reflectionManager" ref="reflectionManager"/>
    </bean>

    <!-- Список для переопределения custom-объектов -->
    <bean id="instanceCustomObjects" class="lsfusion.server.base.controller.lifecycle.SpringListsMergerFactory">
        <property name="listsToMerge">
            <list>
                <ref bean="coreCustomObjects"/>
                <ref bean="customObjects"/>
            </list>
        </property>
    </bean>

    <!-- Список базовых custom-объектов -->
    <util:list id="coreCustomObjects">
        <ref bean="scheduler"/>
    </util:list>

    <!-- Список для задания дополнительных custom-объектов -->
    <util:list id="customObjects"/>

    <!-- Remoting -->
    <bean id="rmiManager" class="lsfusion.server.base.controller.remote.RmiManager">
        <property name="port" value="${rmi.port:7652}"/>
        <property name="httpPort" value="${http.port:7651}"/>
        <property name="debuggerPort" value="${debugger.port:1299}"/>
        <property name="jmxPort" value="${rmi.jmxPort:0}"/>
        <property name="exportName" value="${rmi.exportName:default}"/>
    </bean>

    <bean id="remoteLogics" class="lsfusion.server.logics.controller.remote.RemoteLogics">
        <property name="businessLogics" ref="businessLogics"/>
        <property name="logicsInstance" ref="logicsInstance"/>
        <property name="navigatorsManager" ref="navigatorsManager"/>
        <property name="rmiManager" ref="rmiManager"/>
        <property name="restartManager" ref="restartManager"/>
        <property name="securityManager" ref="securityManager"/>
        <property name="dbManager" ref="dbManager"/>
    </bean>

    <bean id="remoteLogicsLoader" class="lsfusion.server.logics.controller.remote.RemoteLogicsLoader">
        <property name="rmiManager" ref="rmiManager"/>
        <property name="dbManager" ref="dbManager"/>
        <property name="remoteLogics" ref="remoteLogics"/>
        <property name="initTask" ref="initRLTask"/>
    </bean>

    <!-- Other services -->
    <bean id="scheduler" class="lsfusion.server.physics.admin.scheduler.controller.manager.Scheduler">
        <property name="businessLogics" ref="businessLogics"/>
        <property name="logicsInstance" ref="logicsInstance"/>
        <property name="dbManager" ref="dbManager"/>
    </bean>

    <bean id="externalHttpServer" class="lsfusion.server.physics.dev.integration.external.from.http.ExternalHttpServer">
        <property name="logicsInstance" ref="logicsInstance"/>
        <property name="remoteLogics" ref="remoteLogics"/>
    </bean>

    <!-- Lifecycle Manager setup -->
    <bean id="lifecycleManager" class="lsfusion.server.base.controller.manager.LifecycleManager">
        <constructor-arg ref="lifecycleListeners"/>
    </bean>

    <bean id="lifecycleListeners" class="lsfusion.server.base.controller.lifecycle.SpringListsMergerFactory">
        <property name="listsToMerge">
            <list>
                <ref bean="coreLifecycleListeners"/>
                <ref bean="customLifecycleListeners"/>
            </list>
        </property>
    </bean>

    <!-- the real order is defined by method getOrder in LifecycleListener -->
    <util:list id="coreLifecycleListeners">
        <ref bean="businessLogics"/>
        <ref bean="securityManager"/>
        <ref bean="dbManager"/>
        <ref bean="navigatorsManager"/>
        <ref bean="rmiManager"/>
        <ref bean="remoteLogics"/>
        <ref bean="remoteLogicsLoader"/>
        <ref bean="reflectionManager"/>
        <ref bean="scheduler"/>
        <ref bean="externalHttpServer"/>
    </util:list>

    <util:list id="customLifecycleListeners"/>

    <bean id="businessLogics" class="lsfusion.server.language.ScriptingBusinessLogics">
        <property name="includePaths" value="${logics.includePaths:*}"/>
        <property name="excludePaths" value="${logics.excludePaths:}"/>

        <property name="initTask" ref="initBLTask"/>

        <property name="topModule" value="${logics.topModule:}"/>
        <property name="logicsCaption" value="${logics.caption:}"/>
        <property name="orderDependencies" value="${logics.orderDependencies:}"/>
        <property name="lsfStrLiteralsLanguage" value="${logics.lsfStrLiteralsLanguage:#{null}}"/>
        <property name="lsfStrLiteralsCountry" value="${logics.lsfStrLiteralsCountry:#{null}}"/>
        <property name="setTimezone" value="${user.setTimezone:#{null}}"/>
        <property name="setLanguage" value="${user.setLanguage:#{null}}"/>
        <property name="setCountry" value="${user.setCountry:#{null}}"/>
        <property name="twoDigitYearStart" value="${user.twoDigitYearStart:#{null}}"/>
        <property name="dateFormat" value="${user.dateFormat:#{null}}"/>
        <property name="timeFormat" value="${user.timeFormat:#{null}}"/>
        <property name="theme" value="${user.theme:#{null}}"/>
        <property name="size" value="${user.size:#{null}}"/>
        <property name="navbar" value="${user.navbar:#{null}}"/>
        <property name="navigatorPinMode" value="${user.navigatorPinMode:#{null}}"/>
    </bean>
</beans>
